acceptedDate,authors,contributors,createdDate,dataProvider,depositedDate,documentType,doi,downloadUrl,fullText,id,identifiers,title,language,publishedDate,publisher,references,sourceFulltextUrls,updatedDate,yearPublished,links,abstract,tags,fulltextStatus
,"[{'name': 'McCaskey, Alexander'}, {'name': 'Dumitrescu, Eugene'}, {'name': 'Liakh, Dmitry'}, {'name': 'Humble, Travis'}]",[],2018-06-16T11:29:33+00:00,"{'name': 'arXiv.org e-Print Archive', 'url': 'https://api.core.ac.uk/v3/data-providers/144'}",,slides,,http://arxiv.org/abs/1805.09279,"INTERNATIONAL CONFERENCE ON REBOOTING COMPUTING, MAY 2018 1
Hybrid Programming for Near-term Quantum
Computing Systems
A. J. McCaskey, E. F. Dumitrescu, D. I. Liakh, and T. S. Humble
Quantum Computing Institute, Oak Ridge National Laboratory
Oak Ridge, Tennessee, 37831
Abstract—Recent computations involving quantum processing
units (QPUs) have demonstrated a series of challenges inherent to
hybrid classical-quantum programming, compilation, execution,
and verification and validation. Despite considerable progress,
system-level noise, limited low-level instructions sets, remote
access models, and an overall lack of portability and classical
integration presents near-term programming challenges that
must be overcome in order to enable reliable scientific quan-
tum computing and support robust hardware benchmarking.
In this work, we draw on our experience in programming
QPUs to identify common concerns and challenges, and detail
best practices for mitigating these challenge within the current
hybrid classical-quantum computing paradigm. Following this
discussion, we introduce the XACC quantum compilation and
execution framework as a hardware and language agnostic
solution that addresses many of these hybrid programming chal-
lenges. XACC supports extensible methodologies for managing a
variety of programming, compilation, and execution concerns
across the increasingly diverse set of QPUs. We use recent
nuclear physics simulations to illustrate how the framework
mitigates programming, compilation, and execution challenges
and manages the complex workflow present in QPU-enhanced
scientific applications. Finally, we codify the resulting hybrid
scientific computing workflow in order to identify key areas
requiring future improvement.
Index Terms—Quantum Computing, Quantum Programming
Models
I. INTRODUCTION
Currently available quantum processing units (QPUs) con-
sisting of tens of qubits are providing a unique capability for
understanding hybrid classical-quantum algorithms and asso-
ciated speedups for future scientific computing applications.
Such applications range across scientific domains, and small-
scale demonstrations of quantum programming have been
developed in fields such as nuclear and high-energy physics,
machine learning, chemistry and materials science [1]. While
QPU hardware development is progressing at a rapid pace,
these near-term quantum computing systems are far from
ideal [2]. Low-level unitary quantum instruction noise, read-
out errors, decoherence patheways, and remote programming
This manuscript has been authored by UT-Battelle, LLC, under contract
DE-AC05-00OR22725 with the US Department of Energy (DOE). The US
government retains and the publisher, by accepting the article for publication,
acknowledges that the US government retains a nonexclusive, paid-up, irre-
vocable, worldwide license to publish or reproduce the published form of this
manuscript, or allow others to do so, for US government purposes. DOE will
provide public access to these results of federally sponsored research in accor-
dance with the DOE Public Access Plan. (http://energy.gov/downloads/doe-
public-access-plan).
access models limit the scalability of these devices to research
applications. Recent results in hybrid classical-quantum varia-
tional algorithms demonstrate the potential ability to mitigate
some of these challenges, specifically QPU noise errors, but
there is an overall lack of awareness of the software tooling
needed by programmers and domain scientists to leverage such
computing systems in a robust and coherent way.
State of the art demonstrations of hybrid scientific quantum
computations on gate-model QPUs, e.g. devices offered by
vendors such as IBM, Rigetti, and Google, have had varied
success and limited simulation accuracy [3], [4], [5], [6]. For
example, the first variational hybrid quantum computation via
remote cloud resources reached an overall simulation accuracy
of 3 percent [5]. This is a computation that can be performed
by a classical computer in microseconds, yet it took months
of work to map it to a quantum computer and execute via
a remote cloud access model with job queue constraints.
These types of near-term hybrid programming challenges must
be overcome to enable reliable and reproducible quantum
computing applications and to support the continued testing
and characterization of quantum computer performance.
Can a robust software platform and workflow improve the
usability and accessibility of near-term quantum computers for
scientific applications? In this work, we attempt to answer this
question in the affirmative by providing a model workflow for
near-term hybrid quantum computations that enables useful
scientific applications and makes quantum computing tech-
nologies accessible to a broader community. We will detail
the primary challenges present in these hybrid, noisy quantum
computations and discuss best practices for addressing them.
We describe the XACC quantum compilation and execution
framework that provides a hardware and language agnostic
solution for many of these challenges and supports extensible
methodologies that provide a strategy for managing program-
ming concerns across an increasingly diverse set of QPU tools.
As an example, we discuss recent demonstrations of scientific
applications built on XACC for nuclear physics.
This work is organized as follows: first, we provide a
discussion of hybrid classical-quantum computing systems,
including high-level discussions of requisite programming and
execution models. We then discuss the near-term challenges
present in programming, compiling, and executing hybrid
scientific computing applications. Afterwards we introduce the
XACC quantum programming framework and detail how it
addresses these unique challenges. Finally, we conclude by
demonstrating its utility with the example of computing the
ar
X
iv
:1
80
5.
09
27
9v
1 
 [q
ua
nt-
ph
]  
23
 M
ay
 20
18
INTERNATIONAL CONFERENCE ON REBOOTING COMPUTING, MAY 2018 2
binding energy of the deuteron bound state.
II. HYBRID COMPUTING SYSTEMS
We broadly define hybrid computing systems as a class of
abstract machine models that combine different computational
paradigms. However, we specialize our analysis to the case of
realizable architectures that integrate a conventional classical
Turing machine with a quantum Turing machine. Research into
these different machine models has clarified that they are not
equivalent with respect to computational power [7], and we
address some of the unique considerations that arise by using
the conventional model to program and control the quantum
model.
Fig. 1. A hybrid computing infrastructure that integrates classical systems of
Boolean logic into the control of quantum dynamics requires an interface for
input-output (IO) based on the transmission and reception of physical fields
Finput(t) and Foutput(t).
As shown in Fig. 1, the two-way interaction between a
classical and a quantum machine model imposes a constraint
that requires the machines to share a common understanding
of language. In practice, this language is expressed as the
physical fields that define the operations issued by the conven-
tional model and implemented within the quantum domain [8].
Electric, magnetic, and optical fields are prominent examples
by which the current technology controls the quantum physical
systems. It is notable that this description is inherently ana-
log due to the continuity of the time-dependent Schrodinger
equation. Translation between the system of Boolean logic
characterizing the conventional Turing machine into the analog
fields is necessarily limited by the available computational
power. In practice, this amounts to constraints imposed by
the available digital-to-analog converters and the range of the
arbitrary waveform generators as well as the speed at which
the logical network can be processed and the connectivity of
the control system.
The outstanding concern for programming such a hybrid
computing system is the controllability of the conventional and
quantum machines [9], [10]. That is to say, for those scenarios
in which the quantum machine must execute a series of issued
instructions, how accurately are these instructions realized and
how precisely does the result reflects the effect of the intended
instructions?
A. Client-Server Model for Hybrid Computing Systems
Current state-of-the-art hybrid computing systems integrate
existing CPU-based clients with QPU-based servers [11], [12].
The latter represent the online availability of a programmable
infrastructure to access the field generators that drive the
control of a quantum physical device. The applied fields
are shaped and scheduled to control the dynamics of an
addressable array of quantum physical subsystems, which for
convenience we denote generically as the quantum register.
Similarly, the response fields emitted by the register elements
are collected and discriminated to generate binary representa-
tions that characterize the state of the register.
A QPU-based server often includes conventional CPUs for
purposes of parsing the digital programming instructions that
generate the shape and timing of the control fields as well
as the detection and discrimination of the response fields.
Access to the QPU-based server requires an interface that may
adhere to conventional logic, for example, as found in modern
networking communication technology, to accept instructions
from and return results to a CPU-based client. Currently, the
conventional client-server model shown in Fig. 2 dominates
the access method to QPU systems due in large part to the
experimental nature of these machines.
Within the client-server model for hybrid computing sys-
tems, the QPU represents a layer of language parsers that
translate the Boolean logic of the client to the control fields
required to drive the quantum register. As detailed elsewhere
[8], the QPU is partitioned into a control unit, execution
units, and the register itself. The control unit parses the client
instructions received by the server into the local instruction
set architecture for generating and applying control fields.
Application of the fields are carried out by the execution units,
which in practice represent waveform generators for electric,
magnetic and optical fields. A similar signal flow occurs for
detecting output fields and generating a digital response.
Fig. 2. Currently, most hybrid computing systems rely on a CPU-based client
interacting with a QPU-based server over a network. The QPU-based server
presents a classical control interface to the client that can be customized to a
variety of programming styles. Internally, the QPU-based server must parse
these instructions into a local representation that carries out the requested
sequence of control fields.
B. Programming and Execution Model
The client-side API for the hybrid computing system dic-
tates how users access the quantum physical devices, while
the functionality of the QPU-based server is restricted to the
local interpretation of these transmitted instructions. In this
programming model, a client may select which instructions
to send from a predefined instruction set for the QPU. The
INTERNATIONAL CONFERENCE ON REBOOTING COMPUTING, MAY 2018 3
instruction set architecture (ISA) defines the functionality of
the QPU and the language for the control unit [13]. These in-
structions are generally transmitted as character strings that are
mapped by the QPU-based server into pre-compiled functions
that execute the instruction. Calls to these libraries initiate
the cascade of logic required to trigger the execution units,
which subsequently apply the necessary fields to the register
elements.
Fig. 3. Components in a QPU-based server include a control unit that
expresses the instruction set architecture (ISA), multiple execution units that
translate instructions into applied fields, and the quantum register which stores
the computational state. This layered, hierarchical structure provides a natural
separation of concerns but introduces challenges to programming near-term,
noisy QPUs.
As shown in Fig. 3, the two-way information flow within the
QPU-based server provides a natural separation of concerns
for device programming. The logic dictating computational
functionality is isolated within the control unit and determined
by programs expressed within the ISA. Similarly, the execution
unit hosts the translation of individual instructions into the
fields that carry out the intended logical transformations on
the register. The information unique to the implementation of
either layer is notionally not required in the opposing layer.
However, as we explore in the subsequent section, this design
of the current QPU-based servers leads to several challenges
for application programming.
III. PROGRAMMING CHALLENGES FOR NOISY QPUS
Despite the natural separation of concerns that arises in
a hybrid computing system using a QPU-based server, this
design presents a number of challenges when programming
currently available noisy quantum processors. Advances in
our understanding and engineering of QPUs have enabled
demonstrations with register capacities up to 20 addressable
elements, yet these realizations still demonstrate a non-trivial
amount of noise relative to the underlying decoherence rates,
greatly limiting the depth of quantum circuits with even
modest reliability. This raises a need for repeated sampling of
the circuit execution, but existing client-server access models
hamper this interaction and greatly limit the overall utility and
accessibility of the QPUs.
Code portability is also a growing concern as many QPU
vendors trend toward standalone programming frameworks
that interact with their tightly controlled and proprietary ISA.
These barriers to portability impede efforts to perform veri-
fication of software and benchmarking of hardware as well
as methods to validate hardware behavior using numerical
simulation. Finally, the individual workflow steps required to
program, compile, and execute hybrid applications with near-
term QPUs are tightly coupled. The lack of inter-operability
across available software and hardware platforms raises a
concern that the users programming hybrid computing systems
will face artificial barriers to adoption and performance.
We provide a more detailed description of each of these
challenges with an analysis for how hybrid computation is
affected. While several references provide background for
additional technical details, we identity how each of these
challenges must be overcome in order to advance utilization
of noisy QPU systems.
A. Gate Noise and Execution Errors
In a QPU, gate noise represents a lack of control over the
fundamental physical processes by which program instructions
are executed. Among many measures of instruction accuracy,
the quantum state fidelity quantifies the accuracy by which an
observed state meets the instruction design requirements. For
this characterization, a noisy gate applied to a well-defined
quantum register state will induce a logical transform that
prepares the register in a state that is not parallel with the
expected outcome. Assuming only pure states, the fidelity is
defined as the squared magnitude of the inner product between
the observed and expected register states and, for noisy gates,
it is always less then unity. A similar fidelity measure can be
defined for mixed states in terms of the trace distance.
Noisy gate operation obviously influences program execu-
tion by diverting the computational state away from the in-
tended algorithmic design. Quantum error correction and fault-
tolerant gate protocols may be expected to mitigate this noise
eventually, but such techniques are beyond the scope of current
hardware devices. Instead, programming noisy QPUs must
directly address the presence of errors within the application
logic. This may be as simple as repeated execution of the
program as a method of sampling the computer outputs, or it
may be a more sophisticated redesign of the compiled circuit to
mitigate against known errors. For such methods, the burden of
understanding the noise that arises from the execution of these
instructions lies on the programmer. However, as noted in the
previous section, the separation of concerns for current QPU-
based servers isolates the physics of the execution unit and
register from the user. The ISA alone provides the interface
for programming and controlling the computational logic.
So far the application developers have relied on external
characterization of the gate noise outside of the programming
workflow. This requires consideration of errors during the
algorithmic design stage which is largely based on manual
analysis [14]. Such strategies are untenable as circuit complex-
ity increases. Programming models that are device-aware are
currently lacking, but would be necessary to automate circuit
rewriting techniques to compensate for noisy gates.
In addition to the effects of gate noise, execution errors
for a quantum program also arise from state-preparation and
INTERNATIONAL CONFERENCE ON REBOOTING COMPUTING, MAY 2018 4
measurement (SPAM) errors. These errors correspond to faulty
initialization or measurement of a register element. For ex-
ample, an instruction to initialize the computational state |0〉
may inadvertently prepare the state |1〉 or a superposition of
these two possibilities. Similarly, measurement of the state |0〉
may instead project into |1〉, which would be interpreted as
the 1. It is notable that SPAM errors currently dominate QPU
performance in multiple technologies with error rates nearly
an order of magnitude above typical gate errors.
Several strategies exist for mitigating SPAM errors such
as using a series of repeated program executions to decode
the correct result based on the maximum likelihood statistics.
However, this example of statistical detection based on es-
timates of the output measurement values not only adds to
the complexity of the program execution but also requires
accurate characterization of the error mechanisms. Because
of the relatively high SPAM error rates, a large number of
samples are typically required to gain high confidence in the
program behavior. But the separation of concerns between the
physical and logical layers in the QPU details hides these
physical errors from the programmer. Inline calibrations for
initialization and measurement gates may be able to bridge this
gap when the number of register elements is very small and
the errors are independent, but cross-talk during measurement
may invalidate the latter model. Moreover, such calibrations
are intractable as the size of the register reaches ever larger
sizes.
B. Access Models
The overall system infrastructure required to operate current
QPU systems is based largely on sensitive, experimental
devices that cannot be easily distributed. Many vendors and
laboratories therefore enable users to access these complex
computing systems via remote, online server. Examples of
these remote access models include QPU-based servers that
support REST APIs that delegate request to a job queue
service, which then schedules program execution on the QPU.
In addition, many systems provide web portals that permit
manual input methods for programming. These may also
be operated via the REST API or Pythonic frameworks by
creating batch-style program executions.
This remote user access infrastructure suffices for small-
scale program executions, but production-level computing,
including scientific computing applications based on quantum
acceleration, are not amenable to remote access models. As
described in the subsequent sections, many current demon-
strations of hybrid variational quantum algorithms employ
repeated program executions [15], [16], [17], [18]. These
methods require many consecutive serial executions in which
each execution influences the next iteration of the algorithm. A
remote network connection is therefore an impractical access
model for this type of iterative hybrid algorithms because of
the additional overhead associated with the remote calls, the
communication parsing, and the queuing latency.
A related challenge for QPU-based server programming
is that the job queue service employed by most servers is
based on individual serial QPU executions. This introduces a
hardware bottleneck for the variational sampling algorithms
that use multiple circuit executions to estimate a single ob-
servable. Related circuit executions are not collated within the
queue, which slows down the overall application execution
time. In contrast, job schedulers for typical high-performance
computing systems operate by queuing a complete application
execution. That is to say, when a job reaches the top of the
queue, the associated applications are executed completely to
remove unnecessary uncertainty in both the application and
machine state.
C. Portability
A persistent concern for any application developer is the
portability of existing code onto new platforms. Despite the
major conceptual shift offered by the quantum computational
model, this concern is also faced by the nascent hybrid
application developer community. Many QPU vendors support
standalone programming frameworks that interact only with
their tightly controlled and proprietary ISA. Although tight
control over the system may offer advantages to the vendor, a
major disadvantage to users is a need to retool for each QPU.
Efforts to retool often slow down overall productivity and may,
eventually, impede efforts to adopt new software or hardware.
The lack of portability also presents a challenge for verifi-
cation of software and benchmarking of hardware as well as
for validation of the hardware behavior based on numerical
simulations. In particular, there is a concern that test cases
and benchmarks devised for one hardware platform will be
incompatible with similar efforts developed for other plat-
forms. In essence, developers cannot begin to address quantum
benchmarking concerns without some form or mechanism
of quantum code portability. Code verification and program
validation represent important steps in certifying an applica-
tion as correct. The above challenges for current quantum
programming tools directly impact the ability for application
developers to perform verification and validation. Noise and
errors undermine the testability of the application, while non-
portable codes challenge the ability to use different platforms
for comparative analysis.
D. Classical-Quantum Integration
Primarily due to the remote access models employed and
an overall lack of code portability, currently available quantum
computing resources lack direct integration with conventional
software and processing workflows. This integration is not nec-
essary for experimental proof-of-concept demonstrations, in
which the focus is on manual, device-level benchmarking and
validation of the QPU physical behavior [19]. But integration
is necessary to make such devices available for development
and testing of classical-quantum hybrid algorithms. Currently,
these interactions are largely avoided or treated as separate
stages of a manual workflow.
There are several efforts underway to integrate quantum and
classical workflows. Examples of domain-specific languages
have appeared including Quipper [20], ProjectQ [21], Liq-
uid [22], and Q# [23] among many others. However, these
languages target programmers with detailed knowledge and
INTERNATIONAL CONFERENCE ON REBOOTING COMPUTING, MAY 2018 5
understanding of quantum logic, especially in the gate or
circuit model. The integration of these languages with existing
programming methods, including well-known languages such
as C/C++ and python, are established by using externally
reference library functions or embedding in a host language.
In both cases, the understanding of quantum functionality and
device behavior is ambiguous to the high-level language user
and challenges the understanding of information flow and error
analysis needed for profiling an application on a noisy QPU.
E. Quantum Compilation Workflow
The quantum compilation workflow, like any compiler
workflow, can be composed of discrete steps that at a black-
box level read in a quantum source code and produce machine-
level instructions ready for execution. However, along the way,
many individual tasks need to be executed in order to ensure
that the computation is amenable for the chosen hardware and
is at least partly resilient to system noise and errors. This
includes register allocation, instruction scheduling and layout,
and, for noisy QPUs, pre- and post-processing of erroneous
inputs and outputs.
These individual compiler layers for quantum computation
must be tightly coupled in that the layers closer to the
high-level source code directly influence layers at a lower
level closer to the hardware. Compilation layers can have a
multiplicity greater than 1, meaning that multiple processes of
the same type may be executed for a given layer, and these
processes may or may not commute. Also, compilation layers
may dictate whether or not any post-execution actions must
take place.
Fig. 4. The XACC compilation workflow is a series of processing layers
amenable to near-term quantum computer programs. These layers include
language parsing, source code pre-processing, optimization, and transforma-
tion. For near-term program behavior, the pre-processing layer is strongly tied
to the post-processing methods that follow QPU execution, e.g., SPAM error
mitigation strategies.
We provide working examples of the layers required the
compilation workflow for noisy QPUs in Fig. 4. The first
step in this workflow is source code parsing, which maps
quantum code to an intermediate representation (IR) of the
input program. This representation then passes through a
compilation layer that provides generic pre-processing of the
intermediate representation. The subsequent two layers target
IR optimization and code transformation. Optimization may
include simplification and enhancements to the programmed
quantum logic which is isomorphic with the original program,
while transformations modify the intermediate representation
structure to satisfy logical constraints exposed by the hardware
topology. The next layer maps the IR to the low-level quantum
machine instructions (QMI) for the target hardware. The re-
sulting representation is an executable that will be executed on
the QPU-based server. Following execution, additional post-
processing steps may be included to take advantage of the
pre-processing layer.
These various layers of the compilation workflow must be
tightly coupled, ideally through the use of a common IR
to minimize overhead. Pre-processing directly influences the
optimizations and transformations that may be implemented
as well as the post-analysis of the QPU measurement results.
At each compilation layer, multiple invocations of individual,
yet different, pre-processors, optimizers, or transformations,
and the execution of these processes may not commute with
one another. For example, one preprocessor may update the IR
instance in a way that makes a future pre-processor execution
invalid. Maintaining logic across these different instances of
the IR is a challenge for evaluating near-term noisy QPUs.
IV. XACC
We have put forth a new hybrid classical-quantum pro-
gramming model, XACC (eXtreme-scale ACCelerator), that
attempts to address many of the challenges discussed above.
XACC has been specifically designed for enabling near-
term quantum acceleration within existing classical computing
applications and workflows. This model, and associated open-
source reference implementation, follows the traditional classi-
cal co-processor model, akin to OpenCL or CUDA for GPUs,
but takes into account the subtleties and complexities inherent
to the interplay between classical and quantum hardware.
XACC provides a high-level API that enables classical applica-
tions to offload work (represented as quantum kernels) to an at-
tached quantum accelerator in a manner that is agnostic to the
quantum programming language and the quantum hardware.
This enables one to write quantum code once, and perform
benchmarking, verification and validation, and performance
studies for a set of virtual (simulators) or physical quantum
hardware. To achieve interoperability and portability, XACC
defines four primary abstractions or concepts: quantum ker-
nels, intermediate representation, compilers, and accelerators.
Quantum kernels are C-like functions that contain code in-
tended for execution on the QPU. These kernels are compiled
to the XACC intermediate representation (IR), an object model
that is key for promoting the integration of a diverse set of lan-
guages and hardware. The IR provides four main forms for use
by algorithm programmers: (1) an in-memory representation
and API, (2) an on-disk persisted representation, (3) human-
readable quantum assembly representation, and (4) a control
INTERNATIONAL CONFERENCE ON REBOOTING COMPUTING, MAY 2018 6
flow graph or quantum circuit representation. On top of this IR
infrastructure, XACC defines further extension points for tools
that pre-process the IR instance, post-process the IR instance,
and a post-processor workflow layer that adjusts or corrects
QPU results. The IR is produced by realizations of the XACC
compiler concept, which delegates to the kernel languages
appropriate parser, compiler, and optimizer. Finally, XACC
IR instances (and therefore programmed kernels) are executed
by realizations of the Accelerator concept, which defines an
interface for injecting physical or virtual quantum accelerators.
Accelerators take this IR as input and delegate execution to
vendor-supplied APIs for the QPU (or API for a simulator).
The orchestration of these concepts enable an expressive API
for quantum acceleration of classical applications.
Currently, XACC provides support for a number of low-
level quantum programming languages and both physical
and virtual (simulators) hardware instances. XACC sup-
ports kernels written in Scaffold, Quil, as well as high-
level domain-specific languages encoding second-quantized
fermionic Hamiltonians. XACC provides a unified access to
the Rigetti Forest infrastructure (simulators and the 19 qubit
QPU) and the IBM Quantum Experience (simulators and 5
and 16 qubit QPUs). To demonstrate its use across computing
models, the XACC interfaces are general enough that XACC
also supports the D-Wave quantum annealer.
The overall goal of XACC is to provide an integration
platform that enables researchers, engineers, and students to
leverage near-term quantum computing architectures as part
of existing classical computational workflows in a manner
that fits the work at hand. Users should be able to express
programs in a high-level domain-specific language that fits
the science application and targets any available quantum
computer. In this way, XACC can enable quantum computer
science educational efforts, and for researchers, can enable
benchmarking, verification, and profiling across a wide variety
of QPU types.
A. XACC and Portability
Overall code portability is at the heart of the XACC
design. XACC is the first platform to provide a robust and
polymorphic intermediate representation object model that
enables programming across quantum computing models (gate
or adiabatic). This IR allows XACC to be language-agnostic,
such that a code written in one language can be compiled to an
IR instance and then mapped to a representation amenable for
execution on a completely different QPU. This mapping step
can be accomplished with user-specified IR transformation
implementations. For example, imagine one writes quantum
code for one architecture with a given qubit connectivity and
wants to run it on another architecture with a different connec-
tivity structure. XACC handles the execution of appropriate
transformations on the IR that insert swap gate instructions
to insure that two qubit interactions can be executed on the
new architecture. This general IR transformation infrastructure
makes sure that true code portability can be achieved in the
case of hybrid classical-quantum computing. It provides a
mechanism for future benchmarking of quantum computers
via a number of different application types.
B. XACC and Error Mitigation
The XACC interfaces can also be leveraged to provide
certain error mitigation strategies. Most novel error mitigation
schemes involve some sort of classical pre-processing of the
quantum program, followed by execution and post-processing
of the result based on the pre-processing action. This type of
workflow fits in very well with the XACC IR infrastructure.
Classical pre-processing can be achieved through an imple-
mentation of the IR pre-processing interface. This interface
takes an IR instance in, pre-processes or otherwise modifies
this IR in some way, and then outputs a functional instance
of some post-processing step that is stored by the XACC
framework and executed after QPU execution. This is an ideal
setup for mitigating the QPU qubit readout errors discussed in
Section III-A. XACC provides a pre-processor implementation
that prepends the IR instance with extra quantum kernels that
measure the overall probability of a bit flip error on a given
qubit. Those results are stored and used by a post-processor
functional instance, which is applied to the qubit measurement
results after execution. This post-processor uses the bit flip
probabilities to shift and scale resultant observable expectation
values to more accurate values.
This workflow could be applied to other forms of error mit-
igation, requiring simple interface implementations that pre-
process quantum IR and post-process QPU qubit measurement
results.
C. XACC and Access Models
The XACC platform enables multiple forms of user access
via the host language the framework is written in and its
overall platform, or system context, model. XACC is written
in C++ - a foundational language that enables bindings to
many other programming languages. This greatly facilitates
a user access to available QPUs since users are not tied to
a language they are not familiar with. As of this writing,
XACC provides Python bindings and has planned support for
Fortran due to its wide adoption in classical high-performance
scientific computing.
XACC implements a client-server access model designed to
support both remote and local user access models, as discussed
in Section II-A. Implementations of the XACC accelerator
construct are currently available for QPUs with access to
a REST client that enables HTTP POST/GET operations to
affect execution of quantum programs on the remotely hosted
service. The XACC client-server model also enables access
to a local access model by using service invocations that
can be routed to the local host computing system. XACC is
currently ready to enable local QPU-access models simply by
redirecting the accelerator URL to the locally hosted QPU
driver server.
D. XACC Compilation Workflow
The XACC compilation process directly implements the
workflow layers described in Fig. 4. The XACC compiler in-
terface takes quantum kernels as input and outputs a represen-
tative IR instance. This IR instance is then passed through any
INTERNATIONAL CONFERENCE ON REBOOTING COMPUTING, MAY 2018 7
requested IR Preprocessors - which can be implementations
for readout-error mitigation of the IR program, or mapping
logical qubits to more appropriate physical qubits. This layer
is extensible for future preprocessing implementation steps.
The XACC IR Preprocessor takes as input the IR instances
but produces a new post-processing function instance that is
queued up for execution after the primary QPU execution.
Next, the IR is passed to any requested optimization rou-
tines. An example implementation for this is a mechanism
for simplifying the program to use fewer resources on the
hardware. Next, transformations are executed that make the
program amenable for execution on the hardware (to ensure
requested two-qubit gates are available in hardware, and, if not,
apply swap gate transformations, for example). Finally, the IR
is mapped to the appropriate low-level machine instruction set
implemented in hardware.
This compiled result is sent off for execution on the QPU,
and the resultant bit strings are brought back and passed
through any post-processing functional instances produced by
the preprocessing layer. This can be, for example, a post-
processor that updates observable expectation values based
on error probabilities added to the overall computation via
a previous IR Preprocessor.
V. APPLICATION EXAMPLES
In this section, we review a recent example application
programmed and executed using XACC that was hardware
agnostic and implemented the various layers of the quantum
compilation workflow. This example made use of the vari-
ational quantum eigensolver (VQE) algorithm, which relies
on the variational principles of quantum mechanics to find
the minimal energy quantum state under a given Hamiltonian.
The algorithm is relatively simple and has the advantage
of permitting even short-depth circuits to address interesting
application scenarios. Here we provide a brief overview of
this application and detail how XACC addresses the various
challenges detailed in this work.
A. Nuclear Binding Energy
We recently undertook the computation of the binding
energy of the deuteron via cloud quantum computing resources
using the variational quantum eigensolver hybrid algorithm
[5]. Using XACC, we were able to program the problem in a
hardware-agnostic manner and target available superconduct-
ing circuit gate model quantum computers from IBM and
Rigetti [24], [25]. Via the compiler workflow discussed in
Sections III-E,IV-D, we were also able to provide minimal
error mitigation that corrected for qubit measurement readout
errors. This work represented the first variational quantum
eigensolver computation done through a remote access model,
and highlighted the need for future local access models that
take advantage of application job queues instead of individual
QPU execution queues. This remote access model severely
hindered the work and demonstrates the need for vendors to
research and implement local access models that enhance or
enable variational scientific quantum simulation.
We leave the low-level technical details of the deuteron
work to [5], but at a high level, we leveraged a pionless
effective field theory in a discrete variable representation using
the familiar harmonic oscillator basis. We considered cutoffs
of that basis at N = 2, 3. Here we discuss the N = 2 case for
brevity, which employed the following Hamiltonian
H2 = 5.906709I + 0.218291Z0 − 6.125Z1
− 2.143304 (X0X1 + Y0Y1) . (1)
Dictated by this Hamiltonian, we performed measurements of
our QPU after application of a unitary coupled cluster circuit
composed of a single variational parameter θ. Computing the
ground state energy required looping over various θ parameters
as part of a classical non-linear optimization scheme until
convergence criteria were met.
Listing 1. XACC Kernels for Deuteron VQE
__qpu__ ansatz(AcceleratorBuffer b,
double t0) {
X 0
RY(t0) 1
CNOT 1 0
}
__qpu__ z0(AcceleratorBuffer b, double
t0) {
ansatz(b,t0)
MEASURE 0 [0]
}
__qpu__ z1(AcceleratorBuffer b, double
t0) {
ansatz(b,t0)
MEASURE 1 [1]
}
__qpu__ x0x1(AcceleratorBuffer b,
double t0) {
ansatz(b,t0)
H 0
H 1
MEASURE 0 [0]
MEASURE 1 [1]
}
__qpu__ y0y1(AcceleratorBuffer b,
double t0) {
ansatz(b,t0)
RX(1.57079) 0
RX(1.57079) 1
MEASURE 0 [0]
MEASURE 1 [1]
}
The code for this work was written in as XACC quantum
kernels in the Quil language from Rigetti [26] and is shown in
Listing 1. Through XACC, this code was immediately portable
to IBM (as well as a number of simulators), thus overcoming
the portability challenge for near-term quantum programming
and computation.
One common source of error discussed in Section III-A
are due to systematic errors in reading out the state of an
individual qubit. These types of errors were discussed in the
supplemental information of [4]. For this work we automated
this error mitigation strategy as part of the XACC compiler
workflow. We implement the XACC IR Preprocessor extension
interface to append measurements of each qubit that provide
INTERNATIONAL CONFERENCE ON REBOOTING COMPUTING, MAY 2018 8
probabilities that the qubit was in a state of 0 when a 1 was
expected, and vice versa. This IR Preprocessor implementation
then returns a post processing function instance that is exe-
cuted after QPU execution that leverages these probabilities
to shift and scale observable expectation values. The plot in
Figure 5 shows the energy as a function of the variational
parameter, with and without this readout error mitigation
preprocessor execution. Clearly, automating this sort of error
mitigation will provide more reliable results with minimal
costs to those adopting quantum computing as part of their
scientific computing workflows.
3 2 1 0 1 2 3
0
5
10
En
er
gy
exact
error corrected energies
raw energies
Fig. 5. Energy as a function of the variational parameter for the deuteron
N = 2 Hamiltonian with and without readout error correction.
VI. CONCLUSION
Hybrid computing systems offer novel platforms to inte-
grate emerging QPU with conventional programming methods.
However, there are several challenges that arise from these
noisy devices whose performance not yet well understood. In
this contribution, we have outlined many of the technical issues
faced by quantum program developers adopting to client-
server model for remote access across multiple technologies
and vendors. In addition to new needs for device-level in-
formation, current programmers also face obstacles in code
portability, tool integration, program validation, and workflow
development.
In the context of these challenges, we have described how
the XACC programming framework provides new methods
for inter-operable program and tool development as well as
support for new access client-server access models based on
local QPU systems. The framework itself is hardware agnostic
and, therefore, meant to provide a generalized approach to
quantum programming. This contrast with the diversity of
vendor-specific stacks and domain-specific languages under-
development. We anticipate that both efforts, specialized and
generalized, are needed to ensure strong and robust growth of
the quantum computing ecosystem. The ongoing co-design of
hardware and software to mitigate gate noise and execution
errors will continue to require close coordination.
ACKNOWLEDGMENT
This work has been supported by the Laboratory Directed
Research and Development Program of Oak Ridge National
Laboratory and the US Department of Energy (DOE) Office
of Science Advanced Scientific Computing Research Early
Career Research Award.
REFERENCES
[1] A. Aspuru-Guzik, W. van Dam, E. Farhi, F. Gaitan, T. Humble, S. Jor-
dan, A. Landahl, P. Love, R. Lucas, J. Preskill, R. Muller, K. Svore,
N. Wiebe, and C. Williams, ASCR Workshop on Quantum Computing
for Science. Department of Energy, June 2015.
[2] J. Carter, D. Dean, G. Hebner, J. Kim, A. Landahl, P. Maunz, R. Pooser,
I. Siddiqi, and J. Vetter, ASCR Report on a Quantum Computing Testbed
for Science. Department of Energy, February 2017.
[3] N. M. Linke, D. Maslov, M. Roetteler, S. Debnath, C. Figgatt, K. A.
Landsman, K. Wright, and C. Monroe, “Experimental comparison of
two quantum computing architectures,” Proceedings of the National
Academy of Sciences, p. 201618020, 2017.
[4] A. Kandala, A. Mezzacapo, K. Temme, M. Takita, M. Brink, J. M.
Chow, and J. M. Gambetta, “Hardware-efficient variational quantum
eigensolver for small molecules and quantum magnets,” Nature, vol.
549, pp. 242–246, Sep. 2017.
[5] E. F. Dumitrescu, A. J. McCaskey, G. Hagen, G. R. Jansen, T. D. Morris,
T. Papenbrock, R. C. Pooser, D. J. Dean, and P. Lougovski, “Cloud
Quantum Computing of an Atomic Nucleus,” ArXiv e-prints, Jan. 2018.
[6] P. OMalley, R. Babbush, I. Kivlichan, J. Romero, J. McClean,
R. Barends, J. Kelly, P. Roushan, A. Tranter, N. Ding et al., “Scalable
quantum simulation of molecular energies,” Physical Review X, vol. 6,
no. 3, p. 031007, 2016.
[7] D. R. Simon, “On the power of quantum computation,” SIAM journal
on computing, vol. 26, no. 5, pp. 1474–1483, 1997.
[8] K. A. Britt, F. A. Mohiyaddin, and T. S. Humble, “Quantum accelerators
for high-performance computing systems,” in 2017 IEEE International
Conference on Rebooting Computing (ICRC), Nov 2017, pp. 1–7.
[9] K. R. Brown, J. Kim, and C. Monroe, “Co-designing a scalable quantum
computer with trapped atomic ions,” npj Quantum Information, vol. 2,
p. 16034, 2016.
[10] H. Corrigan-Gibbs, D. J. Wu, and D. Boneh, “Quantum operating
systems,” in Proceedings of the 16th Workshop on Hot Topics in
Operating Systems. ACM, 2017, pp. 76–81.
[11] S. J. Devitt, “Performing quantum computing experiments in the
cloud,” Phys. Rev. A, vol. 94, p. 032329, Sep 2016. [Online]. Available:
https://link.aps.org/doi/10.1103/PhysRevA.94.032329
[12] K. A. Britt and T. S. Humble, “High-performance computing with
quantum processing units,” ACM Journal on Emerging Technologies in
Computing Systems (JETC), vol. 13, no. 3, p. 39, 2017.
[13] ——, “Instruction set architectures for quantum processing units,” in
High Performance Computing, J. M. Kunkel, R. Yokota, M. Taufer, and
J. Shalf, Eds. Cham: Springer International Publishing, 2017, pp. 98–
105.
[14] K. Temme, S. Bravyi, and J. M. Gambetta, “Error mitigation for
short-depth quantum circuits,” Phys. Rev. Lett., vol. 119, p. 180509, Nov
2017. [Online]. Available: https://link.aps.org/doi/10.1103/PhysRevLett.
119.180509
[15] A. Peruzzo, J. McClean, P. Shadbolt, M.-H. Yung, X.-Q. Zhou, P. J.
Love, A. Aspuru-Guzik, and J. L. OBrien, “A variational eigenvalue
solver on a photonic quantum processor,” Nat Commun, vol. 5, Jul
2014. [Online]. Available: http://dx.doi.org/10.1038/ncomms5213
[16] J. R. McClean, J. Romero, R. Babbush, and A. Aspuru-Guzik, “The
theory of variational hybrid quantum-classical algorithms,” New Journal
of Physics, vol. 18, no. 2, p. 023023, 2016.
[17] Y. Li and S. C. Benjamin, “Efficient variational quantum simulator
incorporating active error minimization,” Phys. Rev. X, vol. 7, p.
021050, Jun 2017. [Online]. Available: https://link.aps.org/doi/10.1103/
PhysRevX.7.021050
[18] Y. Shen, X. Zhang, S. Zhang, J.-N. Zhang, M.-H. Yung, and K. Kim,
“Quantum implementation of the unitary coupled cluster for simulating
molecular electronic structure,” Phys. Rev. A, vol. 95, p. 020501, Feb
2017. [Online]. Available: https://link.aps.org/doi/10.1103/PhysRevA.
95.020501
[19] K. Michielsen, M. Nocon, D. Willsch, F. Jin, T. Lippert, and
H. De Raedt, “Benchmarking gate-based quantum computers,” Com-
puter Physics Communications, vol. 220, pp. 44–55, 2017.
INTERNATIONAL CONFERENCE ON REBOOTING COMPUTING, MAY 2018 9
[20] A. S. Green, P. L. Lumsdaine, N. J. Ross, P. Selinger, and
B. Valiron, “Quipper: A scalable quantum programming language,” in
Proceedings of the 34th ACM SIGPLAN Conference on Programming
Language Design and Implementation, ser. PLDI ’13. New York,
NY, USA: ACM, 2013, pp. 333–342. [Online]. Available: http:
//doi.acm.org/10.1145/2491956.2462177
[21] D. S. Steiger, T. Ha¨ner, and M. Troyer, “ProjectQ: an open
source software framework for quantum computing,” Quantum,
vol. 2, p. 49, Jan. 2018. [Online]. Available: https://doi.org/10.22331/
q-2018-01-31-49
[22] D. Wecker and K. M. Svore, LIQUID: A Software Design Architecture
and Domain-Specific Language for Quantum Computing, 2014, http:
//arxiv.org/pdf/1402.4467v1.pdf.
[23] K. Svore, A. Geller, M. Troyer, J. Azariah, C. Granade, B. Heim,
V. Kliuchnikov, M. Mykhailova, A. Paz, and M. Roetteler, “Q#: Enabling
scalable quantum computing and development with a high-level dsl,” in
Proceedings of the Real World Domain Specific Languages Workshop
2018, ser. RWDSL2018. New York, NY, USA: ACM, 2018, pp. 7:1–
7:10. [Online]. Available: http://doi.acm.org/10.1145/3183895.3183901
[24] “IBM builds its most powerful universal quantum com-
puting processors.” [Online]. Available: https://phys.org/news/
2017-05-ibm-powerful-universal-quantum-processors.html
[25] J. S. Otterbach, R. Manenti, N. Alidoust, A. Bestwick, M. Block,
B. Bloom, S. Caldwell, N. Didier, E. Schuyler Fried, S. Hong, P. Kar-
alekas, C. B. Osborn, A. Papageorge, E. C. Peterson, G. Prawiroatmodjo,
N. Rubin, C. A. Ryan, D. Scarabelli, M. Scheer, E. A. Sete, P. Sivarajah,
R. S. Smith, A. Staley, N. Tezak, W. J. Zeng, A. Hudson, B. R. Johnson,
M. Reagor, M. P. da Silva, and C. Rigetti, “Unsupervised Machine
Learning on a Hybrid Quantum Computer,” ArXiv e-prints, Dec. 2017.
[26] R. S. Smith, M. J. Curtis, and W. J. Zeng, “A Practical Quantum
Instruction Set Architecture,” ArXiv e-prints, Aug. 2016.
",158378844,"{'doi': None, 'oai': 'oai:arXiv.org:1805.09279'}",Hybrid Programming for Near-term Quantum Computing Systems,"{'code': 'en', 'name': 'English'}",2018-05-23T00:00:00+00:00,,[],['http://arxiv.org/abs/1805.09279'],,2018,"[{'type': 'download', 'url': 'http://arxiv.org/abs/1805.09279'}, {'type': 'display', 'url': 'https://core.ac.uk/outputs/158378844'}, {'type': 'similar', 'url': 'https://core.ac.uk/display/158378844?source=1&algorithmId=15&similarToDoc=&similarToDocKey=URL&recSetID=5b01a362-7b77-4901-9634-1318425f138a&position=7&recommendation_type=same_repo&otherRecs=186268113,162257170,186276408,229121698,343940970,154981140,158378844,157740116,189597082,153379796'}]","Recent computations involving quantum processing units (QPUs) have
demonstrated a series of challenges inherent to hybrid classical-quantum
programming, compilation, execution, and verification and validation. Despite
considerable progress, system-level noise, limited low-level instructions sets,
remote access models, and an overall lack of portability and classical
integration presents near-term programming challenges that must be overcome in
order to enable reliable scientific quantum computing and support robust
hardware benchmarking. In this work, we draw on our experience in programming
QPUs to identify common concerns and challenges, and detail best practices for
mitigating these challenge within the current hybrid classical-quantum
computing paradigm. Following this discussion, we introduce the XACC quantum
compilation and execution framework as a hardware and language agnostic
solution that addresses many of these hybrid programming challenges. XACC
supports extensible methodologies for managing a variety of programming,
compilation, and execution concerns across the increasingly diverse set of
QPUs. We use recent nuclear physics simulations to illustrate how the framework
mitigates programming, compilation, and execution challenges and manages the
complex workflow present in QPU-enhanced scientific applications. Finally, we
codify the resulting hybrid scientific computing workflow in order to identify
key areas requiring future improvement","['text', 'Quantum Physics']",disabled
,"[{'name': 'Venturelli, Davide'}]",[],2019-03-25T11:05:34+00:00,"{'name': 'NASA Technical Reports Server', 'url': 'https://api.core.ac.uk/v3/data-providers/151'}",,slides,,https://core.ac.uk/download/pdf/189597082.pdf,"Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
 Quantum Approximate Optimization Algorithm: 
review and status
 The «Quantum Alternating Operator Ansatz»
 Mixing Operators
 Examples
 Compiling and Executing
 The gate synthesis problem
 Review of compilation methods
 Compiling framework in nearest-neighbor 
architectures 
 Optimizing Variational Quantum Algorithms Using 
Pontryagin’s Minimum Principle Z. Yang, A. Rahmani, A. 
Shabani, H. Neven, and C. Chamon Phys. Rev. X 7, 021027 (2017)
 Quantum Approximate Optimization with Hard and Soft 
Constraints. Hadfield, S., Wang, Z., Rieffel, E. G., O'Gorman, B., 
Venturelli, D., & Biswas, R. (2017, November). In Proceedings of the 
Second International Workshop on Post Moores Era 
Supercomputing (pp. 15-21). ACM.
 From the quantum approximate optimization algorithm to a 
quantum alternating operator Ansatz Hadfield, S, Z. Wang, B. 
O'Gorman, E. G. Rieffel, D. Venturelli, and R. Biswas. arXiv preprint 
arXiv:1709.03489 (2017).
 Compiling quantum circuits to realistic hardware 
architectures using temporal planners Venturelli, D., Do, M., 
Rieffel, E. and Frank, J., 2018. Quantum Science and Technology, 3(2), 
p.025004.
READING LIST
https://ntrs.nasa.gov/search.jsp?R=20190001370 2019-08-30T11:01:11+00:00Z
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
3. Prepare a QAOA state for some parameters
4. Measure the state in the computational value and compute the exp. value of C(z)
1. Design a binary optimization classical Hamiltonian (“phase separation”)
2. Design a unitary operator that can connect and allow jumps between different states (“mixing”)
5. Change the parameters if they are not proven optimal and repeat 3-4
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
1. UNDERSTANDING
a. Power/Supremacy: Fahri, Arrow (2016), Jiang (2017)
b. Parameter Setting: Yang (2017), Wang (2017)
2. PRACTICAL ASPECTS
a. Compilation: Venturelli (2017), Guerreschi (2017), Oddi (2018) 
b. Hybridization: Guerreschi (2016)
3. GENERALIZATIONS/APPLICATIONS
a. Combinatorial Optimization: Hadfield (2016)
b. Factoring: Anschuetz (2018)
c. Deep Learning: Verdon (2018)
4. EXPERIMENTS
a. Superconducting: Otterbach (2017)
b. Neutral Atoms: Pichler (2018)
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
1. UNDERSTANDING
a. Power/Supremacy: Fahri, Arrow (2016), Jiang (2017)
b. Parameter Setting: Yang (2017), Wang (2017)
2. PRACTICAL ASPECTS
a. Compilation: Venturelli (2017), Guerreschi (2017), Oddi (2018) 
b. Hybridization: Guerreschi (2016)
3. GENERALIZATIONS/APPLICATIONS
a. Combinatorial Optimization: Hadfield (2016)
b. Factoring: Anschuetz (2018)
c. Deep Learning: Verdon (2018)
4. EXPERIMENTS
a. Superconducting: Otterbach (2017)
b. Neutral Atoms: Pichler (2018)
Optimizing Variational Quantum Algorithms 
Using Pontryagin’s Minimum Principle
Zhi-Cheng Yang, Armin Rahmani, Alireza Shabani, Hartmut Neven, and Claudio 
Chamon Phys. Rev. X 7, 021027 – Published 18 May 2017
 QAOA is a Bang-Bang quantum control protocol
 Same «ansatz» (not params) is robust to noise/decoherence
 It seems that certain aspects of parameter settings are universal (to be verified)
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
1. UNDERSTANDING
a. Power/Supremacy: Fahri, Arrow (2016), Jiang (2017)
b. Parameter Setting: Yang (2017), Wang (2017)
2. PRACTICAL ASPECTS
a. Compilation: Venturelli (2017), Guerreschi (2017), Oddi (2018) 
b. Hybridization: Guerreschi (2016)
3. GENERALIZATIONS/APPLICATIONS
a. Combinatorial Optimization: Hadfield (2016)
b. Factoring: Anschuetz (2018)
c. Deep Learning: Verdon (2018)
4. EXPERIMENTS
a. Superconducting: Otterbach (2017)
b. Neutral Atoms: Pichler (2018)
This tutorial !
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
• Maximum Cut
• Max-SAT, Min-SAT, NAE-SAT
• Set Splitting
• MaxE3LIN2
• Max-ColorableSubgraph
• Graph Partitioning
• Maximum Bisection
• Max Vertex k-Cover
• MaxIndependentSet
• MaxClique
• MinVertexCover
• MaxSetPacking
• MinSetCover
• TSP
• SMS with various metrics and constraints
• …
Objective Function: Soft Constraints
Feasible States: Hard Constraints
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
Some unitary respecting:
• Preserve the feasible subspace
• Provide all-to-all nonzero 
transitions between all feasible 
states
• Non-necessarily time evolution 
of a local Hamiltonian
Some unitary respecting:
• Is diagonal in the 
computational basis
• The spectrum of HP 
encodes the objective 
function
Some initial state respecting:
• It is a superposition of several 
solutions in the feasible 
subspace
• It can be prepared efficiently
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
 Babbush (2017)
 Verstraete (2009)
 Wang (2009)
 Childs (2002)
 …
Xu,c=1
Node u is 
colored by c
Phase Separator (QUBO objective function)
Initial state:
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
Exp(iHring) is difficult to implement
Respects the 
Hamming Weight 
constraint
3-coloring 4-coloring
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
34
1
3
5
7
2
4
6
8
UM=[U1U3U5U7] [U2U4U6U8] [U1U3U5U7] [U2U4U6U8]…
This couples only distance 2;
has to be repeated k/2 times 
∏a∈parityExp(iXaXa+1+YaYa+1)
All these 2-qubit k2/2 gates need to be scheduled
Respects the 
Hamming Weight 
constraint
Exp(iHring) is difficult to implement
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
Xu,c=1
Node u is colored 
by c or uncolored 
(c=0)
Finding the largest induced subgraph colorable by k colors
XY
All these gates need to be scheduled
XY
x
x
x
x=
Still needs to be compiled to 2 qubit gates
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
In traveling salesman encoding
Xvj=1 if city v is visited as jth
(partitioned using edge coloring and parity  
≈(n-1)n2/4 mixers)
(needs to be repeated n(n-1)/2 times for all-to-all)
In single machine scheduling
Xjt=1 if job j starts at time t
(But if we add release dates then we need 
controls on the no-overlap constraint) 
26
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
Bitflip mixers
• Maximum Cut
• Max-SAT, Min-SAT, NAE-SAT
• Set Splitting
• MaxE3LIN2
…
Controlled Bitflip mixers
• MaxIndependentSet
• MaxClique
• MinVertexCover
• MaxSetPacking
• MinSetCover
…
XY mixers
• Max-ColorableSubgraph
• Graph Partitioning
• Maximum Bisection
• Max Vertex k-Cover
…
Controlled XY mixers
• Max-k-ColorableInducedSubgraph
• MinGraphColoring
• MinCliqueCover
...
Permutation mixers
• TSP
• SMS with various metrics and constraints
…
27
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
Barenco et al. (1995)
Kraus, Cirac (2001)
Vatan, Williams (2003)
Quantum Circuits can be composed by 
single and two-qubit gates of universal 
set*
CNOT, Ry(θ) and Rz(α)
Each single qubit gate can be 
decomposed by single qubit rotations.
U1= Rz(α) Ry(β) Rz(γ) eiφ
Each two qubit gate is reversible and it 
is representable by a Unitary Matrix.
RZ gates can be «virtually» compiled.
(McKay 2017 and refs)
* active research to natively support multi-qubit gates
Maximum number of elementary 1-qubit gates: 15
Maximum number of CNOTs: 3
Maximum depth assuming RY, RZ and simplifications: 11
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
Performance of algorithms in NISQ will 
depend on aspects such as gate fidelities, 
parallelization, idle time, crosstalks..
Different Metrics to optimize correlate to 
final performance:
• Total Quantum Factor
• Quantum Volume
• Number of Two-Qubit Gates
• Makespan
Guerreschi and Park (2018). Two-step approach to scheduling quantum 
circuits. arXiv preprint arXiv:1708.00023.
Khatri, Sumeet, et al. ""Quantum assisted quantum compiling."" arXiv
preprint arXiv:1807.00800 (2018).
Li, G., Ding, Y., & Xie, Y. (2018). Tackling the Qubit Mapping Problem for 
NISQ-Era Quantum Devices. arXiv preprint arXiv:1809.02573 (2018).
Oddi, Angelo, and Riccardo Rasconi. ""Greedy Randomized Search for 
Scalable Compilation of Quantum Circuits."" International Conference on 
the Integration of Constraint Programming, Artificial Intelligence, and 
Operations Research. Springer, Cham, (2018.
…
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
Interaction graph obtained from 
quadratic objective function (MAXCUT)
• Every edge is a gate that needs to be 
executed (in arbitrary order)
• The same graph has to be executed 
multiple times (p rounds).
• Every qubit has to complete all the gates of 
round p before being involved in p+1
Counts the edges in the cut
Defines the cut
∑iXi Mixes the two partitions
UPS=∏<jk>Exp(ibZjZk)
UM=∏jExp(igXj)
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
n6 n8
n1 n2 n3
n
4
n7
n5
q1
q5
q3
q4 q7
q6
Initial assignment
qi → ni
1 3
4 5
6 7
Interaction graph 
obtained from 
quadratic objective 
function (MAXCUT)
30
• Every edge is a gate that needs to be 
executed (in arbitrary order)
• The same graph has to be executed 
multiple times (p rounds).
• Every qubit has to complete all the 
gates of round p before being involved 
in p+1
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
1 3
4 5
q1
q5
q3
q4 q7
q6
Exp(iθZ1Z4)
Duration 2τ2+4τ1
CZCZ X X
X X
ZZ-Evolution Gate
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
q1
q5
q3
q4 q7
q6
SWAP  |Ψ〉 3 ↔ |0〉
CZ X CZ X CZ
XX Duration 3τ2+4τ1
=
From Unidirectional 
CNOTs to SWAP
1 3
4 5
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
SWAP+ZZ-Evolution Gate
Duration 3τ2+4τ1 (same as SWAP)
SWAPS can also be inserted 
as part of the UZZ 
interaction without the need 
to be sequential.
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
1 3
4 5
q1
q5
q3
q4 q7
q6
fast P-S (τ=3)
slow P-S (τ=4)
Swap (τ=2)
Benchmark presented at ICAPS17
Objective: finding the makespan-minimizing Gantt Schedule for p=1, p=2, N=8, N=21
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
1 3
4 5
q1
q5
q3
q4 q7
q6
Q14
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
1 3
4 5
q1
q5
q3
q4 q7
q6
Q14 Q13
1 3
4 5
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
1 3
4 5
q1
q5
q3
q4 q7
q6
Q14 Q13
1 3
4 5
1 3
4
5
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
1 3
4 5
q1
q5
q3
q4 q7
q6
Q14 Q13 Q15
1 3
4 5
1 3
4
5 3 1
4
5
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
1 3
4 5
q1
q5
q3
q4 q7
q6
Q14 Q13 Q15
1 3
4 5
1 3
4
5 3 1
4
5
All actions of round 1 are completed – qubit can be mixed.
Qubit 1 can start participating to round 2.
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
1 3
4 5
q1
q5
q3
q4 q7
q6
Q14 Q13 Q15 Q14Q13Q15
1 3
4 5
1 3
4
5
3 1
4
5 3 1
4
5 4 1
3
53 1
4
5
3 1
4
5
PS2
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
n6 n8
n1 n2 n3
n4
n7
n5
q1
q5
q4
q6
How to obtain these schedules efficiently?
P-S(3,7) is fast on n1, n4
P-S(3,7) is slow on n4, n6
q3
q7
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
Planning Domain Specification Language (PDDL)
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
LPG (Gerevini 2003): Local Search
SGPlan (Wah 2004): Subproblem planning decomposition
CPT (Vidal 2006): Partial-Order-Causal Link (POCL)
TFD (Eyerich 2009): Fast-Forward Search (FFS) + postprocessing
POPF (Coles 2010): POCL+FFS+Simple Temporal Network
(CPT is provably optimal but timing scales badly)
Plan quality relative comparison
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
https://ai.googleblog.com/2018/07/announcing-cirq-open-source-framework.html
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
Davide Venturelli – SC18 Tutorial Quantum Computing for Scientific Applications – November 12th 2018 (Dallas, TX)
",189597082,"{'doi': None, 'oai': 'oai:casi.ntrs.nasa.gov:20190001370'}",QAOA Tutorial Outline,,,,[],['http://hdl.handle.net/2060/20190001370'],,2018,"[{'type': 'download', 'url': 'https://core.ac.uk/download/pdf/189597082.pdf'}, {'type': 'reader', 'url': 'https://core.ac.uk/reader/189597082'}, {'type': 'thumbnail_m', 'url': 'https://core.ac.uk/image/189597082/medium'}, {'type': 'thumbnail_l', 'url': 'https://core.ac.uk/image/189597082/large'}, {'type': 'display', 'url': 'https://core.ac.uk/outputs/189597082'}, {'type': 'similar', 'url': 'https://core.ac.uk/display/189597082?source=1&algorithmId=15&similarToDoc=&similarToDocKey=URL&recSetID=5b01a362-7b77-4901-9634-1318425f138a&position=9&recommendation_type=same_repo&otherRecs=186268113,162257170,186276408,229121698,343940970,154981140,158378844,157740116,189597082,153379796'}]","In this tutorial we discuss the quantum alternating operator ansatz (QAOA), which is a variational algorithm that can be used for approximate optimization of combinatorial problems with soft and hard constraints.We go through the design of the quantum circuit and its actual implementation in real hardware, discussing compilation issues such as gate synthesis and scheduling of all the required gates and qubit-swapping overhead","['ARC-E-DAA-TN63009', 'International Conference for High Performance Computing, Networking, Storage, and Analysis SC18; Nov 11, 2018 - Nov 16, 2018; Dallas, TX; United States', 'Theoretical Mathematics', 'Computer Programming and Software']",disabled
,"[{'name': 'King, Brennan Michael'}]",[],2019-10-17T19:14:20+00:00,"{'name': ""Missouri University of Science and Technology (Missouri S&T): Scholars' Mine"", 'url': 'https://api.core.ac.uk/v3/data-providers/12679'}",,,,https://core.ac.uk/download/229121698.pdf,"Missouri S&T’s Peer to Peer 
Volume 2 Issue 1 Article 5 
May 2018 
The Viability of Quantum Computing 
Brennan Michael King 
Missouri University of Science and Technology 
Follow this and additional works at: https://scholarsmine.mst.edu/peer2peer 
 Part of the Computer and Systems Architecture Commons, and the Computer Sciences Commons 
Recommended Citation 
King, Brennan M.. 2018. ""The Viability of Quantum Computing."" Missouri S&T’s Peer to Peer 2, (1). 
https://scholarsmine.mst.edu/peer2peer/vol2/iss1/5 
This Article - Journal is brought to you for free and open access by Scholars' Mine. It has been accepted for 
inclusion in Missouri S&T’s Peer to Peer by an authorized administrator of Scholars' Mine. This work is protected by 
U. S. Copyright Law. Unauthorized use including reproduction for redistribution requires the permission of the 
copyright holder. For more information, please contact scholarsmine@mst.edu. 
 In the past few decades a digital revolution has ushered in a new era of innovation. 
Although classical computers have been dominating for the past few decades, a new form of 
computational technology is on the verge of arriving, quantum computing. Quantum computing 
refers to a new type of computer that, unlike a classical computer which operates on 1s or 0s 
(bits), can operate in a superposition of these states called qubits. This allows the quantum 
computer to exceed every capability of the classical computers currently available.  
Quantum computing is a major ongoing conversation in the field of computer engineering 
with national governments and even military agencies trying to fund research. Svore and 
Troyer’s article “The Quantum Future of Quantum Computing” (2016), provides an in-depth 
look at potential applications of quantum computing including economic, industrial, and 
academic uses. Biswas’ article “Quantum Computers: A Review Work” (2017) makes bold 
predictions indicating the first fully functioning quantum computer will arrive in the year 2030. 
Although the technology is still in its infancy, the future looks bright as prominent researchers in 
the field predict the first quantum computers to arrive in the next decade or two. If such a feat 
were to become a reality, the world would be affected on industrial, trade, and civilian levels. 
Quantum computing would allow for significantly faster data processing, quicker solving of 
current algorithms, and a myriad of applications in the medical, engineering, and defense 
industry.  
The purpose of this study is to explore quantum computing and whether it has potential to 
replace classical computing. One major problem in the computer industry encouraging the 
development of quantum computer technology is Moore’s law. Researchers define Moore’s law 
as the ability to double transistors in an integrated circuit every two years (Cumming, Furber, & 
Paul, 2014, 1). Because Moore’s law is merely an observation, and not a physical law, this 
1
King: Viability of Quantum Computing
Published by Scholars' Mine, 2018
doubling of transistors every two years cannot continue forever. As the limits of Moore’s law are 
reached, stagnation in the computer industry is inevitable. The rapid advancement of the past few 
decades will continue to slow as creating faster and more efficient technologies using current 
methods climbs in difficulty. With these problems becoming more prominent every year, the 
computer industry faces a unique challenge that it has not faced since the inception of transistors. 
Effectively, the industry is back at square one, and must create an entirely new approach or fester 
in an era without innovation. Taking these major issues into account, it is reasonable to state 
quantum computing will be a viable alternative to the classical computers of today.  
Research Design 
Research was conducted using a variety of science and technology databases to find relevant 
sources that pertained to the computer field. Specifically, I considered peer reviewed journal 
articles, as they provided the most reliable and up to date information. Additionally, these peer 
reviewed journal articles were from 2009 or later since this technology is a relatively new topic. 
The databases that I used to find these articles included IEEE Xplore, SCOPUS, ACM Digital 
Library, and Google Scholar. These databases all pertain to computer and electrical engineering 
and provided relevant results that strengthened my research paper. I searched these databases 
using terms such as quantum computing, applications of quantum computing, Moore’s law, and 
classical vs. quantum computing. Sources that pertained to the history of quantum computing or 
the physics of quantum mechanics were ignored. The sources found in these databases have 
provided sufficient information on the topic and allowed me to come to a conclusion on the 
viability of quantum computing. 
 
 
2
Missouri S&T’s Peer to Peer, Vol. 2, Iss. 1 [2018], Art. 5
https://scholarsmine.mst.edu/peer2peer/vol2/iss1/5
Overcoming the Limits of Moore’s Law 
In the past few decades the rapid progress in electronics has been nothing short of 
astonishing. While this unprecedented advancement changed the course of history, the end of 
this innovative era is near. Currently the computer and electronics industries face the hurdle 
known as Moore’s law. The economic and physical repercussions of Moore’s law are two major 
factors that constrict development. Researchers have noted that “this exponential growth in 
complexity cannot continue forever, and there is increasing evidence that, as transistor 
geometries shrink towards atomic scales, the limits to Moore’s law may be reached over the next 
decade or two” (Cumming, Furber, and Paul 2014, 1). Cumming and his team offer a description 
of Moore’s law that illustrates the limits of physics and what is possible using current methods. 
They go on to say that to deliver better performance and grow in a variety of new markets, a new 
approach must be developed. While these startling facts suggest a bleak future for computers and 
electronics, the Moore’s law hurdle can be conquered with new emerging technologies. This 
only further strengthens the argument for pursuing quantum computing.  
Cumming and his team’s assertion on Moore’s law is shared by Robison, another 
prominent researcher in the field. Robison indicates that “although the marginal cost of 
producing a single silicon chip has remained stable or decreased over time as the number of 
components per chip has exponentially increased, the cost of research and development and of 
manufacturing infrastructure has increased exponentially, in what has been dubbed Moore’s 
Second Law” (Robison 2012, 402). Robison’s research demonstrates that physical limits are not 
the only thing holding innovation back. Economic limits are just as important, and rising costs 
for development of technologies will also slow innovation. Robison (2012) further indicates that 
to progress past the age of silicon, new emerging technologies such as quantum or molecular 
3
King: Viability of Quantum Computing
Published by Scholars' Mine, 2018
computers must arrive. With the rising cost of development for microelectronics, it is easy to see 
that further progress will be limited. All research seems to indicate that quantum computing 
could be the breakthrough needed to overcome Moore’s law. While there are other technologies, 
such as molecular computing, quantum computing is the most attractive option as there has 
already been concrete research and prototypes developed.  
Quantum Computing versus Classical Computing 
As the era of classical computing begins to slow, viable alternatives must be examined to 
compare the advantages and disadvantages of the two. One of the main advantages quantum 
computing has is its exponential increase in processing power. Biswas indicates in his research 
that “the proposed quantum computer can exponentially speed-up the processing capabilities of 
the processors over that of the classical computing capabilities of the existing processors” 
(Biswas 2017, 1472). The significantly improved processing power of quantum computers 
allows it to process data at a much faster rate than even supercomputers currently available. 
Using this processing power to solve some of the best-known algorithms gives quantum 
computing a massive advantage over classical computers.  
Svore and Troyer (2016) note that quantum computers can solve a range of problems 
exponentially faster than even the most famous classic algorithms. This is because quantum 
computers can use quantum algorithms, which use superposition and are superior to classical 
methods in terms of speed and efficiency. These significantly faster quantum algorithms can 
solve many issues including database searching, finding periodic functions, solving linear 
systems, sampling from a distribution, and probability distribution (Svore and Troyer 2016). 
With improved processing power and algorithms, these proposed quantum computers can run 
simulations and calculations much faster. Use of calculations and simulations are vital to 
4
Missouri S&T’s Peer to Peer, Vol. 2, Iss. 1 [2018], Art. 5
https://scholarsmine.mst.edu/peer2peer/vol2/iss1/5
engineering and science fields, and quantum computing could fundamentally change how 
scientists analyze and manipulate data.  
Biswas and Svore and Troyer all highlight the advantages of quantum computing over 
classical; however, other prominent researchers in the field, such as Moller and Vuik, doubt that 
it could be a viable option. Moller and Vuik’s research illustrates that “a common challenge of 
most of today’s quantum devices is the need for extremely low operating temperatures near 
absolute zero, which suggests quantum computing as a cloud service as most promising business 
model to bring this technology to the end-users” (Moller and Vuik 2017, 2). The current need for 
extreme cooling solutions presents a unique challenge for the development of quantum 
computers that its classical counterpart has already solved.  
Moller and Vuik (2017) go on to say that the immense costs of development may 
discourage researchers from pursuing development if the costs outweigh the benefits. The high 
cost and unconventional cooling requirements may give classical computers an advantage here, 
but quantum computers are very much still early in their development and have room for 
improvement. Perhaps quantum computers will not be available for consumer use at first, but 
they could realistically be used in large data centers and still have immense benefits. As with any 
new emerging technology, the initial cost of development is high. However, continued 
development and research will drive the cost of production down as quantum computing 
becomes the norm. The immense improvements in processing and algorithms alone make it a 
worthwhile and viable alternative to the classical technologies of today.  
Applications and Viability of Quantum Computing 
When examining the applications of quantum computing, there are thousands of different 
applications that promise to improve over what the classical computer can do. Although there are 
5
King: Viability of Quantum Computing
Published by Scholars' Mine, 2018
lots of different uses for quantum computers ranging from medicine to artificial intelligence, 
researchers are mostly interested in its ability to decrypt data and simulate models. These 
applications are vital to science and could potentially revolutionize how data is analyzed. 
Computer scientists have noted that “this subroutine is at the core of Peter Shor’s seminal 
quantum algorithm for factoring large numbers, which is one among several quantum algorithms 
that would allow modestly sized quantum computers to outperform the largest classical 
supercomputers in solving the specific problems required for decrypting encoded information” 
(Ladd et al. 2009, 2). Because quantum computers can potentially decrypt much better than 
classical computers, governments and military agencies are pushing for development to use this 
power to hack into sensitive enemy information and learn more about securing important data. 
The attractive prospect of having unstoppable decrypting power has driven several countries to 
pursue quantum computing, effectively creating a new race-to-the-moon scenario.  
While decrypting is a major application of quantum computing, quantum simulation is 
another highly important application that could allow for discovery of new and previously 
unsuspected phenomena. Simulations can be run on classical computers; however, they are 
inaccurate and cannot compare to the simulations attainable with a quantum computer. Preskill 
(2012) highlights the importance of this application, saying quantum computers will be able to 
simulate highly entangled matter including antiferromagnets, superconductors, complex 
biomolecules, nuclear matter, and spacetime singularities. Using these powerful simulations, it is 
hoped new information regarding the universe can be uncovered (Preskill 2012). Such a 
proposition has the potential to validate or refute predictions made by theorists and allow for 
learning about the universe. The applications of quantum computing are highly enticing and only 
strengthen the need to pursue quantum computing. The payoff of researching this new 
6
Missouri S&T’s Peer to Peer, Vol. 2, Iss. 1 [2018], Art. 5
https://scholarsmine.mst.edu/peer2peer/vol2/iss1/5
technology could be huge and allow for a new generation of decrypting tools and simulation 
models, which in turn will allow for an expanded knowledge of the universe and its laws.  
Discussion 
“Technological progress has often faced seemingly fundamental barriers. When viewed 
from a new perspective, these barriers can be transformed into opportunities for innovation” 
(Morton et al. 2011, 345). This in depth look into the viability of quantum computing has 
revealed the need for a new computing technology that is able to deliver revolutionary 
performance and data processing to help advance the computing industry past the age of silicon. 
The impacts of such an achievement would undoubtedly be far reaching and would shape the 
computer engineering field for years to come. The design of quantum computers is a completely 
new approach that features a new architecture, newly designed components, and a major shift 
from the classical fundamentals currently available. The computer engineering field will have to 
start from square one and effectively relearn how to construct a computer. The way fundamentals 
of computing logic is taught in universities would also need to be reinvented to incorporate the 
quantum design. Others outside the computer engineering field would see noticeable effects as 
well. Quantum computing would affect the world on industrial, trade, and civilian levels by 
delivering exponentially faster performance. Breakthroughs in physics, advanced decryption and 
encryption techniques, and extreme simulation models would all become a reality with the 
development of quantum computers. Improved processing power would lead to a faster 
computer, which in turn would lead to faster devices such as phones, processors, and video 
cards. These devices are crucial and are depended on every day.  
While the impact of quantum computing would be far reaching, it is not without its 
limitations. The initial cost of production would be quite high considering this is a brand-new 
7
King: Viability of Quantum Computing
Published by Scholars' Mine, 2018
technology. This should not be a major issue considering major military agencies and countries 
are already pursuing this technology and the price of development will decrease over time. The 
other major limitation is the cooling issue. Currently quantum computers can only operate in 
subzero conditions. While this could be a roadblock for consumer production, architecture and 
cooling optimizations could be developed in the future. Nevertheless, these widespread impacts 
present the importance of developing such a quantum computer and demonstrate the need for 
further research and development of this exciting technology.  
 
 
 
 
 
 
 
 
 
 
References 
David R.S. Cumming, Stephen B. Furber, Douglas J Paul, F.M. (2014). Beyond Moore’s Law,  
The Royal Society, 373(2012), 1471-2962. doi: 10.1098/rsta.2013.0376.  
8
Missouri S&T’s Peer to Peer, Vol. 2, Iss. 1 [2018], Art. 5
https://scholarsmine.mst.edu/peer2peer/vol2/iss1/5
John J. L. Morton, Dane r. McCamey, Mark A. Eriksson, Stephen A. Lyon, D. M. (2011). 
Embracing the Quantum Limit in Silicon Computing, Nature, Vol. 479(7373), 345-353. 
doi: 10.1038/nature10681 
John Preskill, D.M. (2012). Quantum Computing and The Entanglement Frontier, Institute for 
Quantum Information and Matter, Vol. 3, 19-22.  
K. M. Svore and M. Troyer, ""The Quantum Future of Computation,"" in Computer, vol. 49, no. 9, 
pp. 21-30, Sept. 2016. doi: 10.1109/MC.2016.293 
Möller, M., & Vuik, C. (2017). On the impact of quantum computing technology on future 
developments in high-performance scientific computing. Ethics and Information 
Technology, 1-17. doi:10.1007/s10676-017-9438-0 
R. Aaron Robison, D.M. (2012). Moore’s Law: Predictor and Driver of the Silicon Era, World 
Neurosurgery, Vol. 78(5), 399-403.  
Siddhartha Sankar Biswas, F.M. (2017). Quantum computers: A Review Work, Advances in 
Computational Sciences and Technology, 10(5), 1471-1478.  
Thaddeus D Ladd, Fedor Jelezko, Raymond Laflamme, Yasunobu Nakamura, Christopher 
Monroe, Jeremy L. O'Brien, D. M. (2010). Quantum Computing, Nature, 45-53. doi: 
10.1038/nature08812   
 
 
 
9
King: Viability of Quantum Computing
Published by Scholars' Mine, 2018
",229121698,"{'doi': None, 'oai': 'oai:scholarsmine.mst.edu:peer2peer-1032'}",The Viability of Quantum Computing,"{'code': 'en', 'name': 'English'}",2018-05-04T17:54:19+00:00,Scholars\u27 Mine,[],['https://scholarsmine.mst.edu/cgi/viewcontent.cgi?article=1032&context=peer2peer'],,2018,"[{'type': 'download', 'url': 'https://core.ac.uk/download/229121698.pdf'}, {'type': 'reader', 'url': 'https://core.ac.uk/reader/229121698'}, {'type': 'thumbnail_m', 'url': 'https://core.ac.uk/image/229121698/medium'}, {'type': 'thumbnail_l', 'url': 'https://core.ac.uk/image/229121698/large'}, {'type': 'display', 'url': 'https://core.ac.uk/outputs/229121698'}, {'type': 'similar', 'url': 'https://core.ac.uk/display/229121698?source=1&algorithmId=15&similarToDoc=&similarToDocKey=URL&recSetID=5b01a362-7b77-4901-9634-1318425f138a&position=4&recommendation_type=same_repo&otherRecs=186268113,162257170,186276408,229121698,343940970,154981140,158378844,157740116,189597082,153379796'}]","Quantum computing is an upcoming computational technology that could be the key to advancing the field and ushering in a new era of innovation. In this paper examines the viability of quantum computing extensively using only highly credible peer-reviewed articles from the last few years. These peer-reviewed articles will provide relevant facts and data from prominent researchers in the field of computer engineering. A growing problem in the field of electronics and computers is the concept of Moore’s law. Moore’s law refers to the doubling of transistors every two years in integrated circuits. Recent research has suggested that electronics may soon reach the limits of Moore’s law. With this looming threat on the horizon, it is plausible that quantum computers will be a viable alternative to the classical computer of today. With a constant demand for faster and more advanced technologies, the problem of Moore’s law holds great importance. Within the next few decades, this issue must be addressed, or the computer industry could face stagnation in the development of new products such as processors and video cards","['text', 'computing', 'quantum', 'moore\\u27s law', 'technology', 'Computer and Systems Architecture', 'Computer Sciences']",disabled
,"[{'name': 'LEWIS ADAM'}, {'name': 'FERIGATO CARLO'}, {'name': 'TRAVAGNIN MARTINO'}, {'name': 'FLORESCU ELISABETA'}]",[],2019-01-06T06:54:34+00:00,"{'name': 'JRC Publications Repository', 'url': 'https://api.core.ac.uk/v3/data-providers/961'}",,,10.2760/737170,https://core.ac.uk/download/162257170.pdf,"  
 
 
 
THE IMPACT OF  
QUANTUM TECHNOLOGIES 
ON THE EU’S FUTURE POLICIES 
 
                 Part 3 Perspectives for Quantum Computing 
 
  Lewis, A M, Ferigato, C, Travagnin, M and Florescu, E  
 
 
 
 
 
 
 
 
 2018 
EUR 29402 EN 
2 
 
 
 
 
 
 3 
 
This publication is a Science for Policy report by the Joint Research Centre (JRC), the European Commission’s science and 
knowledge service. It aims to provide evidence-based scientific support to the European policymaking process. The scientific 
output expressed does not imply a policy position of the European Commission. Neither the European Commission nor any 
person acting on behalf of the Commission is responsible for the use which might be made of this publication. 
 
Contact information  
Name: Adam Lewis 
Address: TP 723 Centro Comune di Ricerca, Via E. Fermi 2749, 21027 Ispra (VA), ITALY 
Email: Adam.Lewis@ec.europa.eu 
 
 
JRC Science Hub 
https://ec.europa.eu/jrc 
 
 
JRC110412 
 
 
EUR 29402 EN 
 
PDF ISBN 978-92-79-96730-6 ISSN 1831-9424 doi:10.2760/737170 
 
Ispra, Italy: European Commission, 2018 
 
© European Union, 2018 
 
Reproduction is authorised provided the source is acknowledged 
 
How to cite: Lewis, A. M., Ferigato, C., Travagnin, M and Florescu, E;  The Impact of Quantum Technologies on the EU’s Future 
Policies: Part 3 Quantum Computing; EUR 29402 EN, doi:10.2760/737170 
 
All images © European Union 2018 
 
Title The Impact of Quantum Technologies on the EU’s Future Policies: Part 3 Perspectives for Quantum Computing 
 
Abstract 
 
This report describes a survey of opinions in relevant technology communities regarding the best options for 
research and development of quantum computing, the likely impact on various sectors, and the expected 
timescales. The survey is intended to contribute to the preparatory discussions for the quantum technology Future 
and Emerging Technology (FET) Flagship, planned for 2020-30. The overall view of the participants on the 
technological perspectives for quantum computing is positive and it is seen as likely to be benign. 
 
 4 
 
Table of contents 
Acknowledgements ......................................................................................................... 6 
Executive summary ........................................................................................................ 7 
1 Introduction ........................................................................................................... 10 
2 Background on quantum computing .......................................................................... 11 
2.1 Algorithms ................................................................................................... 12 
2.2 Models for quantum computing ....................................................................... 13 
2.3 Hardware platforms ....................................................................................... 14 
3 Real-time Delphi study ............................................................................................ 17 
3.1 Methodology ................................................................................................. 17 
3.2 Overview of questions ................................................................................... 18 
3.3 Question-by-question analysis ........................................................................ 20 
Question #1 Participant’s self-assessment ......................................................... 20 
Question #2 Technical aspects, drivers .............................................................. 23 
Question #3 Technical aspects, IT applications ................................................... 31 
Question #4 Technical aspects, scientific and engineering applications .................. 37 
Question #5 Social aspects .............................................................................. 43 
Question #6 Economic aspects ......................................................................... 50 
Question #7 European Public Funding I ............................................................. 57 
Question #8 European Public Funding II ............................................................ 65 
Question #9 External funding ........................................................................... 70 
Question #10 Quantum computing software and hardware .................................. 77 
Question #11 Quantum computation’s future place ............................................. 82 
Question #12 Quantum computing physical platforms ......................................... 88 
Question #13 European Strengths .................................................................... 94 
Question #14 Education .................................................................................. 98 
Question #15 Status and evolution ................................................................. 107 
Question #16 Final comments ........................................................................ 115 
4 Conclusions ......................................................................................................... 117 
Appendix A. The Real-time Delphi questionnaire ............................................................ 118 
Appendix B. Snapshot review of the responses .............................................................. 129 
References ................................................................................................................ 145 
List of abbreviations and definitions .............................................................................. 148 
List of Figures ..................................................................................................... 149 
List of tables ....................................................................................................... 151 
  
 5 
 
 6 
Acknowledgements 
We wish to thank the delegates who attended the workshop (held on 24th November 
2016, in Brussels) discussing the most important aspects relevant to the perspectives of 
quantum computing to be addressed by this study, as well as to all the participants in 
the Real Time Delphi exercise and the reviewers. We are happy to thank by name our 
European Commission colleagues who attended: Fabiana Scapolo and Laurent Bontoux 
of the JRC and Olmo Nieto Silleras of DG CNECT. We also wish to thank Meret Kraemer, 
who contributed to the early stage preparations, and Domenico Costantini, emeritus 
professor of the University of Bologna, for helpful advice on the statistics and data 
presentation.  
 
This study was funded by the JRC’s institutional budget as part of work package 3792, 
project 244.  
 
 
   
 
 7 
Executive summary 
This report details a policy foresight study of the emerging field of quantum computing, 
based on an online survey of the expert community. Altogether, 131 people participated 
in the survey, out of which over 100 rated themselves as having “Very High” or “High” 
level of expertise in the field of quantum computing.   
The study is intended to contribute to preparations for the planned Quantum Technology 
Future and Emerging Technology (FET) flagship, planned for 2020-30, within which 
Quantum computing has been proposed as a domain. It is also intended to inform other 
policy areas which could be affected. 
Quantum computing is an emerging new and radically different information technology. 
Its advocates foresee it as a future large industry, with a potential impact of a similar 
scale to conventional IT and of key importance for European Union policy for the digital 
single market and for industry and growth. Sceptics counter that a host of scientific and 
technological questions remain unresolved, and that quantum computing will only be of 
importance in the very long term or never.  
This study sought to gather stakeholder opinion in relevant technology communities, in 
order to improve understanding regarding the best options for research and 
development of quantum computing, the likely impact on various sectors and the 
expected timescales. Most of the people who chose to respond to our invitation are 
working directly in the field, members of a scientific community which believes in the 
value of its work and is eager to express its enthusiasm for its subject, and how and why 
it should be supported. Although they do have an interest in promoting the technology, 
such experts are the only people who are sufficiently knowledgeable to have well-
justified opinions.   
 
This is part 3 of the report of a wider study of quantum technology. Part 1 concerns 
quantum technology for time and part 2, quantum communications. 
 
Key conclusions  
The overall view of the participants on the technological perspectives for quantum 
computing is positive. There is also a strong consensus that social and economic effects 
of quantum computing are likely to be benign, with benefits outweighing risks. There is 
concern that Europe might fall behind international competition in the field. These views 
support the plan for quantum computing to be one of the domains within the FET 
flagship.  
The view of the respondents is that it is premature to push quantum computing towards 
the product development phase, since it is still unclear which approaches show the most 
promise. Quantum computation and, to a lesser extent, quantum simulation, differ in 
this respect from the other domains: quantum communication and quantum sensors and 
metrology. Novel paradigms for quantum computing are expected to emerge from basic 
research. 
The clear preference among the respondents for an investment in quantum computing at 
the basic research and lower technology-readiness levels is in contradiction with the aim 
of the flagship, which is a focused development effort, aimed at more rapid application. 
 
 
 
 
 8 
Main findings  
The degree of promise of the applications of quantum computing was as follows:  
quantum simulation and chemistry; materials science and optimization (very promising); 
database search, cryptanalysis, machine learning and pattern recognition (rather 
promising); cloud safety, aerospace, fluid dynamics and economics and finance 
(somewhat promising); exoplanetary research, smart city simulation and software 
validation (less promising).  
Despite the belief that quantum computing could compromise existing cryptographic 
systems on this time scale, there was a strong consensus among respondents that 
quantum computing is likely to be both beneficial and safe, with only light regulation 
needed. The most benefit is seen for basic knowledge and applied science, with benefits 
also for health, security, education and training.  
Remarkably, a majority thought quantum computing likely to have an economic impact 
in future as great as, or even greater than, conventional IT has had. On the other hand, 
there was also a majority for the idea that quantum computing would, in future, be only 
one among a number of coexisting computational methods of similar importance. Some 
thought it likely to lead to concentration of the sector, but more disagreed.  
Quantum computing is not seen as a job-destroying technology; the main effect on 
employment will likely be creating new jobs. There is optimism about the possibility of a 
new generation of quantum programmers arising. 
The majority view is that quantum computing will be feasible for certain applications in 
10-15 years and, even for the ambitious application, breaking current cryptographic 
protocols, in less than 20 years. Notably, as shown in Figure 1, there was a clear 
correlation between the expected timeframes and the deemed impact of the applications. 
Synergies are perceived with nanotechnology, electronics material science and 
engineering and, to a lesser extent, chemistry. 
  
 9 
 
 
 
Fig. 1 Deemed importance of quantum computing for various applications versus           
expected implementation time scale. 
 
Regarding the relationship between quantum hardware and software, the consensus was 
that their developments would reinforce each other. There is no consensus on the most 
promising hardware platform for quantum computing, with five major ones all thought 
credible, both intrinsically and with regard to Europe’s potential. Europe’s greatest 
strength in this field is believed to be in communications and interconnect, but strengths 
are also seen in other areas. There is no clear consensus about the utility of existing 
quantum algorithms, although most respondents were at least to a degree positive, and 
there was a consensus that a growing number of useful algorithms will be found.  
A small-scale quantum computer is thought likely to be of educational value for software 
developers and engineers. Presently, physicists are much more aware of quantum 
computing than scientists in general but the respondents felt that equal priority should 
nevertheless be given to engineers and computer scientists for training, with chemists 
somewhat lower priority. 
The highest priorities for funding from the European Union public institutions, according 
to the majority of respondents, should be basic research and enabling research, with 
financial instruments chosen accordingly. Among other sources of funding, national 
governments are most favoured, as they are seen as willing to accept these priorities. 
There was nevertheless quite some optimism about private industry being willing to do 
so too. 
%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
0 5 10 15 20 25 30
Im
p
ac
t
Year
Molecular simulations /
quantum chemistry
Material science
Optimization
Machine learning
Pattern recognition
High speed search of
large databases
Breaking current
cryptographic protocols
Economics and finance
Other fluid dynamics-
e.g. climate modelling
Aerospace
Increase safety of cloud
computing systems
Simulation of smart
cities
Software validation
Exoplanetary research
 10 
1 Introduction 
The aim of this report is to highlight some potential implications quantum computers 
may have for the policies of the European Union. The main motive is the plan for 
quantum computing to be included as a major theme within a proposed new EU Future 
and Emerging Technologies (FET) flagship [HLSC Final report, 2017]. Further, if a 
successful large-scale quantum computer is developed, there may be consequences for 
other areas of public policy including cybersecurity, the digital single market, health and 
industry. The potential threat to cryptography, including the cryptography used to 
protect commercial transactions on the internet, is a very serious concern. The 
application of quantum computing for search may become important in policy areas 
involving citizens’ records, including health. Possible applications in engineering, 
materials technology and chemistry may also have a high enough economic effect to be 
significant in policy terms.  
The potential of quantum computing is now attracting the largest IT companies, with 
Google and IBM investing in superconducting platforms and Microsoft in topological 
quantum computing. Quantum computing startups are also now appearing.  [Srivastava, 
Choi and Cook,2016] have published a survey of commercial investment in quantum 
computing, including the current market, research status and public perceptions, which it 
is planned to keep updated. 
 
Quantum computing is still at too early a stage of development for a substantial body of 
policy analysis work to have been conducted, which is a reason why this present study 
was undertaken. Some related policy issues are included in the [Quantum Manifesto, 
2016], a key document, widely endorsed by the quantum technology community, which 
advocated establishing the FET Flagship. In a similar vein is the more recently released 
[Quantum Software Manifesto, 2017]. Two other works giving overviews of the scientific 
issues, based on the opinions of respected researchers in the field, are: [QUROPE 
Roadmap, 2015 and [Aspuru-Guzik et al., 2015]. 
 
This present report is centred on a survey of a larger group of stakeholders’ views and is 
intended to be less strongly focused on purely scientific matters than the latter two 
reports. It uses the ""real-time Delphi method”, an online-questionnaire-based foresight 
method explained in section 3. We have included in section 2 some general remarks on 
quantum computing to make clear aspects that we consider important for the 
interpretation of the Delphi study. A computer can be seen from several different 
perspectives, which condition our understanding of the potential role of a quantum 
computer as well. The questions presented in the Delphi study are consequently divided 
into categories in section 3, according to different perspectives. Section 4 contains the 
conclusions that we were able to infer using this and other available information. 
 
 
This report is the third part of the final report of the JRC Quantum Technology Study, 
and accompanies reports on Quantum Technology for Time and on Quantum 
Communications. 
  
 11 
  
2 Background on quantum computing 
Quantum computing takes advantage of the quantum mechanical principle of 
superposition of states to perform computations in a special parallel way. With this 
technique, a very large improvement in computing speed can, in principle, be attained, 
as determined by the laws of physics.  
We will refer to any existing or potential member of this new family of computers, 
constructed by exploiting certain principles of quantum physics, as a quantum computer. 
When needed, explicit reference will be made to special computers like analogue 
computers and supercomputers (very large parallel computing machines). By classical 
computer, we will mean the digital computer as known today, which, from the 
perspective of its physical components, is the result of the progress in constructing 
switching circuits based on transistors.  
Although transistors are fabricated using solid-state physics knowledge informed by 
quantum mechanical principles, i.e. the theory of the electron band structure, the 
devices themselves can still be well-described by classical circuit theory and, in the case 
of digital devices, Boolean algebra. The behaviour of a quantum computer, however, is 
described using quantum principles: states, operators, superposition and entanglement.  
Quantum computing differs from classical computing at a very fundamental level. It is 
certainly not just an incremental improvement in hardware design, algorithm design, 
parallelisation or networks. The advent of quantum computing re-opens, as a matter of 
practical engineering, some basic computer science questions which have, for the most 
part, been considered only in academic circles. 
From the computing science perspective, the conventional computer is only one among 
many possible means of realizing the algorithms that are computable, both efficient and 
non-efficient. Problems also exist that are not solvable by any computer, even in 
principle. From the perspective of the software engineer, the classical computer is a 
combination of software applications and physical components controlled by an operating 
system. From the perspective of the communication and control engineer, the classical 
computer can be interpreted as an agent or a node in a net of communications that 
should guarantee some services, inviolability of data, correctness and reliability of the 
operations performed. These perspectives are also important for quantum computers. 
Even if a quantum computer is considered simply as a new type of computer, its 
relationship with current computers has to be analysed, and from all the perspectives 
mentioned above. The questions included in the Delphi study described in Section 3 were 
framed with this in mind. Questions 10 and 11, address the potential architectural 
problems. Question 15 addresses the development of quantum algorithms, while the 
potential need for a new generation of software engineers is covered in question 6 and 
question 14. 
Effective quantum computing brings not only a challenges related to the construction of 
the machines, but also requires new specific competence in software engineering that 
must consider the overall architecture of the computing machine and the theoretical 
limits of the algorithms for solving a problem. This is why a future scenario in which 
some kind of quantum co-processor, in analogy to present graphical co-processors, is 
considered in computer architectures exploiting both classical and quantum processors. 
For people looking from a practical point of view, whose main interest is in applications, 
technological developments are critical. Researchers are now striving to achieve 
quantum supremacy: carrying out a computation on a quantum computer which would 
be unfeasible on any classical one. From a research standpoint, achieving it even on 
restricted or artificial problem is significant. For real applications, quantum supremacy is 
still highly speculative. While acknowledging this, we nevertheless believe the range and 
distribution of the views we have received in the survey help to give some foresight. 
 12 
2.1 Algorithms 
Any computer, including a quantum computer, needs an algorithm to solve a given 
problem. Its realisation depends on the architecture of the computer. For classical 
computers, with standard architectures, the task of adapting the algorithm to the 
computer is now largely conventional and more or less automated. This is not true for 
quantum computers. An algorithm designed for a classical computer cannot be simply 
ported to quantum hardware to run at improved speed. Algorithms must be re-designed 
and the software engineer performing this job must consider specific problems related to 
the architecture of a quantum computer. 
Quantum algorithms generally begin with an initialization step in which an ensemble of 
qubits is put into a known state, such as all zeroes. A transformation is then applied to 
produce a superposition of states which encodes different candidate solutions. The qubits 
are then made to evolve in such a way that the part of the superposition that encodes 
the correct solution grows at the expense of the part that does not. The evolution is 
terminated when the correct solution is found, or found to high probability, and the state 
is read out. 
Problems which have been addressed in this way fall into two groups: order finding 
algorithms, to determine some global property of a function, such as a period or median, 
and search algorithms e.g. to find the result to a query [Stolze and Suter, 2008]. 
A full survey of quantum algorithms is beyond the scope of this report; we refer the 
reader to [Jordan] for an online state-of-the-art catalogue and [Montanaro, 2016] for a 
formal review article. The latter includes a table of quantum algorithms which have been 
implemented in hardware; it is reproduced and updated in Table 1 below. We stress that 
these are fundamental algorithms, not complete applications. 
 
                        Table 1 Implemented quantum algorithms  1            
Algorithm Technology Problem solved 
Shor Bulk optics Factorisation of 21 
Grover NMR Unstructured search, N=8 
Quantum annealing D-Wave 2X 
Ising model on a “Chimera” 
graph with 1097 vertices 
Harrrow-Hassidim-Lloyd 
Bulk optics, NMR, 
superconducting qubits 
2 × 2 system of linear 
equations 
 
Another class of problems for which quantum computers have been proposed is quantum 
simulation, in which the goal is to evaluate the amplitudes of all relevant quantum states 
of a system. It is much more ambitious than semi-classical models which take account of 
quantum behaviour by means of an approximation. For example, simulation of molecules 
is today carried out by methods such as molecular dynamics and the force field 
approach, in which atoms are treated as classical objects, except that certain parameter 
values are derived from quantum mechanical calculations on simple systems. A full 
quantum mechanical molecular simulation would entail considering all the possible 
combinations of all the atomic states. For all but the simplest molecules, this is a 
problem far too large for any classical computer to handle but it might, in principle, be 
treatable by a quantum computer. In quantum simulation, many of the limits given by 
the classical architecture, in which a quantum computer should be embedded, are not 
present. As an example, data is dynamically generated instead of being transferred. So, 
a legitimate question is whether the first real applications for quantum computers will 
come out from simulation, as was early suggested [Feynman, 1982]. This question is 
addressed in question 2 of section 3. 
 13 
Some important constraints on quantum algorithms are known. It has been shown that 
not all the known solutions of problems by classical algorithms can be converted into 
quantum algorithms with improvements in speed; an example can be the sorting of the 
elements of a set of numbers by direct comparison [Høyer, 2001], [Klauck, 2003]. 
Identification of problems where quantum computers offer no advantage is important in 
cryptography, as the basis of quantum-safe algorithms i.e. those which could not be 
broken by a quantum computer and could replace present algorithms in the future  
[ETSI, 2015]. 
Another order of problems comes from the transfer of data. At input, the time for 
preparing a quantum superposition of states-where a considerable amount of data is 
transferred from a classical memory device-can downgrade significantly the expected 
performance. At output, the final state of a computation is defined via a measurement 
operation which extracts a classical portion of a quantum state at a certain time. When 
more than one of such classical portions is needed, the computation must be repeated. 
So, the overall performances can be limited by the type of input and output required. An 
additional drawback is that the performance of a quantum processor is limited by the 
time the superposition of states is guaranteed. Hence, there are defined intervals in time 
in which the performances are boosted by the quantum effects. The combination of 
these two facts poses important problems to the designer of an algorithm since only 
specific algorithms or defined parts of them can be given as instructions to a quantum 
processor for a limited interval in time. A long list of instructions should be consequently 
split into several parts whose results are “classically” re-assembled after the 
computation. 
 
2.2 Models for quantum computing 
By model is meant here the overall concept and scheme by which computation is to be 
realised. Models for quantum computing can be split, roughly speaking and following the 
considerations in section 2.1 above, into three categories: machines for quantum 
simulation, machines for quantum annealing and machines for circuit quantum 
computing. 
A machine for quantum simulation is a well-controlled, well-understood quantum system 
whose states can be made to correspond to those of another quantum system whose 
behaviour is not known. For example, a quantum simulator for an application in 
chemistry might consist of a controllable solid-state system which can be configured to 
have equivalent quantum states to some molecule of interest.1 
To the second category, simulated annealing, belong the only quantum computers 
presently on the market: manufactured by D-Wave systems. An array of qubits, each of 
which interacts only with its nearest neighbours, is set up in a known state which is then 
steadily perturbed until it represents the problem of interest, while preserving some 
feature well-enough to allow the identification of a global minimum or maximum, with 
high probability.2 
Circuit quantum computing is the most ambitious of the three models. It aims to 
construct machines able to encode any computational problem by means of quantum 
                                           
(1) By abuse of analogy, computers for quantum simulation in this respect resemble the analogue computers 
of the fifties and sixties: an algorithm is coded in an electric circuit and, set the appropriate input values of 
voltage or current to the input wires, the output can be read (in real time) as the corresponding voltage or 
current on the output wires; very efficient, but limited by the need, for computing another algorithm, to re-
configure the circuit. In some cases, the circuit can be designed for solving a class of problems, like 
systems of differential equations or finding optimal solutions, given a set of constraints. 
(2) [Nishimori] gives a more complete and very readable explanation of quantum annealing.   
 14 
logic gates.3 Basic theoretical criteria for the types of gate which must be used and their 
properties are well-established [Feynman,1985], [DiVincenzo, 1995], [DiVicenzo, 2000]. 
Crucially these, in principle, allow fabrication of quantum integrated circuits. The most 
difficult practical challenge is that the quantum states in the gate circuits must remain 
coherent i.e. their phases must stay synchronized, during the calculation. 
Circuit quantum computing has been shown to be equivalent to a sub-class of quantum 
simulated annealing called quantum adiabatic computing, in which the system remains 
strictly in an eigenstate while it is perturbed [Aharonov et al., 2007],[Mizel et al., 2007]. 
The D-wave machines, however, do not fit into this category, and are more limited in the 
problems they can be set-up to solve. 
2.3 Hardware platforms 
A full description of all the hardware platforms under consideration for quantum 
computing is beyond the scope of this report but we briefly state here the major 
approaches. 
Trapped ions qubits: 
Quantum information is stored in the electronic states of an ion. Transitions occur 
between energy levels determined by orbital configuration, hyperfine structure, and 
possibly Zeeman splitting. An oscillating (Paul trap) or stationary (Penning trap) 
electromagnetic field confines each ion in a specific spatial position. Linear traps have 
been built holding ~10 ions and more than 200 in a 2D trap for quantum simulation. 
Laser pulses are used to cool the ions, initialize the qubits, perform logic operations, and 
measure the final state; entanglement is achieved by exploiting Coulomb interactions 
among the ions. Trapped-ion qubits are long-lived systems, identical to each other. Their 
initialization, manipulation, and read-out are highly reliable processes. Quantum 
algorithms have been run in systems composed of 5 fully interconnected qubits, and 
quantum simulations with as many as 53.  Research is focused on achieving faster gate 
switching times and fidelity as well as the number of qubits, the end goal being to 
accomplish all three together. In the quest for scalability, it has been demonstrated that 
initialization and control can be achieved by broadcasting microwave radiation, thus 
dispensing with the multiple carefully aligned laser beams. To limit crosstalk noise, 
large-scale systems are to be based on multiple separated trapping regions, with 
information transported between them by physically moving the qubits or by coupling 
them to photons travelling between the traps.  
 
Superconducting qubits: 
A superconducting loop with a Josephson junction, i.e. a very short non-superconducting 
break, allowing interference effects between quantum states on either side, constitutes a 
two-level energy system. Depending on design parameters, it can store quantum 
information in charge, phase, or flux states, or in several hybrid configurations. 
Superconducting qubits are fabricated with conventional integrated circuit technology, 
have typical dimensions of ~µm, are kept refrigerated to well below 100mK, and can be 
controlled with standard electronic instrumentation. Qubit coupling can be achieved in 
different ways, e.g. via photons confined in a transmission line or using microwave 
cavities. Entanglement among 72 qubits has been recently demonstrated (Google), and 
a quantum processor with 20 superconducting qubits is made available on-line by IBM. 
With respect to trapped ions, superconducting qubits have shorter coherence time, 
compensated for by faster quantum gates operations. They seem also more amenable to 
                                           
(3) Circuit quantum computers do not consist of the familiar AND, OR and NOT gates of classical digital logic 
but of reversible gates which have additional control lines e.g. CNOT, CSWAP and CCNOT [Fredkin and 
Toffoli, 1982]. Reversible gates are well understood and classical ones can be implemented without great 
difficulty. [Muthukrishnan, 1999] gives a helpful brief survey of the basic literature in quantum gate theory. 
 15 
large scale integrated systems, which simplifies the implementation of error correction 
codes, e.g. in a two-dimensional qubits array.     
 
Photonic qubits: 
Photonic states can be used to store quantum information e.g. in polarization or energy, 
and are remarkably robust against environmental disturbances. On the other hand, 
entangling photonic qubits to realize a quantum gate is a challenging task: a major 
breakthrough was the discovery that it can be achieved by using simple linear optical 
networks composed by elements such as mirrors, beam splitters, and phase shifters. The 
realization of a linear optics quantum gate requires auxiliary photons whose 
management represent a significant resource overhead. Conversely, scaling up the 
system by using e.g. silicon photonics is perceived as simpler than for matter-based 
qubits. Shor’s quantum factoring algorithm has been tested on an optical chip 
comprising 4 photonic qubits and integrated waveguides. The advancement of quantum 
computation based on linear optics strongly depends on the availability of enabling 
devices such as high-performance single photon emitters and detectors.   
 
Semiconductor qubits: 
A powerful motivation for embodying qubits in semiconductors is to leverage the huge 
know-how and the potential of the existing manufacturing technologies. Semiconductor-
based solutions are less mature with respect to the ones already examined, and several 
approaches are still being investigated: they comprise different materials, both bulk and 
nanostructured, with quantum information stored in nuclear spin, electronic spin, or 
other quantum states, and controlled electrically, magnetically, or optically. One of the 
possible routes is to use nano-scale silicon “quantum dots” within which electrons are so 
tightly confined that they start behaving as if they belonged to individual atoms, thus 
occupying discrete energy levels. The spin of an electron stored in a quantum dot 
couples weakly to the environment, thus constituting a promising qubit, which can be 
controlled by the local application of an oscillating magnetic field. Electrical pulses are 
then employed to couple two adjacent qubits, in order to realize a Controlled-NOT 
quantum gate. The system is scalable, compatible with current microelectronic features, 
and fabricated with standard CMOS process: it thus offers concrete prospects of realizing 
large scale quantum processors.  
 
Topological qubits: 
In a topological qubit, quantum information is stored in the collective behaviour that an 
ensemble of particles may exhibit under specific and carefully controlled conditions. A 
classic example is the fractional quantum Hall effect experienced by electrons in a two 
dimensional gallium arsenide heterostructure: at low temperature and under a strong 
magnetic field, the electrons react to external perturbations by rearranging themselves 
via long-range interactions that keep their overall energy unchanged. In principle, such 
phenomena allow implementing a qubit immune to environmental sources of quantum 
decoherence, leading to a fault-tolerant processor that doesn’t require burdensome 
quantum error correction. Topological quasi-particles suitable for information processing, 
called non-Abelian anyons, such as Majorana fermions, have been experimentally 
demonstrated, e.g. in superconducting nanowires: work is now in progress to improve 
the qubit quality in order to allow a reliable control of the stored information. Quantum 
computations will then be made by manipulating the world lines of the quasi particles. 
embodying the topological states, according to the mathematical formalism known as 
braiding. 
 
 16 
  
 17 
3 Real-time Delphi study 
3.1 Methodology 
The need to address the quantum computing topic differently from other aspects of 
quantum technology was recognized early in the study, since quantum computing is at a 
far earlier stage of technology readiness than quantum communication, timing, sensing 
and imaging technology.  
A formal foresight method was considered necessary.4  Standard methods exist 
[Forlearn] based, broadly, on one of two approaches: 
1) Define a range of possible scenarios 
2) Construct a vision or roadmap 
It was clear from the technology readiness considerations that the first of these fitted 
the subject better. 5 
Standard foresight methods may be further divided into those based on focused 
workshops and those based on surveys. Delphi surveys are a very well-established 
method, with a history of over 50 years of use. Traditional Delphi surveys are conducted 
by asking the participants questions in two or more rounds. They thus combine the 
advantage of a survey and workshop method, by allowing a wider number of participants 
than can easily participate in workshops, while including an element of dialogue. The 
Real-time Delphi (RTD) method is a “roundless” Delphi in which the results, both 
quantitative and qualitative, are updated in “real-time”, as responses are submitted. The 
participants are allowed to revisit the questionnaire and re-consider their answers in 
response to the answers of others, at any time during the period the survey is open. A 
consensus may be reached at the end, even if does not exist at the start. 
The RTD method was selected because: 
1) RTD is particularly well-recognized as a tool for technology foresight, and the 
study falls clearly into this category. 
2) The expert community was known to be quite large and geographically dispersed. 
3) It consists almost exclusively of people with very high information technology 
skills, who are completely comfortable with using on-line methods. 
4) The relevant skills and tools were available in-house.  
 
The Global Futures Intelligence System (GFIS) platform from independent think tank 
“The Millennium Project”, was used for the RTD, on grounds of familiarity [Millennium]. 
No alternatives were considered because GFIS had been found satisfactory by JRC in 
previous projects.  
 
 
 
                                           
(4) Discussions for a foresight study in quantum computing began in October 2015 when the quantum study 
team sought help in-house from the JRC Foresight and Behavioural Insights Unit, which had expertise in 
suitable methods. 
(5) A European roadmap for Quantum Information Processing and Communication does exist, produced by the 
QUROPE network [QUROPE Roadmap, 2015], but it addresses only the technology considerations, not the 
broader ones.  Moreover, the quantum computing section is divided into separate sections for the different 
hardware platforms so, in that respect, actually has the character of a range of scenarios. 
 
 18 
Process 
Beginning at the end of September 2016, two Calls for Expression of Interest were 
published on the QUROPE mail server explaining the RTD exercise and proposing a 
workshop to define the questions. A limited number of individuals known to the team 
were invited personally. 
A workshop with 21 attendees, 5 JRC staff members and 1 student observer was held, in 
which draft questions suggested by the JRC team were discussed, substantially revised 
and added to the questionnaire in real time, and then further revised and finalised in 
on-line discussions. Appendix A presents the entire questionnaire. 
An initial list of names for the target group was drafted, consisting of people known 
directly or indirectly by the team and people recommended by the workshop 
participants. An internet check was carried out on every person, except those already 
well-known to the team, consisting of an examination of research group or company 
webpages, curricula vitae and publications lists, as far as was available. 
A final list of 250 names for the target group was defined, with a reasonable 
representation of different fields of expertise, organisation types, locations, genders and 
career points. A real balance was deemed impractical, and not useful to aim for, given 
the uncertainty of who would respond.  
The RTD was launched at the end of March 2017 and left active until mid-May.  
Altogether, 182 people accessed the questionnaire, out of which 139 provided answers. 
More than 100 of those who responded rated themselves as having “Very High” or “High” 
level of expertise in the field of quantum computing. There was no automatic restriction 
to invitees and a few extra participants joined while the RTD was live, but care was 
exercised not to allow the group to grow in an uncontrolled fashion. In particular, when 
several people from the same organisation joined at their own initiative, we allowed only 
a limited number, choosing those had replied to most questions.  
 
3.2 Overview of questions 
The questions asked in this study cover four main perspectives from which a computer 
can be seen: 
 The technical problems are covered mainly by questions 2, 3, 4, 10, 11, 12, 15. 
  Problems related to society, economy and investments are treated by 
questions 4, 5, 6, 7, 8, 9, 13, 14. 
These two main groups can be further divided. The first group includes a software 
engineering perspective (question 10), the distinct roles played by classical and quantum 
algorithms (question 11), the potential hardware and physical components of a quantum 
computer (question 12), the software engineering and theoretical computer science 
aspects (question 15), while questions 2 and 3 address the potential improvement in 
current computer applications or fields of application.  
Question 4 concerns scientific and technical applications and belongs to both groups. 
The second group addresses applications from the perspective of more general societal 
aspects (questions 4 and 5). Moreover, question 5 deals explicitly with the potential 
distinct role in the main social aspects a quantum computer could play, in comparison 
with the role played today by a classical computer. The economic aspects and funding of 
research and development of a quantum computer are covered by questions 6, 7, 8 and 
9. Question 13 addresses the distinct role potentially played by Europe with respect to 
the rest of the world in hypothetical technical fields useful for the development of 
quantum computers while question 14 investigates the potential consequences for 
education (mainly in the IT field). 
 19 
The complete list of the questions with sub-questions can be seen in the section 
“3.3 Question-by-question analysis” and in Appendix A. Following is a succinct list of the 
aspects addressed by each question: 
Question 1: Participant’s self-assessment--asks about their own expertise in the field of 
Quantum Computing and the area(s) they work in. 
Question 2: Main drivers--concerns reasons to believe in the future utility of quantum 
computing and the justification for publicly funding its development. 
Question 3: IT applications--looks at the subjects of question 2 from the perspective of 
the IT applications, and the timeframe for their realization. 
Question 4: Technical aspects, scientific and engineering applications--concerns some 
sectors of science and technology that could benefit from an improvement in efficiency of 
computation, and the expected timeframe. 
Question 5: Social aspects--deals with the consequences of an improvement in efficiency 
of computation to the society in general, with focus on potential new regulations. 
Question 6: Economic aspects--aims at exploring the consequences on the economy in 
general, and more specifically in the IT sector. 
Question 7: European public funding I--collects the experts’ opinions about the current 
state of the physical realization of a quantum computer, in respect of what should be 
publicly funded. 
Question 8: European public funding II--concerns the specific way for funding research 
and development of a quantum computer in relation to two envisaged phases of the FET 
flagship. 
Question 9: External funding--investigates about the possible funding complementary to 
the European public route. 
Question 10: Quantum computing software and hardware--enters into the possible 
relations between applications and physical components. 
Question 11: Quantum computation's future place--asks about the role the quantum 
computer, if realized, will have in the computational landscape.  
Question 12: Quantum computing physical platforms--asks about merits of the various 
hardware approaches being taken, and the European potential in each. 
Question 13: European strengths--asks whether European IT industry can have an 
advantage (both for algorithms and physical platforms). 
Question 14: Education--deals with the potential changes to the education--mainly of IT 
specialists and engineers--caused by the wide use of quantum computers. 
Question 15: Status and Evolution--addresses specifically the algorithms and aims at 
understanding the spectrum (very specialised to general purpose) of the algorithms 
efficiently executed by a quantum computer. 
Question 16: Open-ended—invited the participants to add other comments, suggestions, 
concerns, etc. related to European policy and strategy concerning quantum computing. 
  
 20 
3.3 Question-by-question analysis 
Question #1 Participant’s self-assessment 
Please indicate your level of expertise in the field of quantum computing and the area(s) 
you work in. 
Motive 
It was recognized that the target group needed to consist of people at different career 
points, as well as people with different fields of expertise, including experts in the 
possible applications as well as in quantum computing itself. We had intentionally invited 
people with different career profiles and it would be possible to use the information we 
had to answer the question ourselves, for each person who had replied. But it was 
thought necessary to check whether our perception of the participants agreed with their 
perception of themselves. 
It was also thought that it might be possible to analyse differences of views according to 
career profile. Any analysis of differences would have to be done a posteriori since we 
had no control over who would reply. By asking both questions it would be possible to 
detect differences of views in each dimension. We have not yet attempted to perform 
this deeper analysis.  
Results 
1.1 Level of expertise 
Very high – has successfully proposed projects and directed work 64 
High – has produced original work and/or contributed to advances 34 
Medium – has extensively studied the area and its scientific literature 21 
Low – has studies the area and read popular science articles 9 
No significant exposure to the area 2 
 
 
Fig. 1.1 Declared level of expertise  1 
 
64
34
21
9
2 1
0%
5%
10%
15%
20%
25%
30%
35%
40%
45%
50%
Very high High Medium Low No exposure Not declared
F
ra
c
ti
o
n
 o
f 
p
a
rt
ic
p
a
n
ts
Declared level of expertise
 21 
 
 
1.2 Field of expertise and location 
 
 
Fig. 1.2 Fields of expertise 2 
Note: the total is greater than the number of participants because some respondents declared expertise in 
more than one field. 
 
The “other” fields declared were mostly managerial in character: project coordination, 
consultancy, policy and technology management and commercialisation. Five 
participants declared expertise in: human and social aspects of IT, science 
communication, materials science, mathematics and quantum biology. Two declared, but 
did not specify, their other expertise. 
In conclusion, the participant group was diverse but had a strong preponderance of 
physicists and quantum information experts and physicists. This does mean that the 
views we received were mainly from the relevant scientific community, which can be 
expected to be positive about the value of its own work. 
As for geographical participation, the vast majority were from Europe (as had been 
intended). The following graph shows the number of participants by geographical 
regions, counting everyone who answered question 1-1 and also indicated their location.  
 
 
 
 
92 95
7
42
37
15
4
17
17
0%
10%
20%
30%
40%
50%
60%
70%
80%
Quantum
information
Physics Chemistry Engineering Computer
science
Applied
computer
science
Manufacturing Management Other
F
ra
c
ti
o
n
 o
f 
p
a
rt
ic
p
a
n
ts
 22 
 
Fig. 1.3 Geographical distribution3 
Note: Associated States refers to non-EU states which participate in Horizon 2020. 
 
  
90
7
22
6
2 1 1 2
0%
10%
20%
30%
40%
50%
60%
70%
80%
EU Associated States North America Asia Australasia Latin America Africa Undeclared
 23 
Question #2 Technical aspects, drivers 
Please assess the following drivers for large-scale manufacturing of quantum computers: 
Addressing optimization issues 
Increasing energy efficiency of computing 
Increasing processing speed in specific applications 
Having the ability to control quantum systems 
Simulating quantum systems 
Simulating classical complex systems 
Enhancing machine learning 
Attacking and defending data security 
Other (please specify in the textbox after ""Submit"") 
 
Sub-question 2.1: Main reasons. Which would be the main reasons for quantum 
computing to be useful? 
Please rate the potential drivers on a scale of 0 to 100 (from 0 = not important reason to 
100 = extremely important reason) 
 
Sub-question 2.2: Funding priorities. Which do you think would be the priorities for 
public funding support? Please drag the drivers to order them. 
 
Sub-question 2.3: Level of confidence. Please indicate your level of confidence in your 
own answers to the questions on ""Main reasons"" and ""Funding priorities"". 
(from 0=not confident at all to 100=extremely confident) 
 
Motive 
The usual advantage claimed for quantum computers over classical computers is 
increased speed due to intrinsic parallelisation, which is thought to be achievable for 
some but not all computational tasks. A quantum computer could carry out what are now 
feasible, but time-consuming, tasks much more quickly or carry out some tasks which 
are now unfeasible. Question 2 addresses the reasons why people might want to have 
such an advantage. 
Some also assert that quantum computers could achieve speeds which can be achieved 
by conventional large–scale computing more easily e.g. with less power. D-Wave 
systems already advertise this as an advantage of their machines. We wished to find out 
what the views were on the relative importance of different types of advantage, both in 
general and for funding priorities. 
 
Sub-question 2.1: Which would be the main reasons for quantum computing to 
be useful? 
 
The results are shown in Figure 2.1 and Table 2.1 below. 
 
The highest score is for simulation of quantum systems, reflecting the belief that it is 
likely to be the first application where quantum computers will show a clear advantage, 
given that it is an intractable problem for classical computers, as several participants 
commented. Also mentioned were commonalities between quantum simulation, control 
and machine learning. 
The other reasons for quantum computing to be useful which were cited were: 
understanding biological processes (e.g. protein folding and many-neuron connectivity), 
computational chemistry, foundations of quantum mechanics, fundamentals of 
computability, pharmaceuticals, materials, quantum internet, machine learning and  
 24 
 
Fig. 2.1 Main reasons for quantum computing to be useful4 
 |median   |mean      ⁞ weighted mean    + individual responses, stacked vertically 
 
 
 
 
 
Other
Attacking and defending 
data security
Enhancing machine 
learning
Simulating classical 
complex systems
Simulating quantum 
systems
Having the ability to 
control quantum 
systems
Increasing processing 
speed in specific 
applications
Increasing energy 
efficiency of computing
Addressing optimization 
issues
[0,20%) [20%,40%) [40%,60%) [60%,80%) [80%,100%]
Respondent's assessment of the importance of each driver
 25 
artificial intelligence in general. Although we had intended to address such specific 
applications only later in the questionnaire, participants started raising them here. Also 
mentioned were quantum sensing, communication and imaging, although the survey 
concerns only quantum computing; some other participants commented on this. 
For all the drivers except energy efficiency, the distributions are skewed to the high end, 
with medians exceeding means, and some answers where the participant rated the 
driver at 100%. There are only small differences between means and confidence-
weighted means, except for category of the “other” drivers, where some participants had 
made suggestions but had noted that they were less confident in them. We received 
several specific comments regarding the drivers, which are cited below. The participants 
did not strictly separate their suggestions for other drivers from their comments, and 
they are not separated here. 
Table 2.1 Main reasons for quantum computing to be useful 
 
Application No. of 
responses 
Mean Median IQR 
Addressing optimization issues 
 
121 72.4% 80% 35%pts. 
Increasing energy efficiency of 
computing 
117 36.8% 35% 40%pts. 
Increasing processing speed in 
specific applications 
120 78.3% 85% 30%pts. 
Having the ability to control 
quantum systems 
117 68.8% 80% 40%pts. 
Simulating quantum systems 
 
121 85.6% 90% 20%pts. 
Simulating classical complex 
systems 
116 59.3% 70% 50%pts. 
Enhancing machine learning 
 
116 61.3% 70% 30%pts. 
Attacking and defending data 
security 
118 63.5% 70% 40%pts. 
Other 23 65.7% 80%          - 
 
Notes on plots and statistics 
The plots show, for each driver, histograms on 20% point bins, with the mean (red bar), 
weighted mean (dotted red bar) and median( green bar) . Responses on the borderline 
between two bins are assigned to the higher bin, values of 100% are assigned to the 
[80%, 100%] bin.  
The individual responses, indicated by crosses, are shown to give a more complete 
picture of the distribution. They tend to be at multiples of 5 and 10%, rather than 
randomly distributed over the percentiles.  
Distributions are asymmetric and highly non-normal, as is typical of real-time Delphi 
studies. The responses are not independent, by the design of the method, so no 
confidence interval can be calculated. The median and the interquartile range are the 
most usually quoted statistics; the smaller the interquartile range the greater the degree 
of consensus.  For the “Other” responses, there are fewer data points, so the detailed 
statistics are less meaningful and only the median and mean are shown. 
  
Similar schemes are used in subsequent questions. 
 
 
 
 
 
 26 
Sub-question 2.1: Suggestions for other drivers and general comments 
Optimization 
1. “They may be useful for optimisation- but unclear if they can do well on their own 
(without accurate representation of the optimisation problem) and even if the 
optimisation can be sped up- initialisation to run the problem may be even harder 
than the optimisation problem.” 
2. “Optimization is more useful [than simulation]- but the speedups are typically 
more modest.” 
 
Energy Efficiency 
3. “Energy efficiency may become more relevant if the cooling issue can be resolved 
- robust QC at room temperature (not with current scheme- though).” 
 
Processing speed 
4. “Looking at the interests of commercial players- the overlap between quantum 
computers and high performance computing (increasing 'processing speed' of 
currently intractable problems) is the most significant.” 
5. “Unclear what specific applications processing speed could really be improved and 
whether speed is the actual issue - what about data and enabling access to a vast 
amount of data?” 
 
Quantum control 
6. “Quantum information processing can be very powerful for controlling and 
characterizing quantum systems and this is an important- and underappreciated 
application.”  
7. “Control and linked to that simulation of quantum systems may be most relevant 
for a QC- for obvious reasons.” 
 
Quantum simulation 
8. “The priority in quantum computing development efforts seems to be naturally 
returning to Feynman's original proposal of using simpler quantum information 
manipulation construction to simulate Hamiltonians of rather complex and exotic 
quantum systems. This is one of the most plausible directions that promise 
significant benefits in the near future. All areas are in need of new specific 
quantum algorithms demonstrating clear advantage over existing classical 
counterparts.”  
9. “Quantum simulation- at present- is the best application that we have for 
quantum computing in the near term.  Security applications- while important- will 
become less important as quantum resistant crypto becomes used.” 
10. “In my opinion the most appealing feature of a quantum computer is the ability to 
mimic quantum systems in a programmable way- simulate their evolution and 
final state. This feature has unpredictable consequences but it will mean a major 
breakthrough in the way we simulate chemical reactions and novel material 
design.” 
11. “Quantum simulation is also seen as commercially important- but value 
proposition remains unclear.” 
 
Classical simulation 
12. “Classical complex systems rely heavily on partial differential equation solving 
and there may not be much QCs can do.” 
 
 27 
Machine learning 
13. “Quantum machine learning is in its infancy and while enormous advantages can be 
found for quantum data the speedups for existing problems are at best quadratic.” 
14. “Quantum simulation and quantum machine learning approaches use specific 
solutions that are rather close in terms of ideology and technological 
implementation. This cross-fertilization promises to speed up the development of 
quantum machine learning.” 
15. “I'm more optimistic on the machine learning side in terms of special purpose 
hardware being able to learn things akin to current artificial neural networks 
(deep or otherwise) as it doesn't require the full gate model.” 
 
Data security 
16. “In my opinion the most practical application of quantum technology will be 
defending data security and various aspects of cryptography.” 
17. “Question needs more definition. What does it mean to be 'useful'? Is the death 
of public key cryptography 'useful'? Highly significant- but probably not useful. 
Over what time scales is this question interested? “ 
18. “Re. data security- the problems are not related to quantum- but humans- so 
building an even bigger wall that no one has to jump over to access the 
information in other ways is not useful.”  
 
Other 
19. “I'm still expecting real applications to come from elsewhere once engineers can 
get hold of the technology to solve practical problems.” 
20. “They should tackle real-live problems in society like cancer- climate change- new 
drugs- etc... The list up there is too specific. Maybe to be able to solve the real 
goals one need all of the above things.” 
21. “I think the efficiency of machines in general should be added to the list (not just 
computing).  A lot of the comments about climate change biological systems etc. 
fit under the category of simulating classical complex systems.  There is also the 
important aspect of tackling fundamental questions which is ENTIRELY lacking 
here.  Quantum computers can assist in testing for new fundamental theories.” 
22. “People will use the new technologies and create applications.” 
23. “I believe that the whole community (not only myself) is quite uncertain of which 
applications will be useful. This needs further- focussed research to develop and 
test new algorithms.” 
24. “All reasons are important- however in different domains. For example simulating 
could be very useful for certain applications- and not ML for those; and reverse 
for others.’” 
25. “My opinion is skewed by the kinds of things researchers talk to me about - a 
function of what they think the public is interested in.” 
26. “Being involved in academia within Europe for the past 5 years- and being 
involved in many conferences and discussions with experts in the field I am 
confident of the reasons and priorities I have indicated.  I can be selfish and ask 
to prioritise more theoretical and fundamental research which is what I do.  
Whilst I do wish that more fundamental research is funded- as a European 
taxpayer- I think our wisest investment for the betterment of our society is to 
prioritise in the areas indicated.”  
27. “More confident in the ‘Main reasons’ answer because of my own motivation to 
achieve successes in areas that can offer significant benefit to people's lives 
through medicine or technology- over any timeframe. Less confident in the 
‘Funding priorities’ answer because this will be decided by others with more 
political agendas I suspect.""
 28 
Sub-question 2.2: Which do you think would be the priorities for public funding 
support? 
Figure 2.2.1 show the histograms of the priority levels assigned to each driver by the 
respondents. For this sub-question, the participants were not asked to indicate their own 
numerical value, only their preferred order.  The topics seen as most important to fund 
publicly are optimization, increasing processor speed for specific applications, and 
quantum simulation. There was little enthusiasm for funding data security applications, 
which is quite surprising given that, elsewhere than in this RTD, they have been 
advocated as amongst the most important. These conclusions remain unchanged if the 
respondents’ confidence in their own answers is taken into account (Figure 2.2.2). 
Fewer comments were received to this second sub-question. Two comments were 
received regarding data security: a participant who ranked it at 6th priority said: 
”It is not clear that quantum computers can defend data security- on the other hand 
the mere threat that they could break security is already there. It is not clear that 
there is a commercial interest in cracking security but defending against their attacks 
is critical and has been for some time.”  
Two participants commented that military and security funding would be major sources, 
one saying they would be interested in cryptography.  
Two participants commented that control of quantum systems as a key application to 
fund. 
Three respondents stressed the importance of machine learning. 
With regard to what was appropriate for public as opposed to private funding two 
respondents commented: 
“a lot of these have clear business-cases and will be funded regardless. Some require 
a longer development track- and hence should be focused on by public funding. 
PRIMARILY Funding should be looked at from a global strategic context. No need to 
fund what we cannot ever competitively win as Europe.” 
“Public funding should be directed towards applications with the greatest societal 
gain. Hence- applications in increasing energy efficiency and simulating quantum 
[systems] should be given high priority for public funding. Applications in 
optimization and machine learning have applications in business and finance- and are 
more appropriate for support by private investment / industry. Having the ability to 
control quantum systems is important from a basic science perspective- and as a 
underpinning element of the other applications.” 
 
 
 
 29 
 
Fig. 2.2.1 Respondents’ priorities for public funding support 5 
 
0%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
Fr
ac
ti
o
n
 o
f 
re
sp
o
n
d
e
n
ts
 
Lowest priority
Priority 8
Priority 7
Priority 6
Priority 5
Priority 4
Priority 3
Priority 2
Highest priority
 30 
 
 
Fig. 2.2.2 Respondents’ priorities for public funding support, weighted by the confidence 
they expressed in their own answers.6 
 
 
 
 
0%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
Fr
ac
ti
o
n
 o
f 
re
sp
o
n
d
e
n
ts
, w
e
ig
h
te
d
 b
y 
co
n
fi
d
e
n
ce
Lowest priority
Priority 8
Priority 7
Priority 6
Priority 5
Priority 4
Priority 3
Priority 2
Highest priority
 31 
Question #3 Technical aspects, IT applications 
 
Please indicate how important you think quantum computing may be for IT applications, 
and the timeframe. 
High speed search of large databases 
Optimization 
Increase safety of cloud computing systems 
Breaking current cryptographic protocols 
Machine learning 
Pattern recognition 
Other (please specify in the textbox after ""Submit"") 
 
Sub-question 3.1: Importance for applications. Please rate on a scale of 0 to 100 the 
importance you think quantum computing could play for the following applications 
(from 0=not important, 100=extremely important) 
 
Sub-question 3.2: Timeframe. Please indicate the expected time scale in years for 
validation in a relevant environment (i.e. to achieve Technology readiness Level 5), for 
the indicated applications 
 
Sub-question 3.3: Level of confidence. Please insert a number to indicate your level of 
confidence in your own answers to the questions on ""Importance for applications"" and 
""Timeframe"". (from 0=not confident at all to 100=extremely confident) 
 
Motive 
This question is intended to examine the issues of question 2 in more detail, focusing on 
the IT applications which are cited as possibly suitable for quantum computers. 
 
Sub-question 3.1: Importance of quantum computing for IT applications 
The responses in Figure 3.1 and Table 5.1 show a lack of consensus, with optimistic, 
pessimistic and intermediate views all well represented and high interquartile ranges. 
The highest scores are for optimization. 
High speed search also scored high. Two participants noted that Grover’s algorithm has 
no advantage for search of classical databases. This is well-known but did not discourage 
other participants from giving positive opinions. 
 
Table 3.1 Importance of quantum computing for IT applications 2  
Application No. of responses Mean Median IQR 
High speed search of large databases 101 61.1% 70% 55%pts. 
Optimization 102 74.6% 80% 20%pts. 
Increase safety of cloud computing 
systems 
99 49.4% 50% 40%pts. 
Breaking current cryptographic protocols 100 65.1% 70% 40%pts. 
Machine learning 99 66.2% 70% 40%pts. 
Pattern recognition 96 64.6% 70% 34%pts. 
Other 19 71.1% 80% - 
 32 
 
 
 
Fig. 3. 1 Importance of quantum computing for various IT applications 7 
|median   |mean      ⁞ weighted mean    + individual responses, stacked vertically 
 
Other
Pattern recognition
Machine learning
Breaking current 
cryptographic protocols
Increase safety of cloud 
computing systems
Optimization
High speed search of 
large databases
[0,20%) [20%,40%) [40%,60%) [60%,80%) [80%,100%]
Respondent's assessment of the importance of quantum computing for each application
 33 
Comments 
Search  
1. “There is the common misunderstanding that Grover search can be applied to classical 
databases. In fact- it is slower than classical search for that. There is also no 
demonstration of a quantum speedup in any real optimization problem. 
2. Grovers' search will have no impact on the ability to search large data bases because 
the database has to be stored in quantum memory.  The remaining numbers reflect 
previous responses.” 
3. “Database search is not a likely application because the database has to be held in 
quantum memory and needs to be unsorted- which few databases are.” 
4. “Pattern recognition and database searches are the same algorithm family. They are 
the exact same application” 
 
Cryptography 
5. “Same as previous sections- it depends of the application and our objective is not to 
break current crypto- but to protect against breaking. 
6. “My answers are based on the potential for near-term devices. Although crypto could 
be a high-payoff application- I see it as a much longer term (several decades 
timeframe).” 
7. “The ability to break encryption protocols is more of a driver for encryption that is 
robust to quantum computers.” 
8. “I've not seen much in terms of encoding large datasets to give search or optimization 
applications access. QCs won't make anything in the ‘cloud’ safer as it's not the core 
problem.  Cryptographic codes may be in trouble- even if the usefulness is less than the 
risk (but maybe it will push another technology to replace current cryptographic 
protocols). Machine learning in terms of building specialist hardware- not QC as such- 
could highly benefit. Pattern recognition may be simpler than search as it's usually on a 
stream of data rather than having access to a large set of data; see machine learning. “ 
9. “The ability to break encryption protocols is more of a driver for encryption that is 
robust to quantum computers.” 
 
Machine learning 
10. “Data processing including Security and ML are to be extensively impacted by 
Quantum computing” 
 
Other 
11. “Coordination in distributed systems- network applications.” 
 
 
 
 
We also received 14 comments which concerned non-IT applications, apparently because 
we had not made it clear that they would be addressed in another question. We have 
included them in the discussion of question 4.1. 
 
 34 
Sub-question 3.2: Timeframe 
Discussion 
Very notable is that the median response for all applications was less than or equal to 15 
years, so optimistic views are in the majority, although there is no consensus. Overall, 
the estimated time scales are consistent with the ratings of importance expressed in the 
previous sub-question: applications thought important were also the ones for which it 
was thought that a quantum computing solution would be quickly achieved.  
For all applications, several participants replied that quantum computing would never be 
important. These replies were included for the purpose of calculating the median, but 
excluded when calculating the mean and weighted mean, there being no obvious way to 
include them. 
 
Notes  
The responses to sub-question 3.2 are shown on a scale with maximum 100 years, 
which spans almost all the responses received for expected timescale, except those for 
which it was “never”. One participant gave an expected time scale of 900 years and one 
470 years, for increased safety of cloud computing. There was one reply indicating 200 
years, for high speed search of large data bases, and one of 200 years for breaking 
current cryptographic protocols. These four data points are not shown, to avoid 
compressing the scale, but they affect the statistics, making the mean much greater 
than the median. 
Comments 
Predictive 
1. “There is much interest in Big Data and Data analytics and I think that this will 
foster the use of quantum algorithms in the near future (5 years or less).” 
2. “The Grover Family- (database searched and pattern recognition) have large 
differences. Alike encryption breaking (RSA very easy- Elliptic Curve a little 
harder- and other harder) etc. but RSA is dead by 2020.” 
3. “The time scales will be governed by the practical development of quantum 
computers being 10-20 years.” 
4. “The moment IBM achieves quantum supremacy (they expect it this year) they 
will need to use their own hardware to make the new quantum technology steps. 
Chemical and physics simulation applications currently used would already greatly 
benefit from 100 qubit systems. Assuming that some technologies are stable 
enough to make simple error-correction with 300 qb- this will be reached by 
2020/2021 already.” 
5.  “Given that we can already have highly non-trivial simulations for quantum 
chemistry with just 20 qubit quantum computers- I think that advancements in 
quantum chemistry for some simple models can be achieved in the next decade.” 
6.  “Some forms of quantum neural net training can be performed on quantum 
annealers at present.  This debatably makes the technology available at present.  
For quantum algorithms for making this apply to realistic tasks- we will likely 
need to wait years for a fault tolerant quantum computer.” 
7. “Breaking current cryptographic protocols requires a rather large gate-based 
quantum hardware. This is still a distant goal. Quantum annealers are almost 
ready for practical optimization tasks.“ 
Uncertain 
8.  “No idea when a fault tolerant quantum computer will emerge from research 
programs.” 
 35 
9. “I don't believe anyone is certain of the answers to these questions. More 
focussed research is needed to identify and test applications.” 
10. “It seems like a guessing game at this point- with available information skewed 
by the need to garner research funds.” 
11. “As I am not an experimentalist I have indicated the timeframe based on what I 
read and hear from colleagues.  So my timeline is at best an optimistic one.” 
Other 
12. “Validation in a relevant environment"" seems a flawed question to me: only 
because it can be demonstrated to work & be built as a product- doesn't mean it's 
economically viable. For example it may be overall cheaper to run a large cluster 
of normal CPUs for optimisation than one costly quantum annealer.” 
 
Table 3.2 Timescale for validation of quantum computing in a relevant 
environment, for various applications 3 
 
 No. of responses Mean Median IQR 
  years years years 
High speed search of large databases 93 24.1  15     22.5 
Optimization 93 14.5     8     10.0 
Increase safety of cloud computing 
systems 
88 36.4 11.5 20.75 
Breaking current cryptographic protocols 91 22.9    15    23.0 
Machine learning 90 16.9    10    14.0 
Pattern recognition 89 16.7    10    14.0 
Other 18 10.4    10 - 
  
 36 
 
Fig. 3.2 Expected time scale for TRL5 - validation in a relevant environment, for the 
indicated applications 8 
|median   |mean      ⁞ weighted mean    + individual responses, stacked vertically 
 
 
  
Other
Pattern recognition
Machine learning
Breaking current 
cryptographic protocols
Increase safety of cloud 
computing systems
Optimization
High speed search of 
large databases
[0,20) [20,40) [40,60) [60,80) [80,100]
Respondent's estimate of time scale in years
 37 
Question #4 Technical aspects, scientific and engineering applications 
Please indicate how important you think quantum computing may be for scientific and 
engineering applications and the timeframe, for specific applications. 
Material science 
Molecular simulations / quantum chemistry 
Aerospace 
Other fluid dynamics, e.g. climate modelling 
Exoplanetary research 
Economics and finance 
Simulation of smart cities 
Software validation 
Other (please specify in the textbox that opens after you click ""Submit"") 
 
Sub-question 4.1: Importance for applications. Please rate on a scale of 0 to 100 the 
importance you think quantum computing could play for the following applications. 
Sub-question 4.2: Timeframe. Please indicate the expected time-scale in years for 
validation in a relevant environment (i.e. to achieve Technology Readiness Level 5), for 
the following applications. 
Sub-question 4.3: Level of confidence. Please insert a number to indicate your level of 
confidence in your own answers 
 
Motive 
This question continues the enquiry of the previous one, broadening to other science and 
technology areas for which quantum computing has been advocated. Eight classes of 
application were proposed in the question (shown in Fig. 4.1) with an option to suggest 
others. All but one of these are things which are of clear and obvious economic 
importance to Europe.   
 
Sub-question 4.1: Importance for applications 
Discussion 
  Participants rated quantum simulation for materials and chemistry as the most 
promising application, several people also said, in comments, that physics simulation 
would be important. Many other applications were mentioned: pharmaceuticals, artificial 
intelligence and logistics, pure and applied mathematics, atomtronics, cosmology, 
biophysics, block-chain mining and quantum internet. However, not everyone accepted 
all of these. One participant strongly promoted quantum metrology, but did not 
elaborate on the connection with quantum computing. 
Comments 
1. “Modeling complex quantum systems leads to better control of cumbersome 
quantum effects in basic physics research and to building quantum materials with 
new properties.” 
2. “Modelling physical systems is also a significant application (many-body physics- 
decoherence- quantum-to-classical transition).”  
 38 
3. “Understanding the failure of quantum computation is important for many areas 
of quantum physics.” 
4. “Simulation provides clear exponential speedups.  The remaining areas are 
speculative and can only give quadratic advantages.” 
5. “Sorry- but most of this is wishful thinking. Material science and 
molecule/chemistry simulation seem highly relevant. The rest is too remote from 
what we are likely to be able to actually achieve to be considered. Links to 
medical and semiconductor technologies applications are missing.” 
6. “As far as I'm aware- all the significant advantages are in simulating quantum 
systems (like materials science or chemistry) and not classical ones (like climate- 
stock markets- or fluid dynamics).” 
(As said above, some of these comments were received in reply to sub-question 3.1.) 
 
 
Table 4.1 Importance of quantum computing for scientific and technical 
applications4 
 
Application No. of 
responses 
Mean Median IQR 
Material science 95 81.3% 80% 25%pts. 
Molecular simulations / quantum 
chemistry 
95 86.8% 90% 20%pts. 
Aerospace 93 46.4% 50% 50%pts. 
Other fluid dynamics- e.g. climate 
modelling 
90 48.3% 50% 55%pts. 
Exoplanetary research 89 30.8% 25% 40%pts. 
Economics and finance 93 48.7% 50% 48%pts. 
Simulation of smart cities 89 37.3% 39% 40%pts. 
Software validation 90 35.5% 35% 36%pts. 
Other 12 65.8% 75%          - 
 
 39 
 
Fig. 4. 1 Importance for scientific and engineering applications 9 
|median   |mean      ⁞ weighted mean    + individual responses, stacked vertically 
Other
Software validation
Simulation of smart 
cities
Economics and finance
Exoplanetary research
Other fluid dynamics-
e.g. climate modelling
Aerospace
Molecular simulations / 
quantum chemistry
Material science
[0,20%) [20%,40%) [40%,60%) [60%,80%) [80%,100%]
Respondent's assessment of the importance of quantum computing for each application
 40 
 
Sub-question 4.2: Expected time-scale for validation in a relevant environment 
(TRL5) 
Expected timeframes are again shortest for those applications also deemed most 
important: in this question material science and molecular simulation. Economics and 
finance is also seen as an application which might be addressed quickly, with a median 
response of 15 years. 
For all remaining suggested applications, the expected timeframes are longer, with 
medians greater than or equal to 20 years. 
Other scientific and engineering applications suggested by the participants were, with 
timescales in years in brackets: 
Nuclear physics (5); 
Many body physics/condensed matter systems (10 or 15); 
Decoherence/quantum-to-classical transition (15); 
Atomtronics (15); 
Particle physics (20);  
Cosmology (20); 
Biology and biophysics (25); 
 
 
Table 4.2 Expected timeframe in years for validation in a relevant environment 
5             (Starting from May 2017)   
Application No. of 
responses 
Mean 
(years) 
Median 
(years) 
IQR 
(years) 
Material science 90 14.6  10 11.3 
Molecular simulations / quantum 
chemistry 
90 11.8  10 10.0 
Aerospace 88 26.6  20 37.50 
Other fluid dynamics- e.g. climate 
modelling 
85 27.0  20 30.0 
Exoplanetary research 81 32.8  25 87.5 
Economics and finance 86 25.2  15 28.3 
Simulation of smart cities 81 31.8  20 40.00 
Software validation 83 32.9  20 50.0 
Other 14 13.5  12.5 - 
 41 
 
Fig. 4.2 Expected timeframe for validation in a relevant environment   (TRL5) 10 
|median   |mean      ⁞ weighted mean    + individual responses, stacked vertically 
Other
Software validation
Simulation of smart 
cities
Economics and finance
Exoplanetary research
Other fluid dynamics-
e.g. climate modelling
Aerospace
Molecular simulations / 
quantum chemistry
Material science
[0,20) [20,40) [40,60) [60,80) [80,100]
Respondent's estimate of time scale in years
 42 
 
Both for the IT applications of question 3 and the scientific and technical applications of 
question 4, there was a correlation between the deemed importance and the expected 
timescale: respondents tended to expect the applications which they considered to be 
important to be addressed in a shorter time scale (Fig. 4.2.1). It is not clear from the 
participants’ comments why this should be the case. One explanation is that the 
participants expected that resources would be concentrated on important applications 
and therefore they would be realized more quickly. Another is that the participants 
regarded the two factors as being inherently correlated i.e. they attached greater 
importance to things they expected to happen more quickly. (The two factors were 
intentionally separated into different sub-questions so as to allow other interpretations.) 
 
 
Fig. 4.2.1 Deemed importance of quantum computing for various applications, versus the 
expected implementation time scale.  
Applications with higher expected impact are also expected to be realized sooner. This 
(anti)-correlation is quite strong: Spearman’s rank correlation coefficient ρ = -0.87. 
Medians are shown as circles, quartiles are shown as vertical and horizontal fences. 
(The upper quartiles in time for software validation, 60 years, and exoplanetary 
research, 100 years, are omitted only to avoid compressing the graph). 
  
%
20%
40%
60%
80%
100%
0 10 20 30 40 50
Im
p
ac
t
Year
Molecular simulations /
quantum chemistry
Material science
Optimization
Machine learning
Pattern recognition
High speed search of large
databases
Breaking current
cryptographic protocols
Economics and finance
Other fluid dynamics- e.g.
climate modelling
Aerospace
Increase safety of cloud
computing systems
Simulation of smart cities
Software validation
Exoplanetary research
 43 
Question #5 Social aspects 
Potential implications of quantum computing, when it is operationally available 
Sub-question 5.1: Impact on society. Please indicate your opinion about the potential 
benefits and risks of quantum computing to society at large. 
From -100=very harmful to 100=very beneficial;  
From -100=very dangerous to 100=very safe 
 
Sub-question 5.2: Areas of benefit. Indicate how the listed areas could be affected by 
quantum computing. 
Basic knowledge 
Applied Science 
Health 
Security 
Education and training 
Finance 
Quality of life (e.g. job-satisfaction, work/leisure balance) 
Other (please add in the textbox after ""Submit"") 
 
Sub-question 5.3: Potential regulatory implications. Please indicate your judgement 
about potential regulatory implications 
Few drawbacks and no special controls needed 
Requiring some regulation to control abuse, based on incremental development of 
existing IT law 
Requiring rigorous control and restriction to a limited number of trusted users and 
organizations 
Be confined only to research, requiring only research-ethics controls 
Other (please indicate after ""Submit"") 
 
Sub-question 5.4: Certification. Is any certification specific to quantum computing 
needed – e.g. for security, privacy or quality? What kind? In which area(s)? Why? 
 
Motive 
In order to achieve foresight of the policy issues, on the relatively long scale needed for 
the subject, it was thought necessary to have a vision of the likely societal impacts. Also, 
responsible research and development should include not rushing to fund a potentially 
very disruptive technology without considering what the negative effects of such 
disruption might be.  
 
 44 
Sub-question 5.1: Benefits and risks of quantum computing to society at large 
 
Fig. 5. 1 Benefits and risks of quantum computing to society at large 11   
            The expectations for the two factors are uncorrelated.         
            (Spearman’s rank correlation coefficient ρ = 0.47)  
 
     Table 5. 1 Averages for potential effect on society at large6 
 
 No. of responses6 
Mean  
(nearest integer) 
Median 
Harm or Benefit 
(-100 to +100) 
92 +74 +80 
Dangerous or Safe 
(-100 to +100) 
90 +53    +72.5 
 
The overwhelming majority of respondents consider quantum computing likely to be safe 
and beneficial. None considered it likely to be harmful. It is the strongest consensus on 
any question we asked.  
The answers in the two dimensions are uncorrelated, as is seen from the graph and the 
low value of Spearman’s coefficient i.e. the people who were more optimistic about the 
benefits of quantum computing were not necessarily the same ones who were more 
optimistic about its safety. 
 
                                           
(6) Two participants responded for only the harm/benefit category. These are not shown on the graph, were  
ignored in calculating ρ and do not change the mean and median (+/- 1). 
-100
-80
-60
-40
-20
0
20
40
60
80
100
-100 -80 -60 -40 -20 0 20 40 60 80 100
←
D
a
n
g
e
ro
u
s 
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
 S
a
fe
→
← Harmful                                                             Beneficial →
 45 
 
Comments 
1. “Definitely beneficial- but it would be in-league with the current progression of 
technology and people’s perception of it. It is not safe- not because of cyber-
security etc. But because of the massive knowledge gap between technology and 
people. I fear society might distance itself from understanding something that 
controls (eventually) the majority of their lives.” 
2. “I’m not sure I can answer this – for example- if quantum simulation turns out to 
be very useful for discovery of new materials then it could be very beneficial but 
in the wrong hands it could also be very harmful – it is not that technology is 
‘neutral’ but that the way it is developed and appropriated reflects underlying 
social structures.’” 
3. “Depends on the decision making process and several factors which are very 
difficult to predict. This only means that an strong and parallel ethical control 
should be established.” 
4. “Quantum computing is fundamentally so much more powerful than classical 
computing that its benefits to the society at large are not in doubt. There is 
nothing dangerous about the technology itself. Only people who use it may be 
dangerous.” 
5. “Knowledge is always beneficial and it opens unexpected doors for new 
applications- which become inaccessible without such knowledge. 
6. “On the other hand security- privacy etc. can be a great danger if this technology 
is not used in a controlled way” 
7. “Highly dependent on policy framework- test- validation and preparation by 
governments. If those things are carried out properly- I don’t see much additional 
threat to the world (which is already under considerable strain- for other 
reasons).” 
8. “benefits will be for immediate users- and only with the passage of time for 
society at large. The employment of new- powerful computing options always 
creates risks- such as misuse- or imbalances of power between military users.” 
9. “Not more or less harmful or beneficial than any other technology and can be 
used for good or bad. It depends what we choose to do with it. I don’t see any 
specific safety issues compared to current technologies in use and generally 
seems safe (if we put nuclear energy at 0).” 
10. “Any technology in the right hands can be very beneficial and fairly safe.  In the 
wrong hands it can be the opposite.  It depends on the state of affairs of the 
world and on politicians really. “ 
11. “The answer depends on a multitude of factors such as- who will the device be 
accessible to etc.” 
 
 
 46 
Sub-question 5.2: Effect of quantum computing on specific areas: 
Basic knowledge 
Applied Science 
Health 
Security 
Education and training 
Finance 
Quality of life (e.g. job-satisfaction, work/leisure balance) 
Other (please add in the textbox after ""Submit"") 
 
Discussion 
Although the great majority of participants see quantum computing as beneficial for all 
areas listed, there is not a strong consensus on the degree of benefit, the data showing 
a wide spread and large standard deviations.  
It is very notable that basic Knowledge and applied Science are the areas seen as 
benefiting most, with fewer respondents confident of the benefits to health, security, 
education and training, finance and economics and quality of life. This suggests that 
quantum computing is seen as an emerging scientific tool, and not, at least yet, 
something poised to have dramatic impact on life in general. 
The only specific “Other” area mentioned was better clocks, which we had considered 
outside the scope of the questionnaire7. 
 
Comments  
1. “In the longer run I see massive benefits from health- and applied sciences.  
Basic knowledge will not grow until quantum-natives enter the workplace. This 
takes at least 12 years.” 
2. “Again it's hard to say what will be ‘beneficial’. For example in ‘Security’- QC 
might break existing security but also provide ways to identify security threats 
(and QKD etc. to address them directly)."" 
3. “In the (very) long run quantum computing will have a great positive impact on 
all parts of the society.” 
4. “It could lead to the cracking of crypto algorithms we rely on but I don't believe it 
would be that difficult to develop new quantum resistant algorithms. Advantages 
in high frequency trading and its negative effects could be another negative 
impact.” 
5. “There may be a harmful impact to financial markets if expensive quantum 
technologies give rich financial institutions an advantage that skews the market.“ 
6. “I have given a zero where the risk/benefit is entirely dependent on the method 
of adoption- e.g. policy framework- and level of planning. I believe benefit to 
applied science is more significant than fundamental- but only marginally. “ 
7. “It would be a matter of pure belief to say that more-advanced technology is 
purely beneficial (cf. privacy- community- equality of opportunity- etc.). “ 
 
 
                                           
(7) See the earlier report from this study [Lewis, 2017] for a discussion of the topic. 
 47 
 
Fig. 5. 2 Effect of quantum computing on specific areas12 
 |median   |mean      + individual responses, stacked vertically 
Other
Quality of life (e.g. job-
satisfaction-
work/leisure balance)
Finance
Education and training
Security
Health
Applied Science
Basic knowledge
[0,20%) [20%,40%) [40%,60%) [60%,80%) [80%,100%]
Respondent's opinion of how area could be affected
 48 
Table 5.2 Effect of quantum computing on specific areas7 
Application No. of 
responses 
Mean Median IQR 
Basic knowledge 91 82.7% 90% 20%pts. 
Applied Science 90 82.6% 90% 20%pts. 
Health 88 58.5% 60% 40%pts. 
Security 91 53.% 60% 70%pts. 
Education and training 88 60.4% 60% 40%pts. 
Finance 89 38.8% 50% 70%pts. 
Quality of life (e.g. job-satisfaction- 
work/leisure balance) 
83 27.4% 10% 50%pts. 
Other   4 37.3% 25% 87%pts. 
 
 
Sub-question 5.3: Potential regulatory implications 
For this sub-question, the participants were asked simply to indicate which one of the 
options they considered the best. A total of 87 participants responded.  
                                     Table 5.3 Potential regulatory implications  
Option Few 
drawbacks 
and no 
special 
controls 
needed 
Requiring 
some 
regulation to 
control abuse, 
based on 
incremental 
development 
of existing IT 
law 
Requiring 
rigorous 
control and 
restriction to a 
limited number 
of trusted 
users and 
organizations 
Be confined 
only to 
research- 
requiring 
only 
research-
ethics 
controls 
Other 
(please 
indicate) 
Fraction of 
participants 
selecting 
36.8% 51.7% 8.0% 0 3.4% 
 
The second option—requiring some regulation—was preferred by an absolute majority. 
Although 3 participants said that they would prefer other options, they did not provide 
details. 
 
 
 
 49 
Comments 
1. “I'm not sure that ‘regulation’ is the right way to address the social implications - 
good and bad - from QC. So in that sense the question is irrelevant. The question 
might also be moot- if QC is only available to research and big corporations - 
assuming we trust them to behave responsibly. It's hard to see how anyone will 
be able to do physical damage with QC- but maybe one day either QC could be 
used as a threat to critical infrastructure- or- conversely- will be so fundamental 
to critical infrastructure that it will require its own protection."" 
2. “The regulation should be based in the foresight done when more information and 
impact could be estimated. It is clear that there should be an important previous 
effort to advance some responses but now it is too early to pre-suppose an 
answer.” 
3. “Wide availability ensures greater development- performance and equity between 
all potential users” 
4. “Laws and regulations will have to be reviewed- as usual- but no special approach 
is required. Unlikely- though- that these will catch up with actual capabilities and 
what is possible will be done- and build- no matter the law or the funding.” 
 
Sub-question 5.4: Certification 
Overall, there was no consensus on the requirements for certification. 
Relatively few participants chose to reply. 
46 answers were received, which may be grouped as follows. 
                 Table 5. 4 Requirements for certification 8 
          Response group Fraction of participants 
selecting 
No, specific certification not needed 20% 
Not yet, or too early to say 15% 
Yes, specific certification needed 20% 
Certification of genuine quantum 
character needed 
11% 
Certification for security and/or 
privacy purposes needed 
17% 
Requirements same or similar to 
certification of conventional IT 
17% 
 
Several responses referred to ongoing efforts to establish standards, security models and 
certification in quantum cryptography, which is somewhat out of scope but, given the 
early stage of development, a hard and fast distinction between certification of quantum 
communications technology and certification of quantum computing technology perhaps 
cannot be made yet.  
 
  
 50 
Question #6 Economic aspects 
Implications of quantum computing, when it is operationally available 
Sub-question 6.1: Potential economic implications. Please indicate your judgment of the 
potential economic implications of quantum computing, on all sectors of the economy. 
Assume a scenario in which conventional computing ceases to evolve in cost and 
performance as it has done whilst Moore’s law has remained valid. The economic effect 
of quantum computing could be: 
Greater than that which conventional IT has had. 
Similar to that which conventional IT has had. 
Smaller than that which conventional IT has had. 
A net loss. 
Any of these, it is too uncertain to say. 
 
Sub-question 6.2: Concentration. Please indicate your opinion about the potential effect 
of quantum computing on the IT sector generally. It will: 
Lead to a near-monopoly in IT. 
Tend to concentrate control of IT in the hands of a fewer major players. 
Have no effect on the concentration of the sector. 
Tend to make the sector somewhat more diverse. 
Lead to a highly diverse market in which no company can dominate even a small 
part. 
 
Sub-question 6.3: Future job market. What will be the impact of quantum computing on 
the job market? Insert a number to indicate the likelihood of each expected outcome.  
(From 0=not likely to 100=very probable) 
Quantum computing will have a disrupting impact on employment, destroying many 
existing jobs. 
Quantum computing will always be limited to a small niche for very highly skilled, 
specialized experts. 
A new generation of computer programmers will arise for developing quantum 
software. 
Applications and satellite activities enabled by quantum computers will generate 
significant concomitant employment. 
Other (enter explanation in the textbox that will appear after ""Submit""). 
 
Motive 
Quantum computing is potentially highly disruptive of the IT sector, which is of central 
importance to the economy, now and in the future. We recognized that it is premature to 
attempt an economic prediction, but hoped to achieve some foresight of likely effects on 
key areas. The impact of quantum computing had to be judged against the background 
of the expected development of the sector. We chose one possible scenario (end of 
Moore’s law), thinking that it would be the one where the advent, or non-advent, of 
quantum computing, would have the greatest significance. We recognize that other 
scenarios are possible for classical IT. In asking the third question, we were conscious of 
the special importance given to employment within EU policy, in Juncker Priority 1: jobs, 
growth and investment. 
 
 51 
Sub-question 6.1: Economic impact, assuming end of Moore’s law 
Only one option could be selected. 
105 people opened the question. 90 selected an option, 15 did not. 
 
                                  Table 6. 1 Economic Impact9  
Impact 
Fraction of respondents selecting 
this option, out of the 90 
Greater than that which 
conventional IT has had. 
20% 
Similar to that which conventional 
IT has had. 
38% 
Smaller than that which 
conventional IT has had. 
32% 
A net loss. 1% 
Any of these- it is too uncertain to 
say. 
9% 
 
Although there is consensus that the effect will be positive, the opinions differed as to 
the degree of impact. The positive responses are phrased in relation the economic 
impact which conventional IT has had, which is enormous, and the majority of the 
participants who responded thought that the impact of quantum computing could be as 
large or greater. This remarkably sanguine view is reflected in the comments received. 
 
Comments 
1. “Joint effect of Quantum Internet- Computing and AI will be bigger than the 
internet.” 
2. “It's not really a relevant question- because QC will always work alongside 
conventional IT. But QC might increase the already large economic implications of 
IT as a whole - perhaps by orders of magnitude. Do you mean- will QC overcome 
the limits to Moore's Law? No.” 
3. “Since quantum computing is fundamentally more powerful than classical 
computing- it is very likely that eventually its effect will be much greater to the 
economy than what conventional IT has had until now.” 
4. “Applications cannot be fully specified yet” 
5. “Quantum computing is special purpose and its scope is more limited than 
classical computing's revolution was.” 
6. “Since quantum can have great impact in the two top trends if IT (data & 
security) the potential impact has to be greater” 
7. “Impossible to say right now until you can see real examples of where quantum 
computers have advantages over classical. However- likelihood is that if quantum 
can help provide improvements to machine learning- search and optimisation- it 
is likely that- in time- their use may become as ubiquitous as that of classical 
 52 
computers/electronics. Remember that it took classical electronics over half a 
century to become what we know if to be today.” 
8. “Classical computing continues to be required as the basis for an enterprise's 
operations; you will never send an email using a quantum computer (at least not 
for an economic reason). Quantum computers are likely to occupy a similar co-
processor space as GPGPUs today- though have the potential to be larger than 
this particular existing market.” 
9. “We are still learning which applications a quantum computer might have. 
Currently the applications are limited to several algorithms (Shor,...) with ideas 
how to extend this to other areas (machine learning- simulation of chemical 
reactions- biological systems). At the moment it is still difficult to extrapolate the 
future impact.” 
10. “The leap to silicon-based processing has been more significant than the silicon to 
quantum leap will be. Applications and access will be more limited. There is little 
reason to think that developers and programmers working with current 
technology have left an enormous amount of untapped potential in information 
processing. The gains will be incremental- not step-change.” 
11. “The applications are not new- so QC as it is stated and referred to here is merely 
an adjustment of how we do IT- so it will not have a major impact at all- but 
could generally improve things a bit. More general quantum technologies may 
have more dramatic impacts- but unlikely on what we call IT at the moment 
directly.” 
 
 
Sub-question 6.2: Potential effect of quantum computing on the IT sector 
generally 
Only one option could be selected. 
105 people opened the question. 89  selected an option, 16 did not. 
 
                                    Table 6.2 Effect on IT sector 10 
 
Impact 
Fraction of 
participants selecting 
an option, of the 89 
Lead to a near-monopoly in IT.  2% 
Tend to concentrate control of IT in the hands 
of a fewer major players. 
45% 
Have no effect on the concentration of the 
sector. 
34% 
Tend to make the sector somewhat more 
diverse. 
16% 
Lead to a highly diverse market in which no 
company can dominate even a small part. 
  3% 
 
There is no strong consensus but the larger group of respondents see quantum 
computing as tending to concentrate the sector. One argument for this is that quantum 
computing is by nature a less accessible technology than conventional IT. In this respect, 
 53 
its effect would tend to reverse the effect of the microcomputing revolution which has 
made conventional IT extremely accessible, compared to the situation beforehand. This 
view is reflected in some of the comments received. 
 
Comments: 
1. “Quantum IT will (for this decade) be something for the large institutions- already 
ordering at a few large suppliers. Additional products will not really change in this 
way of working.” 
2. “Requiring large and resources and specialised skills- QC is likely to concentrate 
ownership. However- not necessarily in the current big corporations - new ones 
might emerge. At the same time- new and specialised markets for QC-related 
products and services can be expected.” 
3. “Initially quantum computers will be expensive and accessible only to major 
players- but this will become less of a problem as the price comes down. The 
same process happened with conventional computing.” 
4. “The actual major hardware players will probably remain- and will be the ones 
building new quantum computers. So the risk is to end up without any European 
hardware player- and the quantum software to be dependent of non-European 
major players. in fact- reproducing / continuing the same situation” 
5. “The development of a quantum computer requires significant technology 
development- similar like for classical computers.” 
6. “if successful- only large IT companies will be able to really develop large-scale 
quantum computers” 
7. “Unless an immense breakthrough happens and we get silicon based QC- I am 
afraid this technology would be concentrated in the hands of a few major players” 
 
Contrary viewpoints expressed were: 
8. “New quantum computing companies are emerging and may grow to be large 
future players in this sector. Yet traditional IT companies are expressing great 
interest in quantum computing. “ 
9. “Quantum technologies have a very broad application area which creates 
opportunities for existing and new industries. Because of today's worldwide 
political situation- ‘monopoly’ will not happen."" 
10. “Players who will lead this revolution will take over the lead on the future of IT” 
11. “On the assumption that the major players make it to market with competing 
offerings- this may create an initial diversity which may then resolve as the 
superior offerings and applications are discovered and drive economies of scale. 
However- a correctly abstracted ecosystem may maintain a diversity of players 
unified by architecture standards.” 
12. “It will be too small a niche to make a lot of difference- except possibly in the 
very long term” 
13. “The benefit ultimately lies in the applications- so the hardware will not have a 
major impact on the concentration. Few hardware suppliers can be beneficial if 
they are controlled suitably. Traditional IT will also not actually go away- QC will 
just be another component in the mix.” 
 54 
Sub-question 6.3: Effect on the job market 
The overall view of the effect on employment is positive, but with no strong consensus 
and dissenting views on all categories. Few respondents thought that quantum 
computing would have a disruptive effect and destroy many existing jobs. Since the 
majority of respondents in sub-question 6.1 took the view that quantum computing 
would have an economic effect greater or equal to that of conventional IT, which is 
generally believed to have destroyed existing jobs but also created many, the 
respondents seem to have interpreted question 6.3 as referring to the net effect. Indeed, 
some were explicit about this in their comments. There is greatest optimism about the 
possibility that a new generation of quantum programmers will arise. For the other two 
categories suggested, there was very little consensus. 
Comments 
1. “Other factors will influence the job market far more than quantum computing 
could ever. “ 
2. “Quantum technologies in general will create jobs because it is based on a lot of 
new enabling (classical) technologies.” 
3. “In the early days- the ability to program for QC will be a rare and valuable skill. 
If QC becomes a commodity- then either simple ways to program it will be 
developed- or else many more QC programmers will be need to be trained. 
Economies of scale and other parallel technologies such as AI- which might 
replace much of the ‘street-level’ programming    - tailoring applications to meet 
the needs of companies- maintaining software- etc. - which is any case a slowly 
diminishing industry- and can be easily off-shored to the extent that it is done at 
all. I do expect industries around QC to be important economically- but not 
necessarily to employ very many people. But this is more or less a guess."" 
4. “No new technology will destroy jobs- it just transforms the inconvenient 
machine-like jobs to more convenient ones. Assuming the likely event that a 
large-scale quantum computer will be built- its effect will so large that it will 
create a great number of jobs in many different areas.” 
5. “Lump of labour fallacy does not apply to quantum computing just as it doesn't 
apply to other new developments i.e. it may make some jobs obsolete but it will 
create others.” 
6. “Strong chance that QC will provide satellite benefits and spinoff application. All 
other answers are highly speculative- and dependent on applications that we 
can't yet imagine.” 
7. “difficult to predict the impact on such long-term technology; however- machine-
based tasks are already happening- it's not the quantum computing that will 
change it so drastically. on the other hand- new skills & competencies will be 
required” 
8. “this is hugely speculative- especially without a timeframe for the question” 
9. “Impact seems generally minor and won't be on the applications and IT overall 
referred to in this survey (they will still be there- even if powered by QC). Maybe 
we need less programmers (not being replaced by QC programmers)- as QC and 
related technologies offer alternative approaches- but AI is already doing part of 
that job now.” 
“I think that as Quantum computing grows- the advent of new skills would mean that 
jobs will grow concomitantly. I suspect there would be a transient period as Quantum 
computing starts to take over conventional IT- but i believe the labour market will 
eventually adjust accordingly.  History has always shown us that it does.” 
 
 55 
                         Table 6.2 Effect on the job market11 
 
 No. of 
responses 
Mean Median IQR 
Quantum computing will 
have a disrupting impact on 
employment- destroying 
many existing jobs. 
90 14.2% 8% 20%pts. 
Quantum computing will 
always be limited to a small 
niche for very highly skilled- 
specialized experts. 
89 48.1% 50% 45%pts. 
A new generation of 
computer programmers will 
arise for developing 
quantum software. 
90 71.6% 78% 39%pts. 
Applications and satellite 
activities enabled by 
quantum computers will 
generate significant 
concomitant employment. 
88 60.4% 60% 40%pts. 
Other  5 30.0% 0% - 
 56 
 
Fig. 6. 3 Effect on job market13 
|median   |mean          + individual responses, stacked vertically 
Other
Applications and satellite 
activities enabled by 
quantum computers will 
generate significant 
concomitant 
employment.
A new generation of 
computer programmers 
will arise for developing 
quantum software.
Quantum computing will 
always be limited to a 
small niche for very 
highly skilled- specialized 
experts.
Quantum computing will 
have a disrupting impact 
on employment-
destroying many existing 
jobs.
[0,20%) [20%,40%) [40%,60%) [60%,80%) [80%,100%]
Respondent's estimate of likelihood of each expected outcome
 57 
Question #7 European Public Funding I 
Please give your opinion about the priorities of European public funding for quantum 
computing hardware. 
Sub-question 7.1: Public funding priorities. Please indicate which quantum computing 
hardware should European public funding give priority to. 
Basic research, e.g. because it is premature to move ahead with technology 
development and the attempts being made to do so are misguided. 
Enabling technologies, which would increase the available options for a full-scale 
quantum computer. 
Solutions such as quantum simulation and adiabatic computing, which have a good 
chance of being useful in the medium term. 
Two or three credible candidate platforms, with an aim to produce full-scale 
computers. 
One chosen leading candidate platform, since only by focusing all available resources 
is there a reasonable chance of success. 
Other (please indicate in the textbox after ""Submit""). 
Sub-question 7.2: Reasoning for public funding. Please explain your response to the 
public funding choice 
Sub-question 7.3: Level of confidence. Please insert a number to indicate your level of 
confidence in your own answers to the questions on ""Public funding priorities"" and on 
""Reasoning for public funding"". (From 0=not confident at all to 100=extremely 
confident) 
Level of confidence in public funding priorities 
Level of confidence in reasoning for public funding 
Motive 
This question relates to European Future and Emerging Technologies (FET) Flagship in 
quantum technology (see https://ec.europa.eu/digital-single-market/en/quantum-
technologies#Article). Questions 7 and 8 concern both the ongoing ramp-up phase under 
Horizon 2020, and the main phase, to take place under its successor research and 
technology development investment programme, called “Horizon Europe”. 
Sub question 7.1: European public funding for quantum computing hardware  
Nearly half of the first priorities are for funding basic research.  If the second and third 
priorities are considered, enabling technologies are preferred over basic research, and 
medium approaches next. No difference in this respect is seen between the unweighted 
and confidence-weighted data. There are some dissenting opinions, especially in favour 
of two or three credible platforms, but only two respondents were ready to recommend 
selecting a single favoured hardware platform for quantum computing. This is a key 
result of the RTD and has important implications for the organisation of the FET flagship. 
In order to retain the support of the quantum computing community it will be necessary 
to keep hardware options open well into the life time of the Flagship, and maybe 
throughout its life time, which implies dividing and diluting the funding. These issues 
were mentioned by many of the respondents in their explanatory remarks. 
Given the need for debate on funding priorities, the respondents were especially 
encouraged to give explanatory remarks for this question by means of a specific sub-
question. All the remarks we received are reproduced below in full. 
In most (although not all) cases, they are consistent with the first priority selection 
made by the respondent, so they are categorised below accordingly.
 58 
 
Fig. 7.1.1 Priorities for European public funding of quantum computing hardware 14 
 
 
  
0%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
Basic research Enabling
technologies
Two or three
credible
candidate
platforms
Medium term
(quantum
simulation,
adiabatic
computing etc.)
One leading
candidate
platform
Other
Fr
ac
ti
o
n
 o
f 
re
sp
o
n
d
e
n
ts
 
Lowest priority
Priority 5
Priority 4
Priority 3
Priority 2
Highest priority
 59 
 
Fig. 7.1.2 Priorities for European public funding of quantum computing hardware,              
weighted by respondent’s confidence in their own answer15 
0%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
Basic research Enabling
technologies
Two or three
credible
candidate
platforms
Medium term
(quantum
simulation,
adiabatic
computing etc.)
One leading
candidate
platform
Other
Fr
ac
ti
o
n
 o
f 
re
sp
o
n
d
e
n
ts
, w
e
ig
h
te
d
 b
y 
co
n
fi
d
e
n
ce
Lowest priority
Priority 5
Priority 4
Priority 3
Priority 2
Highest priority
 60 
Comments on reasoning, clustered by respondents’ respective first 
priorities 
Basic research 
1. “Quantum technologies still need mainly research. Enabling technologies and 
demonstrations are important to verify or European progress.” 
2. “Quantum computing is still at an early stage and funding still needs to be given 
to basic research as well as studies on scalability.” 
3. “highest priority should be given the basic research with decreasing priority to 
more specialized approaches - there are only few candidate platforms so far and I 
think more basic research is required to find the optimum system” 
4. “With a time frame typically between 15-20 years- it is hard to ignore the 
purpose and contribution  of quantum research for basic science. Actual 
realization of a quantum computer will need a societal demand and push (e.g. 
warfare or railway problems in the case of conventional computers).” 
5. “Both basic research and enabling technologies should work together towards 
developing one or two credible platforms.” 
6. “I think the status of the field at this point is at the level where basic research will 
prove to be most beneficial. The reason being it the many uncertainties: We do 
not know what quantum computing is good for- which platform would serve best 
potential applications.” 
7. “We're near the tipping point now. Getting the enabling technologies in place with 
a focus to real solutions will become more and more of a priority.” 
8. “Basic research is the most important thing for public sector funding of quantum 
computing.  There are a number of basic questions about applications and 
platforms that still need to be addressed.  We also vitally need to build the 
enabling technologies for verifying and validating quantum computers.” 
9. “I think it is a bad strategy to focus on one- two or three candidates only. For 
example- I think basic research is mandatory in fields like decoherence and 
quantum-to-classical transition.” 
10. “It would be wrong to choose one candidate and shower money on it- as there is 
not a clear frontrunner at the moment. All approaches so far show pros and cons 
to different extents. By funding basic research as well as enabling technologies- 
we keep our eyes open to new possible implementations while pushing forward 
the state of the art of the available implementations.” 
11. “Too early to say which technology will provide the quantum computer. It could 
be that it has not yet even been considered.” 
12. “Many approaches are still needed” 
13. “Currently- Quantum technologies are not enough mature to focus on some 
specific platforms. As a consequence- a basic research about Quantum Computing 
and its applications is still necessary to face efficiently the second age of 
computing.” 
14. “All of those are applicable” 
15. “Basic research in the field plus a few experimental platforms for implementing 
quantum simulations are the most realistic options.” 
16. “It is necessary to secure the continuity of the basic research and development of 
several platforms in this field as there is lot to be understood and accomplished 
before the quantum computing can be realised in large scale. Individual 
companies can make selection between platforms. The enabling technologies are 
 61 
crucial for the development of scalability and production of the feasible 
technologies.” 
17. “At this stage it is too early to tell which platform will be feasible for building a 
quantum computer. Supporting too many platforms defocuses the available 
resources. Funding 2-3 (or 4) platforms seems reasonable.” 
18. “I think it's too early to choose- so fund the most promising platforms in a 
concentrated way. After the ramp-up- strategic decisions can be made on which 
efforts to strengthen and which to stop / slow down” 
19. “The field still needs some basic research.  Since an optimal candidate is not 
established yet- it would be prudent to keep funding several possible candidates. 
Then- it should 1st focus on some concrete result with the 1st generation 
quantum computer before moving onto optimization of the machine itself” 
20. “Quantum simulation is the next application” 
 
Enabling 
21. “EU must hold itself on a global market. Let's face it- we are lagging behind 
tremendously on China and the American Corporations. The FET is booting up 
sluggishly- and other continents are taking over many of our resources. We 
cannot hope to be leaders in quantum computing hardware. We must look a step 
further and deal with the step after that. We should focus on what we are still 
leading in- (Quantum Software- Quantum Sensing and Quantum Internet)- large 
scale quantum computers will be a side-effect of these investments.” 
22. “Enabling technologies are the key to long-term success- they should certainly be 
prioritised.” 
23. “We do not know which technology will be the best for full-scale quantum 
computer. So- researchers shall continue working on all promising technologies. 
Full-scale quantum computer should be much more powerful than adiabatic 
computing. So- full-scale quantum computer has higher priority. At the same 
time adiabatic computing is already reality and we can hope to get useful 
adiabatic computer faster than full-scale quantum computer.”  
24. “I believe the full-scale integrated hardware will be mostly implemented by the 
private sector and there are several fundamental problems to solve in enabling 
technologies such as materials science.” 
25. “Enabling technologies is the fastest way to realize quantum computer. Basic 
research is very important- but it will not directly lead to the development of a 
real quantum computer.”  
26. “it is time to try and consolidate promising approaches. this will require 
substantial investment so choices will need to be made. already- it is clear that 
some platforms are not going to make it into a large-scale device.”  
27. “To support small- medium- and large companies to develop quantum 
technologies products- and applications.” 
28. “The topic (computing) is still at its fundamental stage- where a public funding 
could be more convenient. However- I would more support a public funding for 
the generic building blocks (technologies- architecture- algorithms) which could 
have an impact on other topics like quantum sensors- instead of a pure public 
funding focusing only on the quantum computing goal” 
29. “Quantum technologies and enabling technologies still require a lot of research- 
we don't know the best candidate for a quantum computer.” 
 62 
30. “Enabling technologies should be made a priority- because there are many 
materials related problems that should be resolved before final choices on 
competing technologies can be made” 
31. “We need a broad basis for potential approaches rather than narrow focus on a 
few options. We also must avoid focus on trying to simply come up with better 
solutions to technologies that are currently being used - it will only ever be a 
minor improvement.” 
32. “Most present day options are not scalable and considerable funding is needed for 
further enabling work. There is no single viable candidate and multiple options 
need to be explored” 
33. “The main goal should always be the full scale quantum computer. However- 
since it is too early to say which platform might be the best- we should focus on 
two or three candidate platforms. Namely: Ion traps (on a chip), Solid state 
devices and of course photons as flying qubits” 
34. “Small-scale quantum technologies and quantum simulators may be achievable in 
the short term. A full-scale quantum computer is a long way off. Basic research is 
always important.” 
35. “Current available approaches in quantum computing are rather primitive and will 
not lead to anything really useful in the near future. Current quantum computing 
paradigms and mostly following successful digital classical concepts that are not 
suitable for scalability and usefulness in quantum computing applications. 
Therefore- I think that basic research is still needed- not to follow or develop 
current paradigms but to propose and design still highly disruptive novel concepts 
in quantum computing. In between- solutions and advances involving current 
quantum simulation and adiabatic computing efforts are necessary. But this will 
be sooner or later replaced by novel disruptive quantum computing paradigms. 
Which? We are working on that and I will not display here my thoughts- just hear 
my talks and read my papers. It is also time to discard or put some pressure on 
quantum platforms that are not showing a path towards scalability or are just 
following primitive concepts that may not work. Digital quantum computing with 
quantum error correction is a path to failure in the next decades unless there is a 
technological breakthrough that is not happening and- apparently- not being 
sought. Analog quantum computing- including adiabatic or topological methods- 
is just a current fashion that will be sooner or later overcome by novel disruptive 
quantum computing paradigms.” 
 
Medium term solutions such as quantum simulation and adiabatic quantum 
computing 
36. “First, is the most close today for application; second, is very important but 
usually forgotten by the political decider- who are not always the most clever 
ones.” 
37. “These seem to be the safest horses to bet on” 
38. “Adiabatic computers and quantum walk simulators  of complex Hamiltonians are 
almost ready for utilization. This will show some plausible outcome to the 
audience that is fatigued with never ending promise of general quantum 
superiority. Cold atoms and superconducting circuits are clearly two most 
promising technological solutions that require development. The basic research is 
needed to discover new useful applications- additional future computational 
platforms- and novel algorithms that outperform classical computation. The more 
spin-off technological applications will be produced the longer quantum 
computing will have a broad support of community. “ 
 63 
39. “It is futile to concentrate on overpolishing small-scale quantum devices or 
developing advanced quantum software for non-existent hardware. We should go 
full speed with developing \reachable\"" quantum technologies- such as adiabatic 
quantum optimization- quantum sensing and simulation. This will bring about 
technology advances and theoretical methods- which will eventually enable the 
realization of universal quantum computing."" 
40. “I do not think that we know already which technology will be able to function as 
a scalable quantum computer. Thus- public funding will need to support the most 
promising ideas- but should not be focused only on one technology- yet. The 
craziest idea at the moment might make it in the end.” 
 
Two or three credible candidate platforms 
41. “Two platforms are reasonable at this point as both have a reasonable chance of 
success.” 
42. “Basic research is always important- but for achieving QC- a balance will be 
needed - there is still quite a lot of ‘basic’ physics and engineering required to 
make this work. So this is not ‘basic’ in the sense of ‘curiosity-driven’ (good 
though that is) but also driven by the need to make something work."" 
43. “Currently leading edge technologies will enable the respective markets. A second 
generation of quantum computers will be more evolved and provide the 
necessary information to decide on the most promising architecture. Said 
architecture might be not even realized yet (see for instance the Majorana 
approach). All of that is based- and requires- fundamental research as a seed for 
new ideas, Adiabatic quantum computing is likely not going to be beneficial on 
the long run - neither for larger systems- nor for higher speeds- while it is too 
early to decide on a single platform yet.” 
44. “It makes no sense to put all eggs in one basket at this stage- but a few 
frontrunners worthy of pursuit are emerging” 
45. “A certain focus on a few platforms would lead to focus and critical technology 
and system oriented questions towards full-scale computers. This in turn will 
provide clear roadmap-oriented work and finally product definition. And 
potentially clear statements on the limitation of one technology over this other.” 
46. “Many platform has shown extremely promising results. A current scalable 
architectures start to be within reach of current technologies.” 
47. “Given the status of the development I see a combination of a focus on leading 
candidate platforms to gather with an enhancement of the basic research activity 
as the best route forward.” 
48. “At the moment it seems to me that there are 2 or 3 viable alternatives.  So I 
think it is wise to give each of them a chance.  In addition- even if only one of the 
three candidates succeeds- the spin-off technology that will emerge would 
certainly be viable. In addition- we should look at the long term goal which is a 
fully integrated quantum infrastructure (quantum internet if you will) and this 
would require a successful marriage of several hybrid infrastructures (optics- 
condensed matter- silicon perhaps).  It is therefore preferable to hedge ones bets 
on two or three good candidates in order to have the best gains in the long term.” 
49. “I think that the technology is at the point where credible quantum computers are 
possible- but it's not obvious which technologies will be the best.  Therefore 
supporting a range of options- and continuing enabling and basic research to 
produce more options is the best way forward.” 
 64 
50. “Focus is required to ensure the Flagship has any impact. Flagship should aim 
high- so for the large-scale quantum computing.” 
51. “The fundamental building blocks of a trapped-ion quantum computer have been 
demonstrated to an exceptional level. While further improvements are required 
such as further increased gate fidelities- it is now important to push towards full-
scale devices to bring sub-systems together and tackle the challenges that will 
undoubtedly be uncovered when scaling up. This is also the only way to remain 
competitive in an increasingly fast moving environment. Focusing on two or three 
credible platforms will allow for sufficient scope to encompass different promising 
approaches while providing the required focus to push ahead.” 
 
One chosen leading candidate platform 
52. “building a large scale quantum computer is the greatest challenge with the 
greatest benefits. Hence we should aim for it seriously in Europe. The funding 
reserved for quantum computing is not so large that it would allow for a serious 
development of several distinct platforms. Thus we should primarily invest in the 
most promising one. Obviously- a lot of enabling technologies and basic science 
need to be developed as well but the actual quantum computer should have the 
greatest weight.” 
53. “Europe is not strong enough to cope with 2 or 3 quantum platforms in parallel.” 
 
Other 
54. “It would be convenient to work on European initiatives of quantum basic 
infrastructure. European companies have to have quantum infrastructure to grow 
independently of non-European initiatives” 
 
 
Subquestion 7.3 
The median confidence in priorities was 80%.   
The median confidence in reasons was 80%. 
Most respondent’s expressed the same confidence in their priorities as they did in their 
reasons.
 65 
Question #8 European Public Funding II 
This question concerns the types of funding instruments which you consider useful for 
quantum computing, taking the ones currently used in Horizon 2020 as the starting 
point. 
Please also indicate other possibilities which you think would be appropriate for quantum 
computing, using the second column. 
Sub-question 8.1: Horizon 2020 instruments. Indicate you preferred distribution of 
funding among the following types of funding action, on a scale of 0 to 100%. 
Research & innovation actions (RIA) 
Innovation actions (IA) 
Coordination & support actions (CSA) 
SME instrument actions 
ERA-NET Cofund actions 
Precommercial procurement (PCP) & Public procurement of  
Innovative solutions (PPI) actions 
European Joint Programme (EJP) Cofund actions 
Other (please explain in second column) 
 
Sub-question 8.2: Other instruments. Please indicate any other funding instruments 
which you think would be suitable, such as those from national programmes or previous 
European programmes. 
 
Sub-question 8.3: Level of confidence. Please insert a number to indicate your level of 
confidence in your own answers to the questions on ""Horizon 2020 instruments"" and on 
""Other instruments"". (From 0=not confident at all to 100=extremely confident) 
Level of confidence in your preferred funding distribution among  
Horizon 2020 instruments 
Level of confidence in your indications of other instruments 
 
Motive 
The current FET Flagship model has, for the main phase, a large “core project” playing a 
leading role for the whole duration of the initiative and a set of “partnering projects” 
[SWD 283, 2014]. 
The detailed governance model for the main phase of the FET Flagship on Quantum 
Technology has not yet been finalised. We felt that it would be helpful to take existing 
instruments many of the participants would be familiar with as a starting point for the 
discussion. Moreover, the ramp-up phase for the FET Flagship on quantum technology is 
taking place under Horizon 2020, using its standard funding instruments, so the answers 
to sub-question 8.1 are directly applicable. Sub-question 8.2 then invites participants to 
extend their recommendations to other types of funding instruments. 
The types of actions used now are described in general Annex D of the 2016-17 
Horizon 2020 work programme [H2020annexes, 2017] 
 
 66 
Sub-question 8.1: Preferred distribution, based on H2020 instruments 
A preference for the more research-geared, knowledge-generating actions Research and 
Innovation Actions (RIA’s) was expressed, against the more development-geared, 
technology-generating Innovation Actions (IA’s). This is consistent with the answers for 
sub-question 7.1, where a priority for basic research was expressed. The IA’s were 
preferred over other actions, however. 
Rather few participants want to see a concentration on Coordination and Support 
Actions, which could be out of concern that it would dilute the funding for their preferred 
actions, or out of a belief that the community is already adequately served in this 
respect. Two contrasting comments were made about this (see comments 4. and 5. 
below).  
All the other instruments listed scored lower preferences. It is surprising, and perhaps 
disappointing, that this was true even of SME instruments, given that small start-ups are 
now appearing in quantum computing, especially in software. 
Relatively few respondents answered this question, only 66 out of the 101 who opened 
the question. 
 
 
 
                 Table  8.1 Funding instruments12 
 
          Instrument Mean Median IQR 
Research & innovation actions (RIA) 40.7% 40% 29%pts. 
Innovation actions (IA) 17.7% 19% 12%pts. 
Coordination & support actions (CSA) 8.9% 8% 7%pts. 
SME instrument actions 8.1% 10% 9%pts. 
ERA-NET Cofund actions 9.8% 9% 11%pts. 
Precommercial procurement (PCP) & 
Public procurement of Innovative 
solutions (PPI) actions 
5.4% 4% 9%pts. 
European Joint Programme (EJP) Cofund 
actions 
5.8% 5% 11%pts. 
Other 3.6% - - 
 
The call for proposals of the ramp-phase of the Quantum Technology Flagship was issued 
on 31 October 2017 and closed on 20th February 2018. The allocation of funding was: 
RIA 87.8%, ERA-NET 6.8% and CSA 5.4%, no other instruments were used. These 
figures refer to all branches of quantum technology. Of the 141 proposals received, only 
10 were for quantum computing systems but some of the 87 proposals received for 
fundamental science were orientated towards quantum computing. 
http://ec.europa.eu/research/participants/portal/desktop/en/opportunities/h2020/topics/
fetflag-03-2018.html 
 
 
 67 
 
 
Fig. 8.1 Preferred distribution of EU public funding, based on H2020 instruments 16 
|median   |mean      + individual responses, stacked vertically 
Other
European Joint 
Programme (EJP) Cofund 
actions
Precommercial 
procurement (PCP) & 
Public procurement of 
Innovative solutions 
(PPI) actions
ERA-NET Cofund actions
SME instrument actions
Coordination & support 
actions (CSA)
Innovation actions (IA)
Research & innovation 
actions (RIA)
[0,20%) [20%,40%) [40%,60%) [60%,80%) [80%,100%]
Respondent's preferred fraction of funding by funding instrument
 68 
Comments 
1. “Large demonstration programs as planned in the Quantum Flagship”. 
2. “Quantum research should still remain primarily as a curiosity driven program. “ 
3. “Focus should be on funding research- with some support for applications and 
commerce to enable creating links and bringing in new ideas for problems to look 
at.” 
4. “I have given a high score to CSA because a few overview projects- each quite 
small- could greatly improve the focus and impact of the Flagship. I don't really 
have an opinion on the PCP etc. actions- but- as the research progresses- 
involvement of industry and especially SMEs will be important” 
5. “Eliminate Administration and coordination spending within big European wide 
funding projects.  Researchers are perfectly capable of coordinating themselves.  
This is just a giant hole to waste public money in.  I am in favour of having the 
majority of funds be European wide but the current state of affairs of how these 
are coordinated and funded (with different countries putting different money and 
trying to get more out of the pot than what they put in) is detrimental.  Please 
make access to funding uniform and accessible throughout all European 
institutions regardless of which country they reside.” 
 
Sub-question 8.2: Other funding instruments 
Only 19 participants replied with ideas to this sub-question. The replies could be 
categorised into six groups, and one less easily categorised reply. 
 
Specific existing instruments not mentioned in 8.1 
1. “national programs- national networks- IP and STREPS” 
2. “National programs can be utilised but they should not be fully restricted to the 
QT Flagship roadmap. FET Proactive would be great instrument too.” 
3. “Academia is- to my knowledge- the ONLY sector where the idea of a Europe 
where people freely exchange ideas has worked 100%.  I would encourage that 
more and more funding be consolidated into European funds.  This would ensure 
a more uniform research network (lets not kid ourselves there is a large chasm 
between north and south in terms of cutting edge research)- free mobility of 
skilled workers and- if nothing- else would strengthen the European scientific 
community as a whole.  So more Marie Curies- more mobility grants- more joint 
EU projects involving several research and development institutions from across 
Europe and less concentration of capital in one or another country. “ “FET OPEN 
and Marie Curie networks” 
4. “Would like to see greater funding into FET Open as a mechanism for small scale 
and highly innovative programs. Too much emphasis on flagships- clusters- hubs 
and the like- soaking up large funds- restricting the number of players and 
limiting the options” 
5. “ The Flagship should be run like IARPA but without the monthly reporting. 
Consortia consisting of whoever is needed (universities- industry- government,...)  
targeting clear 5-year goals. The Flagship runs the risk of being divided into many 
small pieces covering many subjects- in which case it will not have the impact it 
could have and Europe will have missed a huge opportunity.” 
6. “The quantum hub structure in the UK could be an interesting model to consider 
in a varied form.” 
 
 69 
Large projects within the Flagship 
7. “Quantum Flagship which supports large demonstration projects” 
8. “Quantum Flagship to support large projects. National programs to support small 
/ SME-driven projects” 
 
Education and training actions 
9. “A specific education program on quantum technologies would be welcome in 
engineering schools” 
10. “Research training networks for education of the next generation scientists in 
quantum information.” 
11. “Research training;” 
 
Business-orientated actions 
12. “Venture and angel investment” 
13. “To foster shared initiatives between Research and Industry” 
 
Coordination and Support Actions 
14. “Networking programmes could help European institutions in creating suitable 
consortium to face this research challenge.” 
 
Basic research  
15. “quantum computing is still a research question at heart- and funding should be 
concentrated on developing the science and not trying to push unready 
technologies into commercialisation. 
16. “I think that basic research is mandatory in fields of many-body physics- 
decoherence and quantum-to-classical transition.”    
17. “Encourage basic research into quantum physics to look for new technologies. 
Regular grant schemes but with added funding. What I'll say is that quantum 
computing is still a research question at heart- and funding should be 
concentrated on developing the science and not trying to push unready 
technologies into commercialisation.” 
18. “The funding efforts of the flagship should include a true invitation to novel 
disruptive concepts- in theory and experiments- in quantum computing. I have 
not seen any EU funded personal (ERC or the like) or collaborative (Proactive or 
the like) projects that involve novel disruptive concepts in theory or experiments. 
Most earned EU grants are incremental or trivial horizontal advances of known 
previous misleading directions as is the case of digital quantum computing with 
error correction or simple advances of adiabatic or topological quantum 
computing paradigms. Support of truly risky novel concepts was never available 
or granted in the last years and decades. When these true advances are offered 
beyond the wording and are truly granted- quantum computing and quantum 
technologies will see the light of present and future.” 
 
General 
19. “Responsive mode call and research projects; fellowships.”
 70 
Question #9 External funding 
Please give your opinion about the funding priorities for quantum computing from other 
sources. 
Sub-question 9.1: Largest funding sources. What do you think should be the partitioning 
of funding for quantum computing over the next 20 years, excluding European public 
funding? (Your answers will be normalized to 100% total) 
Civil private sector 
Research institutions (non-publicly funded) 
Defence (non-publicly funded) 
Donations 
Venture capital 
National governments 
Other (please indicate after ""Submit"") 
 
Sub-question 9.2: Private sector. Please indicate which quantum computing hardware 
you believe the private sector will give priority to. If your rationale differs from that 
suggested, use the textbox to explain it. 
Basic research, e.g. since it is premature to move ahead with technology 
development and the attempts being made to do so are misguided. 
Enabling technologies, e.g. since they would increase the available options for a full-
scale quantum computer. 
Interim solutions, such as quantum simulation and adiabatic computing, e.g. since 
they would have a good chance of being useful in the medium term. 
Two or three credible candidate platforms, with an aim to produce full-scale 
computers. 
One chosen leading candidate platform, e.g. since only by focusing all available 
resources is there a reasonable chance of success. 
Other (please explain in the textbox after submitting). 
Sub-question 9.3: Non EU-institutional public funding. Please indicate which quantum 
computing hardware you believe the public sector, excluding the EU institutions, will give 
priority to If your rationale differs from that suggested, use the text box to explain it. 
Basic research, e.g. since it is premature to move ahead with technology 
development and the attempts being made to do so are misguided. 
Enabling technologies, e.g. since they would increase the available options for a full-
scale quantum computer. 
Interim solutions, such as quantum simulation and adiabatic computing, e.g. since 
they would have a good chance of being useful in the medium term. 
Two or three credible candidate platforms, with an aim to produce full-scale 
computers. 
One chosen leading candidate platform, e.g. since only by focusing all available 
resources is there a reasonable chance of success. 
Other (please explain in the textbox after submitting). 
 
Motive 
We asked this question because we realised that EU funding was part of a wider financial 
system which could be used for quantum computing research and technology 
development.  
 71 
Note that the first sub-question intentionally asked the participants to express their own 
preference, while the second and third concerned their assessment of what others would 
do. 
 
Sub-question 9.1: Preferred partitioning of non-EU-public funding 
The replies show a fairly low level of consensus, but overall a preference for the largest 
share to come from national governments, and the next largest from the civil private 
sector and non-public research institutions. Most also would like to see substantial 
contributions from venture capitalists and the private defence industry.  
The desire to see a substantial fraction of the investment coming from the private sector 
is not compatible with the preference for basic research expressed in earlier questions, 
and suggests a lack of realism in the aspirations of the community.  
Only 71 people replied to the question out of the 102 who opened it. 
 
Table 9.1 Preferred partitioning of non-EU-public funding13 
 
Funding source Mean Median IQR 
Civil private sector 18.4% 17% 16%pts. 
Research institutions (non-publicly funded) 19.1% 17% 12%pts. 
Defence (non-publicly funded) 10.9% 10% 12%pts. 
Donations 5.2% 5%  9%pts. 
Venture capital 13.0% 10% 15%pts. 
National governments 31.4% 30% 22%pts. 
Other 2.1% - - 
 72 
 
 
Fig. 9.1 Preferred partitioning of funding, other than from EU public sources 17 
|median   |mean      + individual responses, stacked vertically 
 
Other
National governments
Venture capital
Donations
Defence (non-publicly 
funded)
Research institutions 
(non-publicly funded)
Civil private sector
[0,20%) [20%,40%) [40%,60%) [60%,80%) [80%,100%]
Respondent's preferred partitioning of funding
 73 
Sub-question 9.2: Expected priorities of private–sector for QC hardware 
The expectations of many of the participants regarding the funding priorities of the 
private sector are even more surprising. 40% of respondents thought the private sector 
would give top priority to basic research, although their motive for doing so is unclear.  
In some respects, the responses appear to be contrary to what is already visible. Most 
participants expect interim solutions based on quantum simulation, adiabatic computing 
etc. to be only third or second priority but the only commercial device now available falls 
into this category. It is widely known that Google have committed heavily to one 
platform (superconducting qubits) as have Microsoft (topological qubits) but few 
participants expect the private sector to commit to a single platform.  It is possible that 
this is a matter of interpretation i.e. that the private sector as a whole will not commit to 
just one platform, diversity will come about from different companies favouring different 
platforms: one comment (7.) was received to this effect. 
Comments 
1.  “Large scale industry / academia projects (up to 5 years) which demonstrate the 
state of the art.” 
2. “I have given the same answers as for European funding as this is what the 
private sector ‘should’ fund. It also makes the most long-term sense for the 
sector as a whole. However I suspect that in reality they will pick and choose 
short-term winners."" 
3. “Private sector will be in it for financial benefits and hence should try to build the 
quantum computer- enabling technologies- and intermediate solutions.” 
4. “Private sector will prefer fast solutions.” 
5. “Based on my experience in private sector- most companies will prefer near term 
deliverables.” 
6. “I think basic research is mandatory in fields like many-body physics- 
decoherence and quantum-to-classical transition. “ 
7. “Question is difficult to understand. Each company will choose one option- but 
that option may differ between different companies (therefore between all of 
them 'industry' will have chosen 2-3 options. Answers are not mutually exclusive- 
companies will choose 1 technology- but look for quick payback of investment. 
There will be a trade-off between how long companies are prepared to wait- and 
the size of the prize.” 
8. “important to have research and industry working together.” 
9. “I'd hope focus is on interim solutions. Likely and sadly some will focus on specific 
platforms- but hopefully keep options open instead of choosing too quickly. 
Unlikely they see basic research as relevant and enabling technologies may also 
be overlooked.” 
10. “Unfortunately this is what i believe they will fund.  I stress that this is NOT what 
I want them to fund.” 
 74 
 
 
 
Fig. 9.2 Expected priorities of private–sector  18   
          100 people replied to the sub-question. 
0%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
Basic research Two or three
credible
candidate
platforms
Medium term
(quantum
simulation,
adiabatic
computing etc.)
Enabling
technologies
One leading
candidate
platform
Other
Fr
ac
ti
o
n
 o
f 
re
sp
o
n
d
e
n
ts
 
Lowest priority
Priority 5
Priority 4
Priority 3
Priority 2
Highest priority
 75 
Sub-question 9.3: Expected priorities of non EU-institutional public funding 
The expected distribution is in line with the participants earlier expressed preferences 
i.e. many respondents are optimistic that public authorities, other than the European 
Commission and other EU institutions, will agree with their own priority for basic 
research. Enabling technologies are expected to be strongly supported, as second 
priority.   
Of the existing European national programmes, the UK programme is focused on a single 
chosen platform (trapped ion with photonic interconnect), while the Netherlands QuTech 
programme is much less focused at the moment, with work on superconducting qubits, 
electron spin qubits in quantum dots, spin qubits in diamond, topological qubits and 
enabling technologies, including basic research. Moreover, most national funding in the 
EU at present is not grouped into dedicated quantum technology programmes and many 
different approaches are financed, each on a smaller scale. 
 
Comments 
1. “It is usual to suggest public funding for things that the private sector can't or 
won't fund. However- in the case of Quantum- this is relatively close-to-market- 
and clearly application-oriented- so in terms of what to fund- the interests are the 
same- but with a clear willingness from the public to fund more cutting-edge and 
risky approaches.” 
2. “Public sector excluding EU has relatively small projects and hence is suited best 
for basic research and enabling technologies.” 
3. “Public funding should be allocated to offset the biases inherent in the private 
sector.” 
4. “Public and Private priorities are completely different” 
5. “important to have research and industry working together.” 
6. “Hope they see the use of interim solutions and enabling technologies towards 
future solutions that still remain very unclear.” 
7. “Again- unfortunately- I see the public sector of governments moving along the 
same lines as the private sector (short to medium term goals).  What I would like 
is for the public sector to fund precisely the things the private sector does not, 
that is focus more on funding fundamental research- or research whose output is 
more on the long term.  Private and Public research should go in tandem...  The 
public always funded the riskier more blue sky research....and it should because 
those that work eventually get picked up by the private sector.” 
8. “Public sector funding should be more focused towards basic research as this is 
less likely to be funded by the private sector” 
 76 
 
Fig. 9.3 Expected priorities of non EU-institutional public funding19 
          100 people replied to the sub-question. 
0%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
Basic research Two or three
credible
candidate
platforms
Enabling
technologies
Medium term
(quantum
simulation,
adiabatic
computing etc.)
One leading
candidate
platform
Other
Fr
ac
ti
o
n
 o
f 
re
sp
o
n
d
e
n
ts
 
Lowest priority
Priority 5
Priority 4
Priority 3
Priority 2
Highest priority
 77 
Question #10 Quantum computing software and hardware 
Please indicate your opinion on how the quantum computing software and hardware 
might evolve 
Sub-question 10.1: Software and hardware development. Consider the following 
statements about the relationship of software and hardware for quantum computing and 
check those that you think are likely to be true: 
Quantum computing software and hardware will always need to be developed 
together. 
A quantum software industry will emerge independently from hardware developers. 
Quantum computer programming will always require major specific competences 
distinct from conventional programming. 
A general purpose language will emerge, suitable for running any task on a quantum 
computer. 
Quantum computers will always run specific algorithms only. 
Software and hardware development will reinforce each other's development. 
Other (please explain in the textbox after ""Submit""). 
 
Sub-question 10.2: Explanation. What might the future of quantum computer software 
and hardware development be? 
 
Sub-question 10.3: Level of confidence. Please indicate your level of confidence in your 
own answers to the questions on the future of the quantum computing 
hardware/software relationship. (From 0=not confident at all to 100=extremely 
confident) 
Level of confidence for ""Software and hardware development"" 
Level of confidence for your ""Explanation"" 
 
Motive 
Since the introduction of quantum computing requires a re-examination of fundamental 
computer science questions, it is necessary to re-think the relationship between 
hardware and software. Because many aspects of the relationship between the two are 
taken for granted in classical information technology, there is a risk of assuming without 
question that they will be the same for quantum computing. Question #10 invites 
participants to break with such habitual thinking. 
 
Sub-question 10.1: Specific aspects of the hardware/software relationship 
It was possible to select more than one statement, and propose other statements. 
Responses were received from 76 participants.  
 
 
 
 
 
 
 
 
 
 78 
                                    Table 10.1 Hardware/software relationship14 
Statement 
Fraction of 
participants  
agreeing with 
statement 
Fraction 
agreeing, 
weighted by 
expressed 
confidence8 
Quantum computing hardware and 
software will always need to be developed 
together 
49% 49% 
Quantum software industry will emerge 
independently from hardware developers 
45% 46% 
Quantum computer programming will 
always require major specific competences 
distinct from conventional programming 
66% 60% 
A general purpose language will emerge, 
suitable for running any task on a 
quantum computer 
39% 43% 
Quantum computers will always run 
specific algorithms only 
32% 34% 
Software and hardware development will 
reinforce each other’s development 
80% 70% 
There was strongest agreement for the last question: “Software and hardware 
development will reinforce each other’s development”. For all other questions there was 
little consensus, which lends support to the view that these issues are indeed open, and 
need to be further debated. For most questions, weighting by the participants’ expressed 
confidence did not change the balance very much, i.e. positive views were as strongly 
held as negative ones.  
Other statements proposed: 
1. “Initially the two will develop jointly reinforce each other- eventually the 
competencies will spread to separate industries. Jointly with AI developed 
application. No general purpose language will emerge- but perhaps a compiling 
platform.” 
2. “Well written software is never hardware independent. We just agreed on writing 
software in a particular way that the compilers and interpreters manage to 
translate efficiently onto a standardised hardware architecture. This may or may 
not be the way for QC. Likely QC will not have a programming language as 
automated control can do a lot better than humans and maybe we can set very 
high level targets (as current computers already head towards as well - see ‘web 
programming’). But QC will not be like a traditional computer in any sense (alone 
from the fact the even the gate model is more like an analog computer instead of 
discrete logic gates). ” 
 
                                           
(8) The responses where the participant did not agree were taken into account:  
     Fraction, weighted by confidence =   50% +  
  ½(Sum of % confidences where box checked -Sum of % confidences where box not checked)/no of responses 
 79 
Sub-question 10.2: Explanations 
This sub-question collects the comments given by the respondents after question 10.1 
on the specific aspects of the hardware/software relationship. They are very useful both 
for a better understanding of the results of question 10.1 and for a more general view on 
the envisaged future of Quantum Computing. The comments address three specific 
aspects: 1) importance of the hardware development; 2) mutual dependence or 
independence between hardware and software; 3) architecture of a Quantum Computer 
and its integration in classical environments. 
Hardware development is still seen as a fundamental step. Only limited platforms are 
now available, and no single one is perceived as the ""winning"" one. Good representatives 
of such reflections are comments number 5 and 26 with comment 21 as a good 
synthesis, while comment 16 states that it is premature to make any prevision about the 
mutual development of quantum hardware and software. 
Since the hardware platforms now available are limited, the debate on the mutual 
independence or dependence between hardware and software is open. This is a crucial 
point, seen in the choice of big companies, like Atos, to start the development of 
quantum software based on simulators while waiting for the construction of a hardware 
platform. Comments in favour of the independence between hardware and software are 
11, 19, 14, 15, 24. Comment 25 goes further by advocating the development of a new 
""applied computer science"" discipline. Comment 5 expresses some doubts about the 
possibility of adapting current quantum software to a future hardware platform, while 
comments 7, 18 and 26 are for a strong dependence between quantum hardware and 
software. 
A specific set of comments deals with the integration of the quantum computer, when 
realised, in classical environments. So hybrid environments both for hardware and 
software (for example comment 8) are envisaged. The comments addressing this point 
are: 3, 10, 13 and, with a stronger position, 17. Comment 4 is interesting for the 
complete (long-term) change in perspective between quantum and classical 
architectures.  
Finally, comments 2, 6 and 20 link the progress of artificial intelligence, using the 
quantum computer, to the production of software for it. Comments 22 and 23 are 
generic comments, possibly made while reading the others’ comments. 
Comments 
1. “Due to the disruptive character of the field- this will grow exponentially and 
needs to grow together especially during the early stages.” 
2. “Moore's law for quantum computing (Leo's law). Software will start from 100% 
human developed to about 65% AI developed and 35% human developed by 
2035.” 
3. “Soft and Hardware development will get integrated into traditional 
environments. Eventually- an application programmer does not have to care what 
will run on quantum or classical hardware.” 
4. “It is possible that in the far future (>70 y)- the technology that we develop for 
the quantum computer will become so energy efficient that power-consumption-
wise also classical logic is economical to be run on a quantum computer. Thus it 
may be that classical and quantum computing will merge and hence quantum 
computers will not be limited only to a small set of algorithms. This obviously 
needs also a new computing paradigm which may be found. A general purpose 
language would be likely to emerge here.”  
5. “The main current problem is development of quantum hardware. When quantum 
hardware is developed it will be not so difficult to write appropriate quantum 
 80 
software. Quantum software already exists. It is not clear to me whether this 
software will well fit future quantum hardware. “ 
6. “Probably- some form of quantum algorithms designed by quantum machines” 
7. “Selecting efficient algorithms + hardware always depends on understanding the 
limitations and strengths of the hardware. These decisions could eventually be 
made by software however. “ 
8. “Hybrid algorithms that leverage the strong points of each.” 
9. “Compilers will be needed in the short term to execute quantum algorithms 
beyond a few dozen gates.  Also this will be needed to validate existing quantum 
algorithms- which are likely to have minor bugs in them that will not become 
apparent until testing.” 
10. “Interfaces between quantum sensors and classical computers. the problem of 
decoherence will always be there.”  
11. “Since the operating principles of a quantum computer are known the software 
development can proceed.” 
12. “Quantum algorithms to perform better analysis of data” 
13. “Hybrid classical-quantum computers could be more than an intermediate step- it 
could be a good idea to conceive both together- and use best of each. The target 
is not to replace everything by quantum technologies- but to use it when classical 
reach a limit- and complement it. Also- there are probably brand new way of 
proceeding not discovered yet- where in this case- it should evolve 
independently.” 
14. “A quantum software industry will emerge independently from hardware 
developers. Quantum computer programming will always require major specific 
competences distinct from conventional programming. A general purpose 
language will emerge- suitable for running any task on a quantum computer. 
Software and hardware development will reinforce each other's development.” 
15. “Quantum hardware might evolve independently from quantum software. 
Quantum software could be created in an independent way from the specific 
quantum hardware. “ 
16. “far too early to predict.” 
17. “hardware: trapped ions / superconducting qubits- maybe hybrid systems 
(memory in one system- processing in the other) software: at the moment most 
people think in terms of the circuit model with gate operations = sequence of 
qubit manipulation operations- however- I think we will develop a more general 
system similar to a von Neumann architecture for classical computers- maybe 
even with control programs in quantum memory” 
18. “They will develop together. “ 
19. “Initially hardware and software will proceed together but general programming 
methods will emerge with time- and software development becomes 
independent.” 
20. “Control- learning and AI. Humans largely only set the target to be achieved- in 
particular if quantum algorithms are one huge unitary operator. This is not that 
different from how most people program traditional computers. Maybe we need to 
invent a new narrative what the machine is doing- different from the one used for 
traditional computers. Maybe- hopefully? we don't need that narrative at all 
anymore.” 
 81 
21. “In the first decade the development of hardware will be the most important and 
time/money consuming effort. When hardware becomes available- software will 
get more important. In fact a bit the same as classical IT developments.” 
22. “I have no clue but i am excited for it” 
23. “These are very over ambitious statements” 
24. “Retargettable compilers for quantum software based on flexible intermediate 
representations of quantum algorithms.” 
25. “To make hardware successful a few select hardware platforms need large 
support. Hardware for a quantum internet needs to look beyond QKD: building 
faster QKD systems is a problem of enhancing a product that is already 
commercially available which is not the objective of a flagship. Quantum software 
development urgently needs the development of applied quantum computer 
science- with a radical shift in mindset from the theoretical approach to quantum 
computer science used now.” 
26. “In the next decades- it is impossible to foresee an independent development of 
quantum software without involving quantum computing platform specification. 
To think the opposite is equivalent to superstring theory. Wonderful universal 
solutions to problems we do not have- we cannot test- and nobody else cares 
beyond the elite associated scientific networks. The difference is crucial- 
superstring theory is an intellectual endeavour- while quantum computing is 
meant to generate a technology that should provide solutions to practical 
problems.” 
  
 82 
Question #11 Quantum computation’s future place 
Please give your opinion on the place of quantum computing in the future computational 
landscape 
 
Sub-question 11.1: Future computing scenarios. What do you think the place of quantum 
computing will be if and when it becomes established? (Chose the one scenario you think 
is the most likely to be true) 
Quantum computing will be the only form of computation in the future.  
Quantum computing will coexist with other computational methods, but will be the 
most important. 
Quantum computing will be only one among a number of coexisting computational 
methods of similar importance. 
Quantum computing will be important only in a limited number of applications. 
Quantum computing will be abandoned, replaced by a new paradigm. 
Submit 
 
Sub-question 11.2: Potential synergies. Which areas could develop in tandem with 
quantum computing, to their mutual benefit? Indicate with a numeric value your 
assessment of potential synergies. (From 0=no synergies at all to 100=extremely 
important synergies) 
Nanotechnology 
Electronics 
Materials science 
Chemistry 
Engineering 
Other (please add in the textbox after ""Submit"") 
 
Sub-question 11.3: Explanation. What might the future computing landscape be? 
 
Sub-question 11.4: Level of confidence. What is your level of confidence in your own 
answer to the question of the three previous columns? (From 0=not confident at all to 
100=extremely confident) 
Level of confidence for ""Future computing scenarios"" 
Level of confidence for ""Synergies"" 
Level of confidence in your own ""Explanation"" 
 
Motive 
This question was motivated by a desire to obtain foresight regarding the significance of 
quantum computing for EU information technology policy and research and technology 
development policy. How will quantum computing fit into these bigger pictures? 
 
 83 
Sub-question 11.1: Most likely scenario 
82 responses were received. 
                                                   
             Table 11.1 Scenarios for quantum computing’s future place15 
Statement 
Fraction 
selecting 
Fraction, 
weighted by 
expressed 
confidence 
Quantum computing will be the only form of 
computation in the future. 
0% 0% 
Quantum computing will coexist with other 
computational methods- but will be the most 
important. 
23% 27% 
Quantum computing will be only one among a 
number of coexisting computational methods of 
similar importance. 
56% 55% 
Quantum computing will be important only in a 
limited number of applications. 
21% 18% 
Quantum computing will be abandoned- replaced 
by a new paradigm. 
0% 0% 
 
This question was one of the few were there was any complete consensus: which was 
that neither the extremely optimistic nor the extremely pessimistic scenarios were likely. 
The results fall into an approximately symmetric triangular distribution between the 
three intermediate scenarios. Weighting by the participants’ expressed confidence made 
little difference to the overall picture.
 84 
Sub-question 11.2: Which areas could develop in tandem with quantum 
computing, to their mutual benefit? 
 
The majority of respondents perceive synergy in all categories, especially 
nanotechnology, electronics and materials science. It is surprising that the score for 
chemistry was somewhat lower, given that quantum simulation was seen as a promising 
application. 
 
These results change little if the respondents’ confidence is taken into consideration, nor 
are there significant differences between mean and median answers. For all categories, 
some sceptical opinions were expressed, but were in a clear minority. 
 
 
Other areas 
Only one suggestion was made for synergy with other areas: quantum coherence may 
help in the understanding of biological processes. 
 
 
Comments 
1. “Material science will be important in optimising the materials used for the 
technology. Engineering will be important much later when manufacturing is 
volume” 
2. “Physics- Biology- Material Science- Information Theory” 
3. “Some arbitrary numbers... of course they could all benefit. Who knows...” 
4. “Instrumentation! communication!” 
 
Two participants also said they found sub-question 11.2 hard to understand, but did 
answer it. 
 
 
    Table 11.2 Areas with synergy with quantum computing16 
 
Technology area No. of 
respondents 
Mean Median IQR 
Nanotechnology 75 76.4% 80% 40%pts. 
Electronics 77 70.9% 75% 40%pts. 
Materials science 77 75.2% 80% 25%pts. 
Chemistry 77 61.9% 60% 40%pts. 
Engineering 77 69.9% 70% 40%pts. 
Other   4 37.5% 25%    - 
 85 
 
Fig. 11.2 Areas which could develop in tandem with quantum computing, to their 
mutual benefit20 
|median   |mean      ⁞ weighted mean    + individual responses, stacked vertically 
Other
Engineering
Chemistry
Materials science
Electronics
Nanotechnology
[0,20%) [20%,40%) [40%,60%) [60%,80%) [80%,100%]
Respondent's assessment of potential synergies
 86 
Sub-question 11.3: Future computing landscape 
 
Although 96 participants opened the question, only 32 provided narrative answers. 
Those answers are clustered below by the respondents’ respective answer to Q.11.1. 
 
Respondents who think quantum computing will coexist with other computational 
methods, but will be the most important: 
1. “We are only scratching the surface on possible applications.” 
2. “A mix of CPU- GPU's- QPU's and AI solutions.” 
3. “On the short-medium term- quantum computing and classical computing will 
both be used for dedicated applications. With future developments- QC will take 
more and more tasks dedicated to classical computation.” 
4. “Eventually- quantum computers (or the technology being developed for quantum 
computers) will likely become the most important computational tool due to its 
fundamentally more powerful algorithms and need to reach extreme regimes of 
physical systems.” 
5. “very complex and varying.” 
6. “New paradigm in Data processing and management.” 
7. “going through artificial intelligent using quantum technology.” 
8. “Merging Quantum Technologies with Artificial Intelligence.“ 
9. “Quantum computers take care of the high end of computing tasks- but there is 
need for various other solutions at the low end.” 
10. “Fully functioning quantum computers would be owned by a handful of computing 
companies around the world with other key industries renting computing time on 
the machines.“ 
11. “I have no crystal ball. Can anyone seriously answer this? We still need to 
investigate multiple options- from which something clearer will emerge.” 
12. “People will own classical devices- which outsource problems to quantum 
computers in a cloud whenever this might be advantageous.” 
 
Respondents who think quantum computing will be only one among a number of 
coexisting computational methods of similar importance: 
1. “A mixture of classical- quantum and cognitive.” 
2. “For long time ahead quantum computers will be used for specific problems only- 
but gradually they will grab larger and larger portion among computing devices.“ 
3. “The coverage area of quantum computing will grow with algorithms and 
hardware development. The breadth of problems will be ranging from 
optimization of multiple processes in technology and society to the simulation of 
complex Hamiltonians and novel materials design. At the same time you don’t 
want to use a complex quantum machinery where a simple conventional 
computer will suffice.” 
4. “We will see quantum computing emerging as a cloud resource sitting alongside 
other diverse computing platforms that are used for different workloads.” 
5. “I think that the problem of decoherence (quantum-to-classical transition) will be 
always present- making a lot of difficulties in the practical implementation of 
many quantum computing ideas.”  
 87 
6. “hybrid world with classical and quantum computing- together with other 
technologies. At the same time- quantum computing has to think differently- and 
not just reproducing the same 'old' logic and (only) running it quickly.” 
7. “Quantum computing cloud services with emerging standards for programming 
interfaces.” 
8. “An interplay between classical and quantum computing- each playing its 
strengths.” 
9. “quantum computers will be larger centralized machines (due to isolation from 
environment and complexity of control); we will still carry around classical 
computers for standard applications (smartphone- ...).” 
10. “A mixture between a number of coexisting paradigms- within this quantum 
computing will be used to solve special tasks.” 
11. “Lots of hills that have different heights depending on who is looking at them.”  
12. “An inhomogeneous system comprising quantum computers- classical computers- 
high performance computing systems- and other beyond von Neumann 
machines.” 
13. “Quantum computing will coexist forever with classical computing paradigms. 
There is no necessity for fully and purely quantum facilities. The fact that any 
quantum computing effort has to be transformed in classical information for being 
useful by macroscopic human brains is a rationale of the above statement.” 
 
Respondents who thought quantum computing will be important only in a limited number 
of applications”  
1. “Quantum and classical computing platforms will coexist on one platform.” 
2. “It will probably resemble the current landscape- with the addition of very task-
specific machines.” 
3. “Conventional computers will keep going strong- but quantum machines will shine 
in certain specific areas.” 
4. “Classical will be dominant and quantum for specialised applications.” 
5. “I would see quantum computing power as an available on-demand resource in 
the cloud- not available locally ‘at home’ "" 
6. “Conventional computing will keep its position as the main method of information 
processing. Quantum computing will be used in specific applications- which could 
be vast and important.“ 
7. “Replacing super computer clusters in Research and Defence environment and 
being used for companies doing a large amount of data processing”.
 88 
Question #12 Quantum computing physical platforms 
Please give your assessment of the possible physical platforms that can be used to build 
a quantum computer, and evaluate how Europe is positioned in each of them with 
respect to international competitors. 
Superconducting qubits 
Trapped ions 
Photonics 
Semiconductor qubits 
Topological qubits 
Other (please indicate after ""submit"") 
Sub-question 12.1: Intrinsic strength. Which are the most promising platforms on which 
to build a large-scale quantum computer? (From 0=not promising at all to 
100=extremely promising) 
Sub-question 12.2: European positioning. Please assess the European potential for 
developing these platforms into a fully operational machine give the capabilities of 
European universities, research centres and industry. 
Sub-question 12.3: Self-assessment. What would you consider to be your own level of 
expertise in each of the following areas? (From 0=very low to 100=very high) 
 
Motive 
This is the most important purely technological strategic question for quantum 
computing research and development and is motivated especially by its importance for 
EU RTD policy, including the FET flagship. Which platforms emerge as superior and which 
fall out of favour will determine a host of issues for the quantum computing roadmap, 
especially with regard to the enabling technologies required to support a future quantum 
computing industry.  The question also has ramifications for devices such as memories 
and interconnects, which might be applicable in communications, sensing or timing as 
well as in computation.  
 
Sub-question 12.1: quantum computing physical platforms: intrinsic strength 
The highest median score was for superconducting qubits (80), followed by trapped ions, 
phonics and semiconducting qubits (50) with topological qubits somewhat lower (40).  
Other technologies mentioned were nitrogen vacancy (NV) centres in diamond                   
(4 respondents) and cold atoms (3 respondents) and hybrids of superconducting and 
optical/photonic technique (1 respondent). Advocates of devices using NV centres 
pointed to them having advantages for a quantum internet. Cold atom advocates 
mentioned optical lattices for simulation, and Rydberg atoms. 
 
The interquartile ranges are large and each of the five best established platforms has 
supporters and sceptics. The results do not constitute a strong case for committing for or 
against any of them now. They are consistent with the earlier expressed view that basic 
research should continue to be funded. 
The results are significant for the FET Flagship, for which it will be necessary to decide 
whether or not to focus on one or more approaches, and if so, when. 
 89 
 
Fig. 12.1 Quantum computing physical platforms: intrinsic strength 21 
|median   |mean      ⁞ weighted mean    + individual responses, stacked vertically 
 
 
Other
Topological qubits
Semiconductor qubits
Photonics
Trapped ions
Superconducting qubits
[0,20%) [20%,40%) [40%,60%) [60%,80%) [80%,100%]
Respondent's assessment of promise of the technology platform
 90 
                    Table 12.1 Potential of technology platforms17 
Platform No. of 
responses 
Mean Median IQR 
Superconducting 
qubits 
76    73.8%     80% 39%pts. 
Trapped ions 71    53.7%     50% 50%pts. 
Photonics 70    42.8%     50% 40%pts. 
Semiconductor 
qubits 
71    56.2%     50% 40%pts. 
Topological 
qubits 
69    40.8%     40% 40%pts. 
Other 10    54.5%     55% 71%pts. 
 
Sub-question 12.2: Quantum computing physical platforms: European potential 
These results broadly follow the intrinsic strengths (see Figure 12.1.2), but with the lead 
of superconducting qubits over trapped ions much less marked in Europe, a result which 
reflects the strong activity in superconducting approaches in North America. 
Some of the participants who had replied to 12.1 on intrinsic strengths did not reply to 
12.2--mostly people based outside Europe, as would be expected. 
 
                                 Table 12.2 European potential18 
Platform No. of 
responses 
Mean Median IQR 
Superconducting 
qubits 
68    66.9%     70% 34%pts. 
Trapped ions 63    61.%     60% 40%pts. 
Photonics 63    51.9%     50% 55%pts. 
Semiconductor 
qubits 
63    52.1%     50% 40%pts. 
Topological qubits 60    45.0%     50% 50%pts. 
Other 6    55.8%     58%     -   
 
 
 
 
 
 91 
 
 
Fig. 12.2 Quantum computing physical platforms: European potential22 
|median   |mean      ⁞ weighted mean    + individual responses, stacked vertically 
  
Other
Topological qubits
Semiconductor qubits
Photonics
Trapped ions
Superconducting qubits
[0,20%) [20%,40%) [40%,60%) [60%,80%) [80%,100%]
Respondent's assessment of European potential for developing various platforms into a fully 
operational machine
 92 
 
Fig. 12.1.2 Quantum computing physical platforms intrinsic strength versus                          
European potential.23 
Circles : median values.  Vertical and horizontal fences: quartiles. 
Spearman’s rank correlation coefficient ρ = 0.74 
 
Comments 
1. “Superconducting qubits are very promising. However- there is little 
infrastructure at the industrial level to foresee quick and costless applications in a 
near future. On the superconducting side- Europe benefits from several assets 
(from wafer processing to control electronics) but it is lacking integration.” 
2. “I don't have the expertise to say- but the USA appears to be ahead in 
superconducting.” 
3. “Superconducting quantum computers are currently the only ones that have been 
demonstrated to be truly scalable and Europe has many strong laboratories in 
this field. Thus Europe has great potential in building such a quantum computer.” 
4. “Having serious efforts in this area around the world makes also chances of 
European success higher. Europe has also strengths in trapped ions and 
semiconducting qubits (especially in spins in silicon) which have a reasonable 
chance of succeeding but need much more basic development.” 
5. “European labs are leaders in superconducting qubits- trapped ions- and 
(depending on whether ‘European’ now includes the UK)- photonics. So they're as 
likely to build quantum computers as any place."" 
%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
% 20% 40% 60% 80% 100%
In
tr
in
si
c 
st
re
n
gt
h
European potential
Superconducting qubits
Other
Trapped ions
Semiconductor qubits
Photonics
Topological qubits
 93 
6. “Superconducting qubits are promising- but maybe not for Europe alone. 
Semiconductor qubits- trapped ions and photonics may be better for Europe.” 
7. “Europe has numerous excellent and large-scale nano fabrication facilities which 
would be ideal for the development of quantum computing hardware- as well as 
deep expertise in the design- testing and measurement of prototype systems.“ 
8. “Europe including UK could build such a computer. However it needs a greater 
effort in basic research- whether Microsoft’s investments yield a viable technology 
is an open question.“ 
9. “European businesses and research is not set up at present in a way to be able to 
build the large scale quantum devices needed.  The one area I am more confident 
in is topological quantum computing because of the investments Microsoft has 
made in groups in Delft and Copenhagen.  But apart from Europe's expertise in 
photonics- I am not convinced that the infrastructure is in place to build quantum 
computers in Europe at present (especially in a post-Brexit environment).” 
10. “I guess- topological qubits are supposed to be e.g. majorana states in solid 
state. I think in any of these systems (trapped ion or superconducting qubits) we 
will need to use topological quantum error correction.”
 94 
Question #13 European Strengths 
Is there a specific aspect of quantum computing for which Europe seems to enjoy some 
competitive advantages in the international landscape? 
Sub-question 13.1: Hardware and software. In which field is Europe better positioned? 
(From 0=extremely weak with respect to competitors to 100=very strong in the global 
landscape) 
Processors 
Memories 
Communications and interconnect 
Fundamental algorithms 
Software for quantum simulations 
Firmware for hybrid classical-quantum hardware components 
User interfaces 
Other (please indicate after ""Submit"") 
 
Sub-question 13.2: Level of confidence. Which is your level of confidence in each of the 
answers to 13.1? (From 0=not confident at all to 100=extremely confident) 
Sub-question 13.3: Please indicate other quantum computing areas in which Europe 
might have a competitive advantage or conversely structural weaknesses. 
 
Motive 
This question is also intended to give useful information for designing research and 
technology programmes. The results could be used to develop a programme based on 
playing to strengths, or for one which sought to correct weaknesses. No indication was 
made about which approach will be taken; the results are relevant either way. 
  
 95 
Table 13.1 European strengths in quantum hardware and software 19 
Quantum computing area No. of responses Mean Median IQR 
Processors 59 57.2% 60% 40%pts. 
Memories 58 52.8% 50% 41%pts. 
Communications and 
interconnect 
60 68.8% 70% 40%pts. 
Fundamental algorithms 57 60.2% 60% 35%pts. 
Software for quantum 
simulations 
56 60.3% 60% 34%pts. 
Firmware for hybrid classical-
quantum hardware 
components 
54 49.8% 50% 40%pts. 
User interfaces 49 40.1% 35% 28%pts. 
Other 2 80.0% 80%   - 
 
 
Discussion of all sub-questions 
According to the quantitative data in Table 13.1, Europe is seen as: 
 strong in interconnect and communication  
 weak in user interfaces.  
The first reflects the fact that quantum communications have been commercialised first 
in Europe, and the second that most of the open platforms for experimenting with 
quantum computer programming have come from the USA.  
In other respects, the distributions in Fig. 13.1 are relatively flat, with only a small 
indication of particular areas of strength and weakness, although a rather different 
picture emerges from the text comments to sub-question 13.3. 
 
 96 
 
Fig. 13.1 European strengths – in which fields is Europe better positioned? 24 
|median   |mean      ⁞ weighted mean    + individual responses, stacked vertically 
Other
User interfaces
Firmware for hybrid 
classical-quantum 
hardware components
Software for quantum 
simulations
Fundamental algorithms
Communications and 
interconnect
Memories
Processors
[0,20%) [20%,40%) [40%,60%) [60%,80%) [80%,100%]
European positioning in various fields, in comparison with competitors 
 97 
Sub-question 13.3: Other quantum computing areas, European competitive 
advantages/structural weaknesses 
1. “Strengths: Quantum Internet, General Quantum Software, Cryogenics, 
Weaknesses, Quantum computer development.” 
2. “The greatest weakness is the missing silicon industry which is required to build a 
quantum computer. The advantage in Europe is the high level of knowledge on 
quantum people have - even in industry.” 
3. “Advantages in utilization of controllable dissipation, heat management at the 
quantum and chip level, cryogenics.” 
4. “Interfacing stationary and flying qubits is rather weak.” 
5. “Europe leads quantum simulations with ultracold atoms and ions.” 
6. “Europe leads the area of cold-ions platform for general gate-based quantum 
computing. The superconducting computing research has been at the forefront in 
the past but needs rejuvenation to catch up with resent significant private 
industry efforts in North America. The quantum simulation using multiple 
quantum physical platforms is under active development in many parts of Europe 
but the pressure from quantum annealing simulators is very strong. “ 
7. “New quantum resistant cryptographic algorithms (AES was developed in 
Europe).” 
8. “Europe is very strong in optics which makes it well suited for communication- 
interconnects and quantum cryptography.  It has strengths in quantum computer 
science but lacks the large institutions that North America has to back these 
people up.  Europe could help gain an edge in these areas.  Also if Europe wishes 
to build a large scale quantum computer it will need to engage the private sector 
more.”  
9. “Difficult to say at the present time- perhaps- semiconductors.“ 
10. “Very difficult to state as a dominant technology has not emerged. Strong in 
atoms/ions- topological and semiconductors weaker in superconductors.” 
11. “Quantum Computing for Artificial Intelligence.” 
12. “Competitive advantage: cryogenic technologies (including low-temperature 
electronics) as enabler of quantum computing.” 
13. “Strength is the scientific advantage in solid-state experimental physics and ion 
traps. weakness is the lack of hardware companies.” 
14. “Definitely in metrology (3 very strong theory groups and several experimental 
groups).“ 
15. “Europe is excellent at solid-state and at ion traps- so well positioned in the 
leading platforms.” 
16. “Biological and medical applications.”,  “Quantum simulators”,  “cryptography” 
17. “Proposing- creating- and developing novel disruptive quantum computing 
paradigms- in theory and experiments- beyond the fashionable paradigms that 
are condemned to failure in the next decades: i) digital quantum computing with 
error correction and ii) topological quantum computing- and iii) adiabatic 
quantum computing.”
 98 
Question #14 Education 
What are the education aspects impacted by quantum computing? 
Sub-question 14.1: Educational value. What is the educational value of a small scale 
quantum computer in each of the following (4) contexts? (From 0=no value to 
100=extremely high value) 
Platform on which software developers can learn 
Means to train quantum engineers 
Unknown yet 
Other known educational value (please indicate what, after ""Submit"") 
Sub-question 14.2: Awareness level. What is the awareness of quantum technology 
among (5) different targets? (From 0=no knowledge to 100=high awareness) 
Physicists 
Chemists 
Engineers 
Computer scientists 
Others (please specify after ""Submit"") 
Sub-question 14.3: Training. How important is it to train new quantum computing 
specialists in the categories listed in sub-question 14.2? (From 0=of no importance to 
100=extremely important) 
Sub-question 14.4: Adaptation. Which aspects of education should be adapted and how 
(e.g. promote training, finding jobs etc.) 
 
Motive 
This question directly concerns European programmes which have an educational 
character or aspect e.g. Erasmus http://ec.europa.eu/programmes/erasmus-plus/   and 
Marie Skłodowska-Curie https://ec.europa.eu/research/mariecurieactions/. 
Further, allocating some of the FET Flagship resources to education is proposed in the 
[Quantum Manifesto, 2016] and has been raised in subsequent discussions, including the 
Berlin workshop of 10th November 2016 and the Malta workshop of 17th February 2017. 
The High Level Steering Committee for the Flagship went as far as saying that projects 
should always contain an educational and training aspect [HLSC Final report, 2017]. 
 
 
Sub-question 14.1: Educational value of small scale quantum computer 
Response rates were quite low, 72 of 99 who opened the question. 
 
The respondents mainly agreed that a small scale quantum computer would be a suitable 
platform on which software developers could learn and as a means to train quantum 
engineers, and there was also some support for seeing its educational value as unknown 
yet. 
Other known educational areas specifically suggested were: 
1. “General training in STEM subjects”.      
2.  “Interdisciplinary training”. 
3. “Develop a ‘quantum way-of-thinking’ in the brain of the future scientists and 
engineers”.  
4. “Education in quantum processes and quantum chemistry”. 
5. “more than just training software developers to use quantum computers- they 
should also think differently. probably a new range of mathematic- on top of 
software engineering”. 
 99 
                                 Table 14.1 Educational value20 
 
Context No. of responses Mean Median IQR 
Platform on which 
software developers 
can learn 
72   71.2%    80% 24%pts. 
Means to train 
quantum engineers 
71   82.0%    80% 29%pts. 
Unknown yet 40   54.0%    60% 50%pts. 
Other known 
educational value 
 6   35.0%    25% - 
 
 
 
 
 
 
Fig. 14.1 Educational value of a small scale quantum computer  25 
 |median   |mean   + individual responses, stacked vertically 
 
 
 
Other known 
educational value
Unknown yet
Means to train quantum 
engineers
Platform on which 
software developers can 
learn
[0,20%) [20%,40%) [40%,60%) [60%,80%) [80%,100%]
Respondent's assessment of educational value for each context
 100 
Sub-question 14.2: What is the awareness of quantum technology among 
different targets? 
There is a good consensus that awareness of quantum computing is greatest among 
physicists, followed by computer scientists and less among chemists and engineers. The 
view stated in comment 3 below seems to be more pessimistic than the average 
regarding knowledge of quantum computing among computer scientists.  
Only 4 respondents mentioned other categories of experts; one cited biologists and 
another, material scientists but no other disciplines were raised. 
Response rates were also low for this sub-question, as for previous one. 
 
Comments 
1. “People learn the basics at university- but they are not well aware of quantum 
computing and its opportunities.” 
 
2. “I'm guessing here - if you want to find out- a better way would be to do a 
survey of these different groups. I suspect that most of these are aware of QC- 
but probably not of the potential or anything much about it.” 
 
3. “Well-known among physicists- not considered by computer scientists” 
 
 
 
 
Table 14.2 Awareness of quantum computing among different specialists21 
 No. of responses Mean Median IQR 
Physicists 74 79.4% 80% 30%pts. 
Chemists 71 49.5% 50% 30%pts. 
Engineers 72 42.% 40% 40%pts. 
Computer 
scientists 
73 49.2% 50% 43%pts. 
Others 4 22.5% 20% 40%pts. 
Note: the respondents were not themselves necessarily specialized in these disciplines. 
The question concerns how aware they thought others were. 
 101 
 
 
 
Fig. 14.2 Awareness of quantum technology 26 
|median   |mean   + individual responses, stacked vertically 
Others
Computer scientists
Engineers
Chemists
Physicists
[0,20%) [20%,40%) [40%,60%) [60%,80%) [80%,100%]
Awareness of quantum computing among different specialists 
 102 
Sub-question 14.3: Importance of training new quantum computing specialists 
in different categories 
 
There is a strong consensus on the need to train physicists, engineers and computer 
scientists in quantum computing with many respondents also thinking that it is important 
to train chemists in the subject. Together with the results of 14.2, these 
recommendations can be interpreted as meaning that the respondents perceive a need 
to correct a relative lack of knowledge of quantum computing among engineers and 
computer scientists, and some think chemists as well, but that it is also very important 
to continue to train physicists in the subject. Only four respondents recommended 
training other professionals, of whom one specified life scientists and the other software 
engineers. 
 
Table 14.3 Importance of training different categories of specialist 22 
 No. of responses Mean Median IQR 
Physicists 68 80.5%   81% 29%pts. 
Chemists 69 64.6%   70% 30%pts. 
Engineers 70 77.4%   80% 28%pts. 
Computer 
scientists 
70 81.3%   80% 30%pts. 
Others  4 52.5%   60% 83%pts. 
 
 
 
 
 
 103 
 
Fig. 14.3 Importance of training quantum computing specialists in different categories  
27 
|median   |mean   + individual responses, stacked vertically 
Others
Computer scientists
Engineers
Chemists
Physicists
[0,20%) [20%,40%) [40%,60%) [60%,80%) [80%,100%]
Importance of training new quantum computing specialists in different categories
 104 
 
Taking questions 14.2 and 14.3 together (see Figure 14.2.1), the high importance that 
the respondents attach to training for both more aware and less aware categories does 
lend support to the idea of using resources from the Flagship for this purpose. The 
numerical results do not indicate support for the counter argument: that training is 
already well-funded by other programmes which already ensure that there will be more 
trained people than the emergent European quantum computing industry is likely to 
need. No comments were received to this effect. 
 
 
 
Fig. 14.2.1 Level of awareness and importance of training28                                     
                 
 
  
%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
% 20% 40% 60% 80% 100%
Im
p
o
rt
an
ce
 o
f 
tr
ai
n
in
g
Awareness
Physicists
Chemists
Computer scientists
Engineers
Others
 105 
 
Sub-question 14.4: Which aspects of education should be adapted and how? 
Most of the recommendations received can be grouped into the first three groups below. 
The first group are to develop more courses in quantum computing, something which 
should be well within the capabilities of European universities. The second group 
concerns rather straightforward organisational and promotional issues. The third 
recommendation, to widen the diffusion of basic quantum physics education, is 
achievable in principle, although the goal of demystifying the subject is, of course, more 
challenging.  
Overall, the path ahead for education and training in quantum computing seems clear.  
 
Recommendations for quantum computing-relevant courses 
1. “For the moment- perhaps it is enough to offer more undergraduate and graduate 
courses on quantum computing. Not so many universities offer such courses.“ 
2. “Incorporating Quantum Programming into current physics- engineering and 
computer science programs via quantum simulators on classical machines.” 
3. “MSc and PhD programmes. Founding quantum technologies departments in the 
universities. We should remember that the success of the IT industry is correlated 
to the appearance in universities in the '60s - '70s of computer science 
departments & and training programs.” 
4. “Various high-quality MSc progammes in quantum technology would be needed.“ 
5. “2 areas here: quantum hardware specialists need more physics. Quantum 
software specialists need define new areas in software engineering and 
mathematics. they need to understand the different approach- however they 
don't need to understand quantum physics.” 
6. “Definitely introduce quantum computing courses to a wider spectrum of students 
outside physics- computer science and chemistry. Depending on the level of 
development of the technology, I can also see a specialised quantum engineer 
course in the future as well.“ 
7. “Special summer-schools for non-physicists.” 
8. “Post-graduate.” 
 
Recommendations for organisation and promotion of quantum computing training 
9. “training networks- doctoral centres...are one nice way to train new scientists. 
Public awareness is also very important” 
10. “Open Source tool-kits- principally the interfaces to which industry and academic 
offerings can be integrated. Underlying training and support for their adoption. 
Working groups. Standards committees.” 
11. “Cross-disciplinary education and training” 
12. “promote information about opportunities to learn or train” 
13. “promote training and r&d positions between industry and academia” 
14. “Promote training.” 
 
 
 
 106 
Broadening elementary quantum physics education  
15. “Basic physics education- starting in secondary schools. We'll never use the full 
potential of quantum technologies if every person starting in the field still coins it 
as 'weird'...” 
16. “Teach basic quantum mechanics in secondary schools.” 
17. “Basic quantum technology knowledge - people needs to understand the concept 
behind.” 
18. “Explain quantum mechanics demystifying several issues (like collapse- 
measurement,etc) that provides many difficulties to students to get an intuitive 
understanding of quantum phenomena. Such type of explanations of quantum 
mechanics (beyond the orthodox one) exist and are very recommendable for 
students.“ 
19. “Education in all fields of science- computation- and engineer should include 
basics on quantum computing and quantum technologies.” 
 
Other 
20. “Creating jobs” 
21. “Progress in quantum computing will depend on highly specialized laboratory 
equipment- materials and supply chains.” 
  
 107 
Question #15 Status and evolution 
Which of the following statements do you think reflect the current situation and the 
future evolution of quantum computing? (Enter a number from 0 to 100, with a higher 
score for the statements you are more confident of.) 
 
Sub-question 15.1: Status and evolution of quantum algorithms 
Quantum algorithms with proven performance enhancement with respect to classical 
ones will remain limited in number, and useful only in very specific tasks. 
A growing number of useful quantum algorithms will be designed. 
Already a significant number of quantum algorithms with proven performance 
enhancement with respect to classical ones have been found, and they can address 
computational tasks of practical use. 
Performance enhancement of currently available quantum algorithms is still an open 
question but will be resolved in the next years. 
Performance enhancement of currently available quantum algorithms is still an open 
question, and the situation will remain unsettled for the foreseeable future. 
The quantum algorithms that have been found up to now do not provide useful 
solutions for computational problems of any practical importance. 
 
Sub-question 15.2 Evolution of quantum hardware 
Hardware for universal quantum computation able to perform tasks unfeasible for 
conventional computation will be developed in less than 5 years. 
Hardware for specific quantum computations (e.g. annealing, simulation), decisively 
outperforming conventional computation, will be developed in less than 5 years. 
Hardware for universal quantum computation able to perform tasks unfeasible for 
conventional computation will not be developed by less than 5 years from now but 
will be developed by less than 10. 
Hardware for specific quantum computations (e.g. annealing, simulation), decisively 
outperforming conventional computation, will not be developed by less than 5 years 
from now but will be developed by less than 10. 
Hardware for universal quantum computation able to perform tasks unfeasible for 
conventional computation will not be developed in less than 10 years from now. 
Hardware for specific quantum computations (e.g. annealing, simulation), decisively 
outperforming conventional computation, will not be developed in less than 10 years 
from now. 
 
Sub-question 15.3 Evolution of quantum computing architecture 
Quantum processors will completely displace classical ones, without radically 
changing the computer architecture we know now. 
Quantum computers will resemble today’s supercomputers, running specific 
algorithms to solve targeted problems. 
Quantum computers will resemble the mainframes of the sixties, with computing 
time sold in slots for general-purpose computations. 
Quantum computers will resemble mini-computers of the eighties, with a few 
terminals for general-purpose computations. 
Quantum processors will complement classical ones in hybrid architectures for 
general purpose applications. 
Quantum processors will complement classical ones in hybrid architectures for 
specific scientific applications. 
 
 108 
Motive 
This question concludes the structured questions and represents a summary of the 
foresight obtained regarding technical issues. 
 
 
Sub-question 15.1: Status and evolution of quantum algorithms 
Overall, the results show optimism regarding progress more in quantum algorithms, but 
with quite a large spread and a significant number of pessimistic views. The greatest 
degree of confidence is that a growing number of useful quantum algorithms will be 
found, and the median value is somewhat greater than the mean, the latter being pulled 
down by a small number of dissenting views. Optimism is tempered by the fact that 
many participants had high or quite high confidence that quantum algorithms with 
proven performance enhancement would remain limited in number. Nevertheless, very 
few participants agreed with the most negative statement: that existing quantum 
algorithms do not provide useful solutions to problems of any practical importance.  
 
Sub-question 15.2: Evolution of quantum hardware 
Note that the statements 1, 3, and 5 concern universal computing hardware and 
statements 2, 4, and 6 concern hardware for specific problems. Not surprisingly there is 
more optimism about rapid development of the latter with greatest confidence in the 
timescale of 5-10 years, and some confidence for even shorter timescales. For a 
universal computer, then greatest confidence is for a timescale of more than 10 years. 
For all statements there is a wide spread of views, from 0 to 100%.  
 
Sub-question 15.3: Evolution of quantum computing architecture 
The weight of opinion is towards the picture of quantum computers as specialist 
machines, either resembling today’s supercomputers or in a hybrid quantum-classical 
architectures for scientific applications. Some credence is nevertheless given to the idea 
of quantum computers being used for general-purpose computation, either in hybrid 
architectures and/or in mainframe-type, time-sharing configurations. There was a 
consensus against the picture of quantum computers in a mini-computer configuration. 
The idea of quantum computers completely replacing classical ones was considered 
implausible by the great majority of participants. 
 
100 participants opened the question.   
 109 
 
Table 15.1 Status and evolution of quantum algorithms23 
 
 
 No. of 
respondents 
Mean Median IQR 
Quantum algorithms with proven 
performance enhancement with respect to 
classical ones will remain limited in number- 
and useful only in very specific tasks. 
71 46.8% 50% 50%pts. 
A growing number of useful quantum 
algorithms will be designed. 
73 72.3% 80% 30%pts. 
Already a significant number of quantum 
algorithms with proven performance 
enhancement with respect to classical ones 
have been found- and they can address 
computational tasks of practical use. 
69 46.7% 40% 48%pts. 
Performance enhancement of currently 
available quantum algorithms is still an open 
question but will be resolved in the next 
years. 
69 52.6% 50% 43%pts. 
Performance enhancement of currently 
available quantum algorithms is still an open 
question- and the situation will remain 
unsettled for the foreseeable future. 
66 29.3% 25% 40%pts. 
The quantum algorithms that have been 
found up to now do not provide useful 
solutions for computational problems of any 
practical importance. 
68 18.7% 10% 20%pts. 
 110 
 
 
Fig. 15.1 Status and evolution of quantum algorithms  29 
|median   |mean   + individual responses, stacked vertically 
 
 
 
  
The quantum algorithms that 
have been found up to now do 
not provide useful solutions 
for computational problems of 
any practical importance.
Performance enhancement of 
currently available quantum 
algorithms is still an open 
question- and the situation will 
remain unsettled for the 
foreseeable future.
Performance enhancement of 
currently available quantum 
algorithms is still an open 
question but will be resolved 
in the next years.
Already a significant number 
of quantum algorithms with 
proven performance 
enhancement with respect to 
classical ones have been 
found- and they can address 
computational tasks of 
practical use.
A growing number of useful 
quantum algorithms will be 
designed.
Quantum algorithms with 
proven performance 
enhancement with respect to 
classical ones will remain 
limited in number- and useful 
only in very specific tasks.
[0,20%) [20%,40%) [40%,60%) [60%,80%) [80%,100%]
Respondent's view of how well the statement reflects the present and future situations
 111 
                   Table 15.2 Evolution of quantum hardware 24 
 
 No. of 
respondents 
Mean Median IQR 
Hardware for universal quantum computation 
able to perform tasks unfeasible for 
conventional computation will be developed 
in less than 5 years. 
69 30.6% 20% 35%pts. 
Hardware for specific quantum computations 
(e.g. annealing- simulation)- decisively 
outperforming conventional computation- will 
be developed in less than 5 years. 
72 52.7% 55% 55%pts. 
Hardware for universal quantum computation 
able to perform tasks unfeasible for 
conventional computation will not be 
developed by less than 5 years from now but 
will be developed by less than 10. 
69 42.1% 40% 40%pts. 
Hardware for specific quantum computations 
(e.g. annealing- simulation)- decisively 
outperforming conventional computation- will 
not be developed by less than 5 years from 
now but will be developed by less than 10. 
71 57.9% 60% 40%pts. 
Hardware for universal quantum computation 
able to perform tasks unfeasible for 
conventional computation will not be 
developed in less than 10 years from now. 
69 51.4% 60% 58%pts. 
Hardware for specific quantum computations 
(e.g. annealing- simulation)- decisively 
outperforming conventional computation- will 
not be developed in less than 10 years from 
now. 
67 32.2% 20% 40%pts. 
  
 112 
 
 
Fig. 15.2 Evolution of quantum hardware  30 
|median   |mean   + individual responses, stacked vertically 
 
  
Hardware for specific quantum 
computations (e.g. annealing-
simulation)- decisively outperforming 
conventional computation- will not 
be developed in less than 10 years 
from now.
Hardware for universal quantum 
computation able to perform tasks 
unfeasible for conventional 
computation will not be developed in 
less than 10 years from now.
Hardware for specific quantum 
computations (e.g. annealing-
simulation)- decisively outperforming 
conventional computation- will not 
be developed by less than 5 years 
from now but will be developed by 
less than 10.
Hardware for universal quantum 
computation able to perform tasks 
unfeasible for conventional 
computation will not be developed 
by less than 5 years from now but 
will be developed by less than 10.
Hardware for specific quantum 
computations (e.g. annealing-
simulation)- decisively outperforming 
conventional computation- will be 
developed in less than 5 years.
Hardware for universal quantum 
computation able to perform tasks 
unfeasible for conventional 
computation will be developed in 
less than 5 years.
[0,20%) [20%,40%) [40%,60%) [60%,80%) [80%,100%]
Respondent's view of how well the statement reflects the future situation
 113 
Table 15.3 Evolution of quantum computing architecture25 
 
 No. of 
respondents 
Mean Median IQR 
Quantum processors will completely displace 
classical ones- without radically changing the 
computer architecture we know now. 
71 11.3% 2% 10%pts. 
Quantum computers will resemble todays 
supercomputers- running specific algorithms 
to solve targeted problems. 
71 63.9% 70% 30%pts. 
Quantum computers will resemble the 
mainframes of the sixties- with computing 
time sold in slots for general-purpose 
computations. 
70 54.3% 57% 50%pts. 
Quantum computers will resemble mini-
computers of the eighties- with a few 
terminals for general-purpose computations. 
70 24.9% 20% 30%pts. 
Quantum processors will complement 
classical ones in hybrid architectures for 
general purpose applications. 
70 47.5% 50% 50%pts. 
Quantum processors will complement 
classical ones in hybrid architectures for 
specific scientific applications. 
70 73.5% 80% 32%pts. 
 
 
 114 
 
Fig. 15.3 Evolution of quantum computing architecture 31 
|median   |mean   + individual responses, stacked vertically 
Quantum processors will 
complement classical ones in 
hybrid architectures for 
specific scientific 
applications.
Quantum processors will 
complement classical ones in 
hybrid architectures for 
general purpose 
applications.
Quantum computers will 
resemble mini-computers of 
the eighties- with a few 
terminals for general-
purpose computations.
Quantum computers will 
resemble the mainframes of 
the sixties- with computing 
time sold in slots for general-
purpose computations.
Quantum computers will 
resemble todays 
supercomputers- running 
specific algorithms to solve 
targeted problems.
Quantum processors will 
completely displace classical 
ones- without radically 
changing the computer 
architecture we know now.
[0,20%) [20%,40%) [40%,60%) [60%,80%) [80%,100%]
Respondent's view of how well the statement reflects the future situation
 115 
Question #16 Final comments 
Please add other comments, suggestions, concerns etc. related to European policy and 
strategy concerning quantum computing. 
Altogether 98 people accessed the question, but only 13 comments were provided. They 
were grouped by theme as listed below. 
Comments and suggestions regarding the FET Flagship and EU funding 
1. “The flagship initiative will result in substantial scientific and technological 
advances in quantum information processing.” 
2. “First- there is a risk here to mix the Flagship and the quantum computing topic. 
Quantum computing is just a particular field which could be disrupted by quantum 
technologies. It would have been interesting to extend this present questionnaire 
to other fields like sensors- simulation- etc... I'm pretty sure that some of us 
answered the questions having the larger set of topics of the flagship in mind- 
while the questions were specifically on computing - and sometimes on 
simulations which is different. Second- the vast majority of researchers and of 
funding on quantum topics is already present in Europe- well beyond North-
America and Asia. The flagship must bring something else than just funding; it 
must bring a vision- then a focus- a ‘risky’ bet on a very few selected proof of 
concepts. and also a coupling between academics and industries  "" 
3. “It is crucial that EU funds and quantum technology flagship is aware of the need 
and relevance on proposing- creating- and developing novel disruptive quantum 
computing paradigms- in theory and experiments- beyond the fashionable 
paradigms that are condemned to failure in the next decades: i) digital quantum 
computing with error correction and ii) topological quantum computing- and iii) 
adiabatic quantum computing. It is also crucial that high-gain high-risk EU 
funding becomes true to the word- and not fake risky funding for incremental or 
irrelevant research as is the case of ERC grants at all levels. There is not a single 
ERC grant that I know that is not just fake follow up of previous development 
with null advance to the needed quantum computing novel paradigms and 
quantum technologies.” 
4. “The Flagship is a unique opportunity to achieve something great that we could 
not pursue with the other funding instruments. Let us not miss this chance of 
building the quantum computer.” 
5. “It is needed to develop a program that binds and exploits existing technologies 
and developments in materials science rather than sidelining those. The program 
should offer more clarity on what exactly the expected deliverables are and 
should strive to connect more strongly to existing flagship programs and bigger 
EU research and innovation initiatives. It should provide opportunities to 
researchers with diverse and broader skill set. With giant strides made by 
international competitors- choosing the right strategy is important- too much 
focus- at this moment- on just one credible platform will be shortsighted.” 
6. “EU should fund the development of undergraduate and postgraduate courses on 
quantum computing and quantum information processing in EU Universities.” 
7. “Concentrate on the basic research for several more years with some 
development funding of promising technologies” 
 
Comments regarding the research-industry relationship 
8. “Quantum computing has to be align with industry needs- deliverables have to try 
to solve industry problems. Research & Universities have to work together with 
industry to build efficient communication channels between them.” 
 116 
9. “Research and industry have to work hand in hand; co-innovation is key here. 
Long term vision is essential. Quantum computing is about hardware AND 
software- they have to be conceived together. This area is not so mature as other 
quantum technologies- however probably an area where Europe can make a 
difference. Even if the effort is and should be international- Europe has to be 
careful to keep his excellence (i.e. not producing high-quality and excellent 
research that is used and exploited by non-European industries).” 
 
Suggestions concerning specific science and technology issues  
10. “As I have mentioned along my answers I think that quantum mechanics needs to 
be explained by demystifying several issues (like collapse- measurement etc.) 
that provides many difficulties to students to get an intuitive/familiar 
understanding of quantum phenomena. Such type of explanations of quantum 
mechanics (beyond the orthodox one) exist and are very recommendable. On the 
other hand- quantum computers will always suffer from the decoherence 
(quantum systems become classical at a macroscopic level). Surprisingly- our 
understanding of such quantum-to-classical transition is very- very poor. The 
question on this survey also shows this poor understanding of the transition 
between quantum and classical systems. It is not a well-defined line (an switch 
that changes the classical world to the quantum one)- but a diffuse interface that 
we have to better understand/control to make quantum computing applications 
realistic.”   
11. “As highlighted in my answers I think Europe must focus on the application of 
Quantum Computing to Artificial Intelligence and Machine Learning. In this way 
we could develop a strong and specific approach toward a futuristic vision where 
powerful quantum technologies are merged with intelligent methods for designing 
algorithms useful for the next generation of computer applications (self-driving 
car- humanoid robots and so on).” 
 
Comments regarding broader societal implications 
12. “Make sure that European policy focuses on the right values within the global 
context. I sure will contribute to that.” 
13. “We need also to think more broadly about the social and economic implications. 
For example- not only will quantum computing be important for machine learning 
or searching large databases- etc.- but if quantum computing transforms machine 
learning- what might this mean for society? Of course- this can only be 
speculative at this stage- but if we don't at least try to look ahead we will be 
surprised by unexpected and possibly unintended consequences.” 
  
 117 
4 Conclusions 
The participants in the Real-time Delphi were mostly positive about the technical 
prospects for quantum computing with only a few dissenting voices seeing it as 
unfeasible or not useful. This reflects the fact that most people who chose to respond 
were members of the relevant scientific community, with both a belief in their field and 
an interest in advocating for it. Response rates were high, with many participants keen 
to express their point of view.  
The participants were strongly optimistic about the scale of the societal and economic 
impact of quantum computing and about its benefits versus its risks. Most thought that 
its impact could be as great as, or greater than that which conventional IT has had, 
which is to say, enormous; and largely or strongly beneficial and safe. Quantum 
computing is not seen as a job-destroying technology; the main effect on employment 
will likely be new jobs created in the field. Fears that quantum computing could destroy 
internet commerce by rendering existing cryptography useless are outweighed by hopes 
for its application, especially in chemistry, materials science, optimization, database 
search, machine learning and pattern recognition. The most benefit is seen for basic 
knowledge and applied science, with benefits also for health, security, education and 
training.  
Different technical approaches each have their advocates, and there are diverse opinions 
on priorities and organisational aspects. On most of these important questions there is 
little consensus.   
The expected time scale for the first applications is 10-15 years. The results in this 
respect do support the proposal to give quantum computing a prominent place in the 
FET flagship. However, there was also a consensus that the field is not yet ripe for a 
concentrated development effort in a selected direction and funding from all sources 
should be mainly directed to basic research and early stage development. This view is 
not in accordance with the aim of the flagship, which is intended to drive technology to 
high readiness levels and to foster commercialisation. 
 
 118 
Appendix A. The Real-time Delphi questionnaire 
Following is the RTD questionnaire composed of screenshots of the online form. 
 119 
 120 
 121 
 122 
 123 
 124 
 125 
 126 
 127 
 128 
 
  
 129 
Appendix B. Snapshot review of the responses  
During the period that the RTD was open for participation, the respondents could see in real-time how the responses were evolving, as 
well as access the summarizing page. Following is the summary and raw analysis of the responses (the screenshots of the online form.) 
 
 130 
 131 
 132 
 133 
 134 
 135 
 136 
 137 
 138 
 139 
 140 
 141 
 142 
 143 
 144 
 
 145 
References 
 
[Aharonov et al, 2007] 
Aharonov, D., van Dam, S., Kempe, J., Landau, Z., Lloyd, S.,  Regev, O. “Adiabatic 
quantum computation is equivalent to standard quantum computation”, SIAM J. 
Comput., 37 (2007), 166-194 
doi:10.1137/S0097539705447323 
 
[Aspuru-Guzik et al., 2015] 
Aspuru-Guzik, A.  et al., ASCR Report on Quantum Computing for Science, US Dept. of 
Energy, Office of Science, Advanced Scientific Computing Research Program, 2015. 
https://science.energy.gov/~/media/ascr/pdf/programdocuments/docs/ASCRQuantumRe
port-final.pdf 
 
 
[DiVicenzo, 1995] 
DiVincenzo, D. P., “Two-bit gates are universal for quantum computation,” Phys. Rev. A, 
51 (1995), 1015-18. https://journals.aps.org/pra/abstract/10.1103/PhysRevA.51.1015 
 
[DiVicenzo, 2000] 
DiVicenzo, D. P., “The Physical Implementation of Quantum Computation”, Fortschr. 
Phys. 48 (2000) 9-11, 771-783 
 
[ETSI, 2015] 
Pecen, M , rapporteur, “Quantum Safe Cryptography and Security, An introduction, 
benefits, enablers and challenges”, ETSI White Paper No. 8, June 2015 
https://www.etsi.org/images/files/ETSIWhitePapers/QuantumSafeWhitepaper.pdf 
 
[Feynman, 1982] 
Feynman, R., P., “Simulating physics with computers.”, Int. J. of Theoret. Phys, 21, Nos. 
6/7, (1982).  https://people.eecs.berkeley.edu/~christos/classics/Feynman.pdf 
 
[Feynman, 1985] 
Feynman, R. P. “Quantum mechanical computers”, Opt. News 11 (2), 11-20 (1985) 
http://www.quantum-dynamic.eu/doc/feynman85_qmc_optics_letters.pdf 
 
[Forlearn] 
Forlearn webpage http://forlearn.jrc.ec.europa.eu 
 
[Fredkin and Toffoli, 1982] 
Fredkin, E. and Toffoli., T, “Conservative Logic”, International Journal of Theoretical 
Physics, 21, Nos. 3/4, (1982). 
 
[Høyer et al., 2001] 
Høyer, P., Neerbek, J. and Shi, Y., ""Quantum complexities of ordered searching, sorting, 
and element distinctness"". 28th International Colloquium on Automata, Languages, and 
Programming. 62–73 (2001) arXiv:quant-ph/0102078 . doi:10.1007/3-540-48224-5_29.   
 
 
[H2020annexes, 2017]  
HORIZON 2020, WORK PROGRAMME 2016– 2017, General Annexes 
Horizon 2020 European Commission Decision C(2017)2468 of 24 April 2017 
 
 
 
 
 146 
[HLSC Final Report, 2017] 
Mlynek, J., Calarco, T., Giacobino, E., Polzik, E. S., Bianco, P., Bolle, M., Dolfi., D., and 
Ribordy, G. (Eds.) Quantum Technologies Flagship Final Report, High-Level Steering 
Committee, 28 June 2017 
http://ec.europa.eu/newsroom/document.cfm?doc_id=46979 
 
[Jordan] 
Jordan, S. “The Quantum Algorithm Zoo.” National Institute of Standards and 
Technology; (accessed 3rd October 2017).  http://math.nist.gov/quantum/zoo/ 
 
[Klauck et al., 2003] 
Klauck, H.,  ""Quantum Time-Space Tradeoffs for Sorting"". Proceedings of the thirty-fifth 
annual ACM symposium on Theory of computing (2003) doi:10.1145/780542.780553 
  
[Lewis, 2017] 
Lewis, A. M., The Impact of Quantum Technologies on the EU’s future policies: Part 1 
Quantum Time, EUR 28555 EN European Commission JRC 2017. doi:10.2760/832942 
 
[Lewis and Travagnin, 2017] 
Lewis, A. M. and Travagnin, M , The Impact of Quantum Technologies on the EU’s future 
policies: Part 2 Quantum Communications from science to policies, EUR 29017 EN, 
European Commission JRC 2017 . doi:10.2760/881896  
 
[The Millennium Project] 
The Millennium Project  - Global futures studies & research 
(Accessed 3rd October 2017).  
http://millennium-project.org/millennium/overview.html 
 
[Mizel et al., 2007] 
Mizel, A., Lidar, D. and Mitchell, M. “Simple proof of equivalence between adiabatic 
quantum computation and the circuit model”, Phys.  Rev. Lett., 99 (2007), 070502.  
doi:10.1103/PhysRevLett.99.070502 
 
[Montanaro, 2016] 
Montanaro, A., “Quantum Algorithms: an overview.” NPJ Quantum Information 2 (2016); 
15023. doi:10.1038/npjqi.2015.23. 
 
[Muthukrishnan, 1999] 
Muthukrishnan, A. “Classical and Quantum Logic Gates: 
An Introduction to Quantum Computing, Quantum Information Seminar 
Rochester, New York (1999) 
http://www.optics.rochester.edu/~stroud/presentations/muthukrishnan991/LogicGates.pdf 
 
[Nishimori] 
Nishimori, H., “Quantum Annealing.” (Accessed 11th October 2018).  
http://www.stat.phys.titech.ac.jp/~nishimori/QA/q-annealing_e.html 
 
[Quantum Manifesto, 2016] 
de Touzalin, A., Marcus, C., Heijman, F., Cirac, I., Murray, R. and Calarco., T., Quantum 
Manifesto: A new Era of Technology, May 2016 
http://qurope.eu/system/files/u7/93056_Quantum%20Manifesto_WEB.pdf 
 
[Quantum Software Manifesto,2017] 
Ambainis, A., Buhrman, H., Kashefi, E., Kent, A., Kerenides, I., Kerling, F., Linden, N., 
Montanaro, A., van der Pavert, F., and Strohm, T.,  Quantum Software Manifesto, 
QuSoft-Research Center for Quantum Software, 2017 
http://www.qusoft.org/quantum-software-manifesto/ 
 147 
 
 
 
 
[QUROPE Roadmap, 2015], Acin, A., Esteve, D., Bloch, I., Gisin, N.,Walmsley, I., Cirac, 
I., Walraff, A., Kuhr, S., Thew, R., Jelezko, F.,Wolf, M., Marcus, C. and Glaser, S.  
European roadmap for Quantum Information Processing and Communication 
http://qurope.eu/system/files/QT%20Roadmap%202016_0.pdf 
 
[Srivastava, Choi and Cook, 2016] 
The Commercial Prospects for Quantum Computing Issue 1.  
NQIT Networked Quantum Information Technologies - UK National Quantum 
Technologies Programme, December 2016 
http://www.nqit.ox.ac.uk/content/commercial-prospects-quantum-computing 
 
[Stolze and Suter, 2008] 
Stolze, J. and Suter, D.  Quantum Computing, 2nd. Ed. Weinheim: Wiley –VCH, 2008. 
 
[SWD 283, 2014] 
European Commission Staff Working Document, FET Flagships: A novel partnering 
approach to address grand scientific challenges and to boost innovation in Europe, 
Brussels, 16.9.2014 SWD(2014) 283 final 
http://ec.europa.eu/information_society/newsroom/cf/dae/document.cfm?doc_id=6812  
 148 
List of abbreviations and definitions 
 
AI     Artificial intelligence 
DG CNECT    Directorate–General for Communications Networks, Content and  
Technology, of the European Commission 
 
Delphi    a questionnaire –based foresight method in which participants can  
adapt their replies in response to those of other participants. 
FET    Future and Emerging Technologies 
GFIS   Global Futures Intelligence System 
Grover’s algorithm  a quantum algorithm for searching an unsorted database 
FP7   Seventh Framework programme for research and technological  
development of the EU (2007-13) 
H2020 Horizon 2020, EU programme for research and technological 
development (2013-20) 
JRC    Joint Research Centre of the European Commission 
ML    machine learning 
NIST    National Institute of Science and Technology (USA) 
QC    Quantum computing 
QKD    Quantum key distribution 
QUROPE  an internet community for quantum technology in Europe, currently  
funded by the H2020 Coordination Action QUTE-EUROPE 
 
RTD   Real Time Delphi, a form of Delphi where participants can see other  
participants’ replies online and modify their own, throughout a 
defined time period 
Shor’s algorithm  a quantum algorithm for discrete logarithms and factoring 
TRL   Technology readiness level 
 149 
List of Figures 
Fig. 1.1 Declared level of expertise  1 .................................................................... 20 
Fig. 1.2 Fields of expertise 2 ................................................................................. 21 
Fig. 1.3 Geographical distribution3 ........................................................................ 22 
Fig. 2.1 Main reasons for quantum computing to be useful4 ..................................... 24 
Fig. 2.2.1 Respondents’ priorities for public funding support 5 .................................. 29 
Fig. 2.2.2 Respondents’ priorities for public funding support, weighted by the confidence 
they expressed in their own answers.6 .................................................................. 30 
Fig. 3. 1 Importance of quantum computing for various IT applications 7 ................... 32 
Fig. 3.2 Expected time scale for TRL5 - validation in a relevant environment, for the 
indicated applications 8 ........................................................................................ 36 
Fig. 4. 1 Importance for scientific and engineering applications 9 .............................. 39 
Fig. 4.2 Expected timeframe for validation in a relevant environment   (TRL5) 10 ........ 41 
Fig. 5. 1 Benefits and risks of quantum computing to society at large 11 .................... 44 
Fig. 5. 2 Effect of quantum computing on specific areas12 ........................................ 47 
Fig. 6. 3 Effect on job market14 ............................................................................ 56 
Fig. 7.1.1 Priorities for European public funding of quantum computing hardware 15 ... 58 
Fig. 7.1.2 Priorities for European public funding of quantum computing hardware,              
weighted by respondent’s confidence in their own answer16 ..................................... 59 
Fig. 8.1 Preferred distribution of EU public funding, based on H2020 instruments 17 ... 67 
Fig. 9.1 Preferred partitioning of funding, other than from EU public sources 19 .......... 72 
Fig. 9.2 Expected priorities of private–sector  20 ..................................................... 74 
Fig. 9.3 Expected priorities of non EU-institutional public funding21 ........................... 76 
Fig. 11.2 Areas which could develop in tandem with quantum computing, to their mutual 
benefit22 ........................................................................................................... 85 
Fig. 12.1 Quantum computing physical platforms: intrinsic strength 23 ...................... 89 
Fig. 12.2 Quantum computing physical platforms: European potential24 .................... 91 
Fig. 12.1.2 Quantum computing physical platforms intrinsic strength versus                          
European potential.25 .......................................................................................... 92 
Fig. 13.1 European strengths – in which fields is Europe better positioned? 26 ............ 96 
Fig. 14.1 Educational value of a small scale quantum computer  27 ........................... 99 
Fig. 14.2 Awareness of quantum technology 28 .................................................... 101 
Fig. 14.3 Importance of training quantum computing specialists in different categories  
29 ................................................................................................................... 103 
Fig. 14.2.1 Level of awareness and importance of training30 .................................. 104 
Fig. 15.1 Status and evolution of quantum algorithms  31 ...................................... 110 
Fig. 15.2 Evolution of quantum hardware  32 ........................................................ 112 
Fig. 15.3 Evolution of quantum computing architecture 33 ..................................... 114 
 150 
 
  
 151 
List of tables 
Table 1 Implemented quantum algorithms  1 .......................................................... 12 
Table 3.1 Importance of quantum computing for IT applications 2 ............................. 31 
Table 3.2 Timescale for validation of quantum computing in a relevant environment, for 
various applications 3 .......................................................................................... 35 
Table 4.1 Importance of quantum computing for scientific and technical applications4 . 38 
Table 4.2 Expected timeframe in years for validation in a relevant environment 5             
(Starting from May 2017) ..................................................................................... 40 
Table 5. 1 Averages for potential effect on society at large6 ..................................... 44 
Table 5.2 Effect of quantum computing on specific areas7 ........................................ 48 
Table 5. 4 Requirements for certification 8 ............................................................. 49 
Table 6. 1 Economic Impact9 ................................................................................ 51 
Table 6.2 Effect on IT sector 10 ............................................................................ 52 
Table 6.2 Effect on the job market11 ..................................................................... 55 
Table 8.1 Funding instruments12 .......................................................................... 66 
Table 9.1 Preferred partitioning of non-EU-public funding13 ..................................... 71 
Table 10.1 Hardware/software relationship13 ......................................................... 78 
Table 11.1 Scenarios for quantum computing’s future place14 .................................. 83 
Table 11.2 Areas with synergy with quantum computing15 ...................................... 84 
Table 12.1 Potential of technology platforms16 ....................................................... 90 
Table 12.2 European potential17 ........................................................................... 90 
Table 13.1 European strengths in quantum hardware and software 18 ....................... 95 
Table 14.1 Educational value19 ............................................................................. 99 
Table 14.2 Awareness of quantum computing among different specialists20 ............. 100 
Table 14.3 Importance of training different categories of specialist 21 ..................... 102 
Table 15.1 Status and evolution of quantum algorithms22 ..................................... 109 
Table 15.2 Evolution of quantum hardware 23 ...................................................... 111 
Table 15.3 Evolution of quantum computing architecture24 .................................... 113 
 
 
 
 
 
 
 
 152 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 153 
 
doi:10.2760/737170     
ISBN 978-92-79-96730-6 
 K
J-N
A
-2
9
4
0
2
-E
N
-N
 
",162257170,"{'doi': '10.2760/737170', 'oai': 'oai:publications.jrc.ec.europa.eu:111111111/54162'}",The Impact of quantum technologies on the EU's Future Policies: Part 3 Perspectives for Quantum Computing,,2018-10-16T00:00:00+00:00,'Publications Office of the European Union',[],['http://publications.jrc.ec.europa.eu/repository/bitstream/111111111/54162/1/quantum_computing_report_v5.4.pdf'],,2018,"[{'type': 'download', 'url': 'https://core.ac.uk/download/162257170.pdf'}, {'type': 'reader', 'url': 'https://core.ac.uk/reader/162257170'}, {'type': 'thumbnail_m', 'url': 'https://core.ac.uk/image/162257170/medium'}, {'type': 'thumbnail_l', 'url': 'https://core.ac.uk/image/162257170/large'}, {'type': 'display', 'url': 'https://core.ac.uk/outputs/162257170'}, {'type': 'similar', 'url': 'https://core.ac.uk/display/162257170?source=1&algorithmId=15&similarToDoc=&similarToDocKey=URL&recSetID=5b01a362-7b77-4901-9634-1318425f138a&position=2&recommendation_type=same_repo&otherRecs=186268113,162257170,186276408,229121698,343940970,154981140,158378844,157740116,189597082,153379796'}]","This report describes a survey of opinions in relevant technology communities regarding the best options for research and development of quantum computing, the likely impact on various sectors, and the expected timescales. The survey is intended to contribute to the preparatory discussions for the quantum technology Future and Emerging Technology (FET) Flagship, planned for 2020-30. The overall view of the participants on the technological perspectives for quantum computing is positive and it is seen as likely to be benign.JRC.E.2-Technology Innovation in Securit",['EUR - Scientific and Technical Research Reports'],disabled
,"[{'name': 'Caleffi, Marcello'}, {'name': 'Cacciapuoti, Angela Sara'}, {'name': 'Bianchi, Giuseppe'}]",[],2018-05-15T07:44:44+00:00,"{'name': 'arXiv.org e-Print Archive', 'url': 'https://api.core.ac.uk/v3/data-providers/144'}",,research,10.1145/3233188.3233224,http://arxiv.org/abs/1805.04360,"Quantum Internet:
from Communication to Distributed Computing!
Marcello Caleffi
University of Naples Federico II
Naples, ITALY
marcello.caleffi@unina.it
Angela Sara Cacciapuoti
University of Naples Federico II
Naples, ITALY
angelasara.cacciapuoti@unina.it
Giuseppe Bianchi
University of Roma Tor Vergata
Roma, ITALY
giuseppe.bianchi@uniroma2.it
ABSTRACT
In this invited paper, the authors discuss the exponential comput-
ing speed-up achievable by interconnecting quantum computers
through a quantum internet. They also identify key future research
challenges and open problems for quantum internet design and
deployment.
CCS CONCEPTS
•Networks→Network architectures;Networkprotocols;Cloud
computing; • Computer systems organization → Quantum
computing;
KEYWORDS
Quantum Internet, Quantum Networks, Distributed Quantum Com-
puting, Quantum Cloud, Quantum Communications
ACM Reference Format:
Marcello Caleffi, Angela Sara Cacciapuoti, and Giuseppe Bianchi. 2018.
Quantum Internet: from Communication to Distributed Computing!. In
Proceedings of . ACM, New York, NY, USA, Article 4, 4 pages.
1 INTRODUCTION
Quantum computing is not a novel concept: it was proposed in
the early eighties [5] as a disruptive paradigm to solve challenging
problems exponentially faster than classical computing can. In 1994,
Shor proved its disruptive potential for integer factorization [15],
which constitutes one of the most widely adopted algorithms for
securing communications over the Internet. Since then, quantum
computing attracted a great academic interest, mainly from the
physics communities.
Nowadays, after over twenty years of pure science phase, the
research on quantum computing is finally reaching the engineering
phase, getting out of the labs and into business reality.
In fact, the development of quantum computers is experiencing a
major boost, since tech giants entered the quantum race. In Novem-
ber 2017 IBM built and tested a 50-qubits processor [8], in March
2018 Google announced a 72-qubits processor [9], and other big
players, like Intel and Alibaba, are actively working on double-digit-
qubits proof-of-concepts. Meanwhile, in April 2017 the European
Commission launched a ten-years 1 e-billion flagship project to
boost European quantum technologies research [6], and in June
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
, ,
© 2018 Copyright held by the owner/author(s).
Figure 1: Quantum Computing Industries and Applications.
2017 China successfully tested a 1200km quantum communication
between satellite Micius and ground stations [11].
Such a widespread excitement about quantum computing is
not surprising, given its potential to completely change markets
and industries – such as commerce, intelligence, military affairs –
as shown by the plethora of applications in Figure 1. Potentially,
a quantum computer can tackle classes of problems that choke
conventional machines, such as molecular and chemical reaction
simulations [1], optimization in manufacturing and supply chains,
financial modeling, machine learning and enhanced security.
For instance, with reference to our previous integer factorization
example, Shor’s quantum algorithm exhibits polynomial complexity.
This means that a 2048bit random integer can be factorized in
few minutes (or hours) by using a quantum computer, but it takes
billions of years – more than the age of universe – by using a
classical computer [14].
But the complete overtaking of classical computing is expected
to require hundreds, thousands of fault-tolerant qubits embedded in
a single quantum chip [1]. However, quantum technologies are still
far away from this ambitious goal, and it is impossible to predict if
this revolution will take years or decades.
In fact, so far, although the quantum chips storing the qubits
are quite small, with dimensions comparable to classical chips,
they require to be confined into specialized laboratories hosting the
bulked equipment – such as large sub-absolute-zero cooling systems
– necessary to preserve the coherence of the quantum states. And
ar
X
iv
:1
80
5.
04
36
0v
1 
 [q
ua
nt-
ph
]  
11
 M
ay
 20
18
, , Marcello Caleffi, Angela Sara Cacciapuoti, and Giuseppe Bianchi
Figure 2: Quantum cloud computing speed-up: even in case
of small quantum devices, two clustered devices can provide
an exponential speedupwith respect to isolated devices. The
volume of the cube represents the computation power.
the challenge for controlling, interconnecting, and preserving the
qubits gets harder and harder as the number of qubits increases.
All that given, it might sound like the dawn of quantum com-
puting revolution hasn’t arrived. Yet, the market for quantum com-
puting is forecast to worth more than 10 $-billion by 2024 [7], and
several technology firms already begun to prepare their business
for the era of quantum computing [10].
2 QUANTUM COMPUTING BACKGROUND
The power of quantum computing lies in its foundation on quan-
tum mechanics, the deepest explanation of the reality surround-
ing us.
Qubits are the building blocks of quantum computation. Qubits
can be realized with different technologies – electron spin, light
polarization, super-conducting circuits [13] – but the principles of
quantum mechanics hold independently of the underlying technol-
ogy.
While a classical bit can be in one state – either 0 or 1 – a qubit
can be in a superposition of two states 0 and 1 simultaneously. 2
qubits can exist in a superposition of 4 states. With 3 qubits, the
states become 8 and, with 4 qubits, the states become 16. Thanks to
the superposition principle, the power of quantum computing
grows exponentially as more qubits are added.
Quantum states are fragile. Any interaction with the environ-
ment irreversibly affects any quantum state, causing a loss of its
quantum properties in a process called decoherence. The classical
strategy – storing redundant copies of the fragile data – is not a
solution. The no-cloning theorem, in fact, prohibits to make a
copy of an arbitrary quantum state, and it turns out to be a valuable
property for securing communications.
By measuring a qubit, the quantum state is irremediably al-
tered: any superposition probabilistically collapses into a single
state. The measuring principle deeply affects computing: clever
ways to manipulate quantum states without measuring are essen-
tial for quantum algorithm design.
3 QUANTUM INTERNET
From the above, it is now clear that the computational power of
a quantum device is dictated by the number of qubits that can be
embedded and interconnected within. But the state-of-the-art of
quantum technologies limits this number to double digits.
Hence, a question spontaneously arises: how can we signifi-
cantly scale up the number of qubits to achieve the quantum
supremacy?
Interconnecting multiple quantum devices via a quan-
tum internet, i.e., through a network able to share quan-
tum states among remote nodes (opposed to the reductive
usage of quantum communications “just” for securing an
otherwise ordinary data transfer), is the answer.
Two isolated 10-qubit devices can represent 210 states each
thanks to the superposition principle. Hence, the two isolated de-
vices represent 2 · 210 states at once. But if we interconnect these
two devices with a quantum internet, the resulting cluster can rep-
resent up to 218 states, as detailed at the end of the next section,
with an exponential computational speed-up as shown in Figure 2.
In this distributed quantum computing scenario, existing
data centers are the natural candidates for hosting the specialized
quantum computing equipment. And companies and users can
access to the quantum computing power as a service via cloud.
Indeed, the quantum cloud market is estimated nearly half of
the whole 10 billion quantum computing market by 2024 [7]. And
IBM is already allowing researchers around the world to practice
quantum algorithm design through a cloud access to isolated 5-, 16-
and 20-qubits quantum devices [3].
4 ENTANGLEMENT: THE CORE OF
QUANTUM INTERNET
Entanglement, defined as a spooky action at distance by Einstein, is
a property of two quantum particles. The particles exist in a shared
state, such that any action on a particle affects instantaneously the
other particle as well. This sort of quantum correlation, with no
counterpart in the classical world, holds even when the particles
are far away each other.
Entanglement provides an invaluable tool to transmit qubits
without violating the no-copying theorem and the measuring prin-
ciple. With just local operations and an entangled pair of qubits
shared between source and destination, it is possible to “transmit”
an unknown quantum state between two remotes quantum devices.
This process is known as quantum teleportation. Differently
from what it is suggested by its name, the quantum teleportation
process implies the destruction of the original qubit and the source-
side entanglement pair member at the source though a measure-
ment. The original qubit is reconstructed at the destination once
the output of the source measurement – 2 classical bits – is received
via classical channel.
Stemming from the above description, quantum teleportation is
the key strategy to enable distributed quantum computing, which
requires to perform operations between qubits physically located
on multiple remote quantum devices. Indeed, if we consider for the
sake of explanation two remote quantum devices, by devoting at
least one qubit at each device for the teleporting process, a virtual
quantum device constituted by up to 2n − 2 qubits is obtained. As a
consequence, interconnecting multiple quantum devices allows to
achieve the exponential computational speed-up shown in Figure 2.
Quantum Internet: from Communication to Distributed Computing! , ,
Figure 3: Physical coupling map for the IBM 16-qubits de-
vice. Copyright IBM Q Experience. Qubit Q0 can directly in-
teract with qubits Q1 and Q15, but not with qubit Q9, unless
the quantum state stored in Q0 is “transmitted” to Q10 with
a sequence of SWAP operations.
5 CHALLENGES AND OPEN PROBLEMS
The standard computation model of a single quantum device as-
sumes that interactions between arbitrary pairs of physical qubits
are available. However, real quantum device architectures have
constraints on the physical qubit connectivity [12], as shown in
Figure 3. These restrictions do not limit in principle the ability to
perform arbitrary computations. In fact, swap operations can be
used to “transmit"" quantum states between an arbitrary pair of
qubits, by using the physical connectivity map. This at the price of
longer computation times.
The time overhead induced by swap operations in
single-device quantumcomputing and the timeover-
head induced by teleporting operations in distributed
quantum computing are the two sides of the same
coin.
They depend on several factors, dictated by the underlying phys-
ical hardware/network architecture. They can be controlled by min-
imizing swapping/teleporting operations with an efficient mapping
between the quantum algorithm and the underlying physical archi-
tecture. Clearly, this constitutes a key challenge, and indeed IBM
launched a quantum computing prize for the swapping operation
minimization in January 2018.
Furthermore, the key component underlying the quantum cloud
infrastructure is the quantum internet [4], which relies on the
entanglement through the teleporting process. With the current
technology level, photons are considered the natural candidates for
generating entanglement between remote qubits. And the rationale
for this choice lies in the advantages provided by photons for entan-
glement distribution: weak interaction with the environment, easy
control with standard optical components as well as high-speed
low-loss transmissions.
The aim of the flying qubits (i.e., the photons) is to ""transport""
the qubit out of the physical quantum device at the sender into the
corresponding quantum device at the receiver.
Hence, a transducer is needed to convert a matter
qubit, i.e., a qubit for informationprocessing/storage
within a computing devices, in aflying qubit, which
creates the remote entanglement.
However, there exist multiple technologies for realizing a matter
qubit (quantum dots, trasmon, ion traps, etc). Each technology is
characterized by different pros and cons, as surveyed in [13]. As
a consequence, the matter-flying interface should be able to face
with this technology diversity.
Furthermore, although photons are widely used as information
carriers within current internet, the design of a quantum internet
requires a major paradigm shift.
The quantum internet is governed by the laws of
quantummechanics.Hence, strange phenomenawith
no counterpart in the classic reality, such as no-cloning,
measurement, entanglement and teleporting, imposes
terrific constraints for the network design.
Classical network functionalities, ranging from error-control
mechanisms – as ARQ – to overhead-control strategies – as caching
– are based on the assumption that you can safety read and copy
the information. But this assumption does not hold in a quantum
internet, and fundamental advances in the design of each network
layer are required [2].
In this perspective, quantum networks can not be
restricted to a synonymous of specific applications
– e.g. Quantum Key Distribution (QKD) – as widely
done so far. Indeed, for aQKD system, quantumme-
chanics plays a role only for the creation of the en-
cryption key. The subsequent transmission of the
encrypted information is entirely classical. Differ-
ently, theQuantum Internet paradigmrequires com-
municationnetworks able to harness entanglement
and teleportation for transmitting the fragile quan-
tum information over long distances.
We do look forward to contributing to such an exciting research
area, which could pave the way for the Internet of future such
as Arpanet paved the way for today’s internet.
REFERENCES
[1] K. Bourzac. 2017. 4 tough chemistry problems that quantum computers will solve
[News]. IEEE Spectrum 54, 11 (November 2017), 7–9.
[2] M. Caleffi. 2017. Optimal Routing for Quantum Networks. IEEE Access 5 (2017),
22299–22312.
[3] D. Castelvecchi. 2016. IBM’s quantum cloud computer goes commercial. Nature
543, 7644 (Mar. 2016), 159.
[4] D. Castelvecchi. 2018. The quantum internet has arrived (and it hasn?t). Nature
554 (Feb. 2018), 289–292.
[5] R.P. Feynman. 1982. Simulating physics with computers. International Journal of
Theoretical Physics 21, 6-7 (1982), 467 – 488.
[6] E. Gibney. 2017. Europe’s billion-euro quantum project takes shape. Nature 545,
7652 (May 2017), 16.
[7] Homeland Security Research Corp. (HSRC). 2018. Quantum Computing Market
& Technologies - 2018-2024. (Jan. 2018).
[8] IBM. 2017. IBM Announces Advances to IBM Quantum Systems & Ecosystem.
(Nov. 2017).
[9] J. Kelly. 2018. Engineering superconducting qubit arrays for Quantum Supremacy.
In APS March Meeting. Bulletin of the American Physical Society.
[10] Accenture Labs. 2017. Innovating with Quantum Computing. (2017).
[11] S. Liao, W. Cai, et al. 2017. Satellite-to-ground quantum key distribution. Nature
549 (08 2017), 43 EP –.
, , Marcello Caleffi, Angela Sara Cacciapuoti, and Giuseppe Bianchi
[12] N.M. Linke, D. Maslov, et al. 2017. Experimental comparison of two quantum
computing architectures. Proceedings of the National Academy of Sciences 114, 13
(2017), 3305–3310.
[13] R. Van Meter and S.J. Devitt. 2016. The Path to Scalable Distributed Quantum
Computing. IEEE Computer 49, 9 (Sept 2016), 31–42.
[14] R. Van Meter, K.M. Itoh, and T.D. Ladd. 2012. Architecture-Dependent Execution
Time of Shor’s Algorithm. World Scientific, 183–188.
[15] P. W. Shor. 1994. Algorithms for quantum computation: discrete logarithms and
factoring. In Proceedings 35th Annual Symposium on Foundations of Computer
Science. IEEE, 124–134.
",157740116,"{'doi': '10.1145/3233188.3233224', 'oai': 'oai:arXiv.org:1805.04360'}",Quantum Internet: from Communication to Distributed Computing!,"{'code': 'en', 'name': 'English'}",2018-05-11T00:00:00+00:00,'Association for Computing Machinery (ACM)',[],['http://arxiv.org/abs/1805.04360'],,2018,"[{'type': 'download', 'url': 'http://arxiv.org/abs/1805.04360'}, {'type': 'display', 'url': 'https://core.ac.uk/outputs/157740116'}, {'type': 'similar', 'url': 'https://core.ac.uk/display/157740116?source=1&algorithmId=15&similarToDoc=&similarToDocKey=URL&recSetID=5b01a362-7b77-4901-9634-1318425f138a&position=8&recommendation_type=same_repo&otherRecs=186268113,162257170,186276408,229121698,343940970,154981140,158378844,157740116,189597082,153379796'}]","In this invited paper, the authors discuss the exponential computing speed-up
achievable by interconnecting quantum computers through a quantum internet.
They also identify key future research challenges and open problems for quantum
internet design and deployment.Comment: 4 pages, three figures, invited pape","['text', 'Quantum Physics', 'Computer Science - Networking and Internet Architecture']",disabled
,"[{'name': 'Coffin, Charlotte'}]",[],2020-11-21T13:32:37+00:00,"{'name': 'DigitalCommons@Pace', 'url': 'https://api.core.ac.uk/v3/data-providers/1323'}",,,,https://core.ac.uk/download/343940970.pdf,"Pace University 
DigitalCommons@Pace 
Honors College Theses Pforzheimer Honors College 
12-2018 
A Com parison of Classical and Quantum Implement ations of a 
Random Number Generator: An Introduction to Quantum 
Computing 
Charlotte Coffin 
Follow this and additional works at: https://digitalcommons.pace.edu/honorscollege_theses 
 Part of the Computer Sciences Commons 
 
 
 
 
 
 
 
 
 
A ​Com​parison of Classical and Quantum Implement​ations of a  
 
Random Number Generator: An Introduction to Quantum Computing  
 
 
 
 
 
 
 
 
 
 
 
Student: 
Charlotte Coffin 
Bachelor of Science in Computer Science 
 
Advisor:  
Andreea Cotoranu 
Information Technology Department 
 
Presentation date: December 11, 2018 
Graduation date: May 2018  
 
 
Table of Contents 
Abstract 2 
Introduction 3 
Literature Review 8 
Research Question 13 
Methodology 13 
Results and Discussion 15 
Conclusion 18 
 
 
 
 
 
 
 
 
 
 
 
 
1 
 
Abstract 
Quantum computers have potential to contribute to advancements in many disciplines 
including chemistry, material science, and artificial intelligence. As quantum computers become 
more accessible, there is a greater need for people to understand quantum computation to 
spearhead such advancements. This thesis discusses the basics of quantum computing, including 
fundamental concepts and a literature review. In order to demonstrate how quantum computation 
works, a random number generator is implemented on a quantum computer simulator and 
compared to a random number generator implemented on a classical computer. The results of the 
two experiments are compared. The results show that a quantum random number generator 
creates truly random numbers. This work contributes to the basic understanding of quantum 
computing by computer science novice learners, thus opening quantum computing to further 
exploration. 
 
  
2 
 
Introduction  
In 1965, Gordon Moore, co-founder of Intel, predicted that every two years our 
computing power would double. Titled Moore’s Law, this trend has held true for over 50 years 
[1]. As our computing power increased, our ability to engineer solutions to problems has 
increased as well. While classical computers are predicted to reach the ​physical limits of their 
computation power soon​, quantum computing offers an alternative for the future of Moore’s 
Law. However, there is a need to understand the practical applications of quantum computing, 
and furthermore to introduce novice learners to quantum computation.  
This thesis discusses the basics of quantum computing, including fundamental concepts 
and a literature review. A random number generator is designed, implemented, and tested on 
both a classical computer and a quantum computer, and the results are compared.  
Randomness is an important concept in computation. Random numbers are used 
extensively in cryptography for example. Random numbers fall into two categories: 
pseudo-random and truly- random. A pseudo-random number is a number that is generated using 
a mathematical algorithm or created from a measurement of some part of the universe. Either 
way, the number follows some pattern and therefore has potential to be predicted, and thus is 
ultimately not truly random. A truly- random number is a number that cannot be predicted. A 
quantum computer possesses special qualities that make it possible for truly random numbers to 
be created [2].  
Understanding and improving computation capabilities is a key focus in computer 
science. In this context, quantum computing has the potential to revolutionize computing as we 
know it.​ ​In order to understand quantum computing, one must understand how a classical 
3 
 
computer operates. A classical computer is binary, such that every operation is done with a bit 
which can have a value of either 1 or 0. A classical computer implements operations on these bits 
using gates. All operations in a classical computer are comprised of a combination of these gates 
[1]​. 
A quantum computer works differently than a classical computer. Instead of using classic 
bits, a quantum computer uses qubits. The state of a qubit is more complex in that, a qubit can 
have more than two states, and is often represented as a Bloch Sphere as in Figure 1.  
 
Figure 1: A bloch sphere representing a qubit [15] 
Given its property to hold multiple states, a qubit can store much more information than a 
classical bit. However, extracting meaningful information from a qubit is perhaps one of the 
biggest challenges in quantum computation.  
There are two key properties that make quantum computing different from classical 
computing: superposition and entanglement. Superposition is a linear combination of states [3]. 
This means that if a qubit is in superposition, there is an equal chance of these states being 
measured as 0 as there is of being measured as 1. This can be described effectively with a visual 
quantum circuit, as described in Figure 2.  
4 
 
 
Figure 2: Quantum circuit with one  qubit in superposition and one Hadamard gate 
 
In Figure 2, a quantum score is created using a single qubit. This qubit is then put into 
superposition using a Hadamard gate, and measured 1000 times, as quantum scores often are [4]. 
The output is in Figure 3 and shows that there is a nearly 50 percent chance of the qubit being in 
either state 0 or state 1. This result showcases one of the most powerful properties of quantum 
computing.  
 
Figure 3 Quantum score for one qubit in superposition after 1000 measurements 
 
The other key property of quantum computing is entanglement. Qubits have the ability to 
become entangled, and this is where much of their computing power comes from. In its most 
simplistic and abstracted form, entanglement means that while each part of a system is acting 
randomly, the actions of the entire system are predictable. The behavior of one qubit can be 
predicted based on the behavior of another qubit. However this property doesn’t exist until the 
5 
 
qubits are measured [4]. Each part of a system may act randomly, but when measured, the two 
parts are strongly correlated. This is explained visually in Figure 4, which shows the quantum 
score of a  system of two qubits put in superposition and then entangled.  
 
 
Figure 4: Quantum circuit with two qubits in superposition and entangled 
 
If just one qubit is measured, the output is random, similar to the output of the circuit 
shown in Figure 2 where half the time the result is zero, and half the time the result is one, as 
shown in Figure 5.  
  
Figure 5: Output for quantum entanglement measuring one qubit 
6 
 
However if both qubits are measured at the same time, the qubits show a strong 
correlation as shown in Figure 6. This result indicates that while still independently random, both 
qubits are either 0 or 1, which is due to the qubits being entangled. This property is unique to 
quantum, and there is no understandable reason for two things that seem totally unrelated to act 
this way.  
 
Figure 6: Output for quantum entanglement measuring two qubits  
 
In quantum computing, gates are used to manipulate bits, just as in classic computing. 
These quantum gates are powerful as they do operations on qubits in superpositioned states, 
while using significantly fewer bits than a traditional computer would.  These quantum gates are 
the result of matrices multiplied together. A base matrix represents the original state of the qubit, 
and the gates are set matrices that can be multiplied by the original matrix in order to get a 
particular output. These quantum gates are strung together into a quantum circuit. All of the 
operations are calculated and then the state is measured, smashing this information down into a 
single one-dimensional state; the output is a quantum score [1]. Because of this property, 
quantum systems can only be measured once, at the end of a program. Additionally, this 
7 
 
measurement will likely be different each time it is taken due to noise in the quantum system. To 
overcome this limitation, quantum scores are usually measured multiple times, and graphed on a 
bar plot to indicate the probability of each output [4].  
Quantum computing takes advantage of the current understanding that very small 
particles exist as both a wave and a particle. This means that very small amounts of matter must 
be measured and understood in order to represent qubits. There are a few different technologies 
to create a qubit, for example the polarization of a photon, or the spin of an electron ​[5]​. In order 
for the qubits to work as intended, they must be kept at a very low temperature, near absolute 
zero, or approximately −459.67 °F ​[6]​.  
Nowadays, researchers are racing to create the first quantum computer that truly 
outperforms a current supercomputer. Additionally, they are exploring ways to use the quantum 
properties to compute, including designing new algorithms suitable for quantum systems.  
 
Literature Review 
Quantum computing was created in the last century as a way to understand quantum 
mechanics. In 1976, Roman Ingarden, a Polish scientist, published a paper on Quantum 
Information Theory, showing that representing quantum information on a classical computer 
wouldn't be effective. In 1981, Richard Feynman, a well-known American physicist proposed a 
quantum computer as the solution to simulating physics on a computer, arguing that classical 
computers just weren’t sufficient ​[7]​. The theoretical concepts of quantum computing began to 
take shape in the late 1980s. In 1985, David Deutsch, a British physicist, proposed the first 
Universal Quantum Computer, and argued that it could exist, and would have properties that 
8 
 
could not be simulated on a classical computer ​[3]​. At this time, coming up with a theoretical 
quantum computer wasn’t impossible, and physicists and mathematicians could develop 
algorithms that could run on this theoretical machine.  
In 2000, David DiVincenzo published a paper outlining the physical requirements of a 
quantum computer. In his paper DiVincenzo emphasized the physical limitations of quantum 
computing arguing that it is very difficult to measure and sustain changes to a single electron in 
the way that is necessary for quantum computation ​[8]​. Later that year, Isaac Chuang created a 
crude five-qubit quantum computer using Fluoride atoms, and researchers at Los Alamos 
National Laboratory created a seven-qubit system out of a single drop of water. Since then, more 
sophisticated machines have been created, but it wasn’t until recently that researchers and 
educators got access to real quantum computers to tackle new problems.  
Today, a few companies are racing to build quantum computers. In March 2018, Google 
unveiled Bristlecone, a 72-qubit quantum chip. Google states that Bristlecone requires more 
iterations before it can be fully effective, as the amount of system noise increases with the 
number of qubits, yet they are “cautiously optimistic” about the capabilities of  the quantum 
chip. If this chip will work as intended, then Google will have reached “Quantum Supremacy,” 
defined as the point at which a quantum computer performs an algorithm that a classical 
computer cannot ​[9]​.  
IBM, on the other hand, has a few somewhat stable quantum computers that researchers 
can use. In November 2017, IBM created a 50 - qubit quantum computer, a size which can nearly 
outperform our current supercomputers. IBM also has a 20 - qubit quantum computer available 
9 
 
for public use. This means that quantum technology is accessible to the general public through 
the cloud, thus creating opportunities for more research and learning [4]. 
Another important potential advancement for quantum computing is in the time 
complexity of certain algorithms. In classical computing, an algorithm acts as a step-by-step 
instruction manual for a computer to solve a problem. Algorithms are categorized based on their 
“time complexity,” or  the rate at which they speed up with respect to the size of the input. 
Quantum computing has potential to decrease the time complexity of solving difficult problems 
with the use of new and more efficient algorithms.  
Classical algorithms fall into different categories based on the amount of time it takes for 
them to complete, as follows:  
 
P​: a problem that can be solved in polynomial time.  
NP:​ Nondeterministic Polynomial Time, also known as the set of problems where a 
solution can be verified as correct or incorrect in polynomial time.  
NP-complete​: a problem where a solution can be verified, but cannot be found in 
polynomial time [10].  
 
Analysis of a quantum register indicates that one quantum register with ​n​ qubits can store 
up to pieces of information, whereas a classic register can only store ​n​ pieces of information.2n  
This is to say that in order to represent numbers 0 through 128, one would only need log_2 (128 
bits), which is the equivalent of 7 qubits. In order to represent that many numbers in classical 
computers, one would need 128 bits. This it the first hint that quantum could provide a 
10 
 
significant speed up. A classical computer could not represent a quantum one without an 
exponential slowdown. With this onset of quantum computing offering a potential speed-up, 
there has been the creation of another class of problems:  
 
QP​: a problem that can be solved in polynomial time by a quantum machine.  
 
It wasn't until the ​Deutsch–Jozsa algorithm​ that this theoretical speed up was shown to 
exist. This algorithm was one of the first to demonstrate a difference between a classical problem 
and a quantum problem [11]. While the Deutsch-Jozsa algorithm does not have many direct 
applications, it is important to note that it is essential to the understanding of the power of 
quantum computing.  
A key example that shows a real life application of quantum computing is ​Shor’s 
algorithm​. Originally published in 1994, and expanded upon in 1997 by Peter Shor, the 
algorithm significantly decreases the speedup of factoring prime numbers. The time complexity 
of this problem is not yet solved, and no classical algorithm can do it very efficiently [3]. 
However, Shor’s algorithm can find the prime factorization in polynomial time. This speed up 
indicates  that certain types of encryption can now be broken with quantum computation, and 
because of this capability, we will have to look into alternative ways to encrypt data in the future 
[10]. 
Another algorithm that takes advantage of the unique properties of quantum computers is 
Grover’s algorithm​. In its most simple form, Grover’s algorithm manipulates the amplitudes of 
numbers in a quantum register in order to find a number in a list of numbers. For example, if you 
11 
 
have a thousand database entries, and you are looking for a single entry with a unique attribute, 
Grover’s algorithm could be used. Assuming that no other entry in that list has that attribute, a 
classical computer would have to go through every entry to check if it had that quality, thus 
taking linear time. Grover’s algorithm can find that entry in O( ) time. This speed up is very√n  
significant, and has potential to change database searching drastically. Additionally, Grover’s 
algorithm uses something called “amplitude amplification” in order of a specific entry. This 
amplitude amplification exploits the properties of quantum computation to create the speedup 
[3].  
Currently quantum computation has a few specific applications to science and research. 
In 2012, researchers found a way to simulate protein folding using a quantum computer [12]. 
Quantum also has applications in Machine Learning as it can process large amounts of 
information better than classical computers do. One example of this capability is the 
aforementioned Grover’s algorithm for finding an entry in a database.  
Last but not least, researchers also explored generating truly random numbers using 
quantum computers. A classical computer only has the ability to generate a pseudo-random 
number. Some algorithms are pure math, utilizing matrices, and large prime numbers to perform 
calculations that appear random [2]. Another technique for random number generation is using 
an arbitrary measurement of something in the universe as the basis for computing random 
numbers. One example is measuring the time between keystrokes on a computer and using that 
as the basis for the computation. However, the closer to statistically random a number generator 
is, the more time and space it takes to compute. This makes random number generation a 
problem in the world of computation.  
12 
 
Research Question 
This work aims to observe the differences between a truly random number and a 
pseudo-random number generator. ​In order to make such observations, a random number 
generator is implemented on both a quantum computer and a classical computer. The goal is to 
see if quantum can create truly random numbers, and to understand some of the differences 
between quantum computing and classical computing.  
 
Methodology 
In order to observe the properties of quantum computation,  a random number generator 
program is written for each computer: classical and quantum. The program for the quantum 
computer is implemented on QISKit, an open source platform for quantum computing. QISKit is 
one of the first environments designed to assist with writing quantum programs. QISKit is based 
on the Python programming language and runs on IBM’s quantum computer [13]. The random 
number generator takes advantage of the superposition property of quantum systems. This 
property means that until the quantum system is measured, it is both 1 and 0, but once it is 
measured it is exactly 1 or 0.  A screenshot of the code for the random number generator on 
QISKit is in Figure 8.  
Figure 8 shows seven qubits put into superposition. The qubits are in a linear 
combination of states, i.e. they have an equal chance of being 0 as they do 1 when they are 
measured. Each of these seven qubits are put into a superposition using Hadamard (H) gates. 
Mathematically, each qubit is put into  , ​represented as |+⟩ ​. Using seven qubits means 
that this quantum circuit can represent up to 2^7 states. In this case they are representing 
13 
 
numbers 0 to 127. This program uses 7 of the 20 qubits available on QISKit thus reducing 
system noise and ensuring that system readings are accurate.  
 
 
Figure 8: Sample code: QISKit Quantum random number generator qubit setup 
 
After the quantum circuit is set up, it is executed. Figure 9 is a demonstration of how to 
run this quantum circuit on IBM’s QISKit quantum computer. The results of the quantum score 
are sent back in a Python Dictionary. Since the quantum circuit is ran only once, the output is a 
single string of 0’s and 1’s. However, in order to extract the results, the output is looped through, 
and stored into a temporary variable. The variable is then converted from a binary number into a 
decimal number, which is the actual random number.  
14 
 
 
Figure 9: Sample code: random number generator function on QISKit 
 
The program for the classical computer utilizes Python’s built in random number 
generator function. The function is based on  the ​Mersenne Twister algorithm​. The algorithm 
was introduced in 1997 by Makoto Matsumoto and Takuji Nishimura, and it is based on the 
Mersenne Prime. The algorithm simulates randomness. However, while the algorithm passes a 
fair amount of statistical random tests, its output is not truly random [2]. More sophisticated 
random number algorithms use measurements of the environment, like the time between key 
presses, to generate a more random number, but those too are not truly random [2].  
 
Results and Discussion 
In the classical implementation of this problem, it is impossible to generate a truly 
random number. The Python random number generator applies mathematical functions to create 
something that appears random [14]. However a quantum computer is able to create a truly 
random number, thus making for a better random number generator. This work demonstrates the 
differences between a basic algorithm implemented on both a quantum computer and a classical 
computer.  
15 
 
In order to understand the quantum random number generator, 1000 numbers are 
generated using the quantum system, and then plotted on a bar graph with respect to how many 
times they appear in the data. The less variation in the amount of times a number appears in the 
output, the more random the number is, as shown in Figure 10. To compare, 1000 random 
numbers are generated using the ​Mersenne Twister​ (MT) algorithm in Python and the counts are 
shown in Figure 11.  
 
Figure 10: Bar graph of counts of each appearance of a number in 1000 runs of the quantum 
algorithm 
 
Figure 11: Bar graph of counts of each appearance of a number in 1000 runs of Mersenne 
Twister 
16 
 
The two graphs look similar with respect to the number distribution. This result  is likely 
related to the Mersenne Twister having an intentional distribution of numbers across its range. 
However, there are differences between the two as shown in Figure 12.  
 
Figure 12: Comparison of Quantum and Mersenne Twister random number generator counts 
 
Figure 12 shows that the output of the quantum algorithm is much closer to being exactly 
half zero and half one. As indicated in the graph, there is a smaller difference between the two 
counts in the quantum number generator than there is in the ​Mersenne Twister algorithm. This 
shows that the quantum algorithm is more true to the theoretical property that every outcome is 
equally likely to be in the output. This is how quantum computing generates a truly random 
number.  
There are differences between a quantum random number generator and a 
pseudo-random number generator implemented on a classical computer, using Python. While 
there are many creative algorithms to address this problem, it is important to note a truly random 
system cannot be simulated through mathematical functions. A quantum computer however is an 
17 
 
example of a truly random system, and this property is essential in creating a quantum random 
number generator. 
In addition to this comparison of truly random and pseudo-random numbers, this work is 
meant to add to the collection of programs that could be completed by a quantum novice. This 
project covers the fundamental concepts of quantum computing, and aids in the understanding of 
quantum concepts by those who are trying to learn quantum on their own. This means that 
quantum computing concepts are more accessible to the general public, and computer science 
minds can work to solve problems using this technology.  
 
Conclusion 
As demonstrated in the design and implementation of a quantum random number 
generator, there are differences between classical computing and quantum computing. The 
ability to generate a truly random number has numerous applications in statistics and 
cryptography. In current cryptographic systems, if a random number can be predicted, the system 
can be cracked. If cryptographic systems were built on truly random numbers, they would be 
much more secure. Having truly random numbers has incredible potential in many fields, and is 
one example of the many uses of quantum computers.  
This thesis serves as an introduction into one of the basic uses of quantum computing, 
and is a vessel to explain the differences between quantum computing and classical computing. 
A  summary of quantum  concepts and a review of the literature surrounding this topic were 
provided. Then, a random number generator was implemented using QISKit and IBM’s quantum 
computer. The random number generator was also implemented using classical computing and a 
18 
 
pseudo-random number generator. The results of these random number generators were 
analyzed, and the differences were compared.  
This work adds to the fundamental understanding of quantum computation, and to the list 
of programs that have now been implemented on a quantum computer.  Quantum computing has 
potential to revolutionize the way we think about computation, and to impact many fields for 
years to come. Moore’s law may be slowing down, but quantum computing means that Moore’s 
law just might hold true for a couple more years, thus pressing researchers to envision new ways 
to manipulate information.   
19 
 
References:  
[1] N. David Mermin, ​Quantum Computer Science: An Introduction​. Cambridge University 
Press, 2007. 
[2]   Archana Jagannatam, “Mersenne Twister - A Psuedo Random Number Generator and its  
        Variants” 2010. [Online]. 
[3]   ​Geoffrey Brumfiel​, “​D-Wave quantum computer solves protein folding problem,”  
        ​Nature.com​, 2017. [Online]. Available:  
        ​http://blogs.nature.com/news/2012/08/d-wave-quantum-computer-solves-protein-folding- 
        ​problem.html. [Accessed: 20-Nov-2018] 
[4]   “IBMQ Experience” 2017. [Online]. Available:  
https://quantumexperience.ng.bluemix.net/qx/tutorial?sectionId=beginners-guide&page=00
2 
-Introduction~2F001-Introduction​. [Accessed: Sep. 10, 2018]. 
[5] E. Conover, “Quantum computers are about to get real,” ​Science News​, 2017. [Online]. 
Available: ​https://www.sciencenews.org/article/quantum-computers-are-about-get-real​. 
[Accessed: 14-Oct-2018] 
[6] K. M. Svore and M. Troyer, “The Quantum Future of Computation,” ​Computer ​, vol. 49, 
no. 9, pp. 21–30, 2016. 
[7]   ​R. P. Feynman, “Simulating physics with computers,” ​Int. J. Theor. Phys.​, vol. 21, no. 6–7,  
        ​pp. 467–488, 1982. 
[8]    ​D. P. DiVincenzo, “The Physical Implementation of Quantum Computation,” ​Fortschr.  
         ​Phys. ​, vol. 48, no. 9–11, pp. 771–783, 2000. 
[9] Google, “A Preview of Bristlecone, Google’s New Quantum Processor,” ​Google AI Blog​. 
[Online]. Available: 
http://ai.googleblog.com/2018/03/a-preview-of-bristlecone-googles-new.html​. [Accessed: 
14-Oct-2018] 
[10]  M. Hayward, Quantum computing and Shor’s algorithm 
[11]  ​D. Deutsch, “Quantum Theory, the Church-Turing Principle and the Universal Quantum 
Computer,” ​Proceedings of the Royal Society A: Mathematical, Physical and Engineering 
Sciences​, vol. 400, no. 1818, pp. 97–117, 1985. 
[12] ​Geoffrey Brumfiel​, “​D-Wave quantum computer solves protein folding problem,”  
        ​Nature.com​, 2017. [Online]. Available:  
        ​http://blogs.nature.com/news/2012/08/d-wave-quantum-computer-solves-protein-folding- 
 ​       ​problem.html. [Accessed: 20-Nov-2018] 
[13]  “QISKit” 2018. [Online] Available: ​www.qiskit.com​. [Accessed: Sep 08, 2018].  
[14]  Docs.python.org. (2018). ​random — Generate pseudo-random numbers — Python 3.7.2rc1  
         documentation​. [online] Available at: https://docs.python.org/3/library/random.html  
         [Accessed 19 Dec. 2018]. 
[15]  S. Abramsky, “Contextual Semantics: From Quantum Mechanics to Logic, Databases, 
        Constraints, and Complexity,” Contextuality from Quantum Physics to Psychology  
        Advanced Series on Mathematical Psychology, pp. 23–50, 2015. 
 
 
 
20 
 
Appendix 
 
 
#QuantumRandomGenerator.py 
from qiskit import * 
#7 is 1 - 127 
#6 1 -63 
 
 
IBMQ.load_accounts() 
qr = QuantumRegister(7) 
cr = ClassicalRegister(7) 
qc = QuantumCircuit(qr, cr) 
 
 
qc.h(qr[0]) #Create a superposition on the quantum bit 
qc.h(qr[1]) #Create a superposition on the quantum bit 
qc.h(qr[2]) #Create a superposition on the quantum bit 
qc.h(qr[3]) #Create a superposition on the quantum bit 
qc.h(qr[4]) #Create a superposition on the quantum bit 
qc.h(qr[5]) #Create a superposition on the quantum bit 
qc.h(qr[6]) #Create a superposition on the quantum bit 
 
 
 
qc.measure(qr[0], cr[0]) #Measure the bit, and store its value 
in the clasical bit 
qc.measure(qr[1], cr[1]) #Measure the bit, and store its value 
in the clasical bit 
qc.measure(qr[2], cr[2]) #Measure the bit, and store its value 
in the clasical bit 
qc.measure(qr[3], cr[3]) #Measure the bit, and store its value 
in the clasical bit 
qc.measure(qr[4], cr[4]) #Measure the bit, and store its value 
in the clasical bit 
qc.measure(qr[5], cr[5]) #Measure the bit, and store its value 
in the clasical bit 
qc.measure(qr[6], cr[6]) #Measure the bit, and store its value 
in the clasical bit 
 
 
backend_sim = Aer.get_backend('qasm_simulator') 
shots_sim = 1 #Adjust this number as desired, with effects as 
described above 
 
21 
 
 
def random(): 
    job_sim = execute(qc, backend_sim, shots=shots_sim) #Run job 
on chosen backend for chosen number of shots 
    stats_sim = job_sim.result().get_counts() #Retrieve results 
    temp = """" 
    for x in stats_sim: 
         temp += x 
 
    num = int(temp, 2) 
    return num 
 
num = random() 
print(num) 
 
 
#PythonRandom.py 
import random; 
 
for x in range(0,1000): 
    num = random.randint(0,1) 
    print(num) 
 
 
 
 
22 
",343940970,"{'doi': None, 'oai': 'oai:digitalcommons.pace.edu:honorscollege_theses-1295'}",A Com parison of Classical and Quantum Implement ations of a Random Number Generator: An Introduction to Quantum Computing,"{'code': 'en', 'name': 'English'}",2018-12-01T08:00:00+00:00,DigitalCommons@Pace,[],['https://digitalcommons.pace.edu/cgi/viewcontent.cgi?article=1295&amp;context=honorscollege_theses'],,2018,"[{'type': 'download', 'url': 'https://core.ac.uk/download/343940970.pdf'}, {'type': 'reader', 'url': 'https://core.ac.uk/reader/343940970'}, {'type': 'thumbnail_m', 'url': 'https://core.ac.uk/image/343940970/medium'}, {'type': 'thumbnail_l', 'url': 'https://core.ac.uk/image/343940970/large'}, {'type': 'display', 'url': 'https://core.ac.uk/outputs/343940970'}, {'type': 'similar', 'url': 'https://core.ac.uk/display/343940970?source=1&algorithmId=15&similarToDoc=&similarToDocKey=URL&recSetID=5b01a362-7b77-4901-9634-1318425f138a&position=5&recommendation_type=same_repo&otherRecs=186268113,162257170,186276408,229121698,343940970,154981140,158378844,157740116,189597082,153379796'}]","Quantum computers have potential to contribute to advancements in many disciplines including chemistry, material science, and artificial intelligence. As quantum computers become more accessible, there is a greater need for people to understand quantum computation to spearhead such advancements. This thesis discusses the basics of quantum computing, including fundamental concepts and a literature review. In order to demonstrate how quantum computation works, a random number generator is implemented on a quantum computer simulator and compared to a random number generator implemented on a classical computer. The results of the two experiments are compared. The results show that a quantum random number generator creates truly random numbers. This work contributes to the basic understanding of quantum computing by computer science novice learners, thus opening quantum computing to further exploration. ","['text', 'information technology', 'quantum computing', 'Computer Sciences']",disabled
,"[{'name': 'Chen, Zeng-Bing'}]",[],2019-02-06T06:44:31+00:00,"{'name': 'arXiv.org e-Print Archive', 'url': 'https://api.core.ac.uk/v3/data-providers/144'}",,research,,http://arxiv.org/abs/1810.05025,"ar
X
iv
:1
81
0.
05
02
5v
1 
 [q
ua
nt-
ph
]  
10
 O
ct 
20
18
Quantum Neural Network and Soft Quantum Computing
Zeng-Bing Chen
National Laboratory of Solid State Microstructures,
School of Physics, Nanjing University, Nanjing 210093, China
(Dated: October 12, 2018)
A new paradigm of quantum computing, namely, soft quantum computing, is proposed for
nonclassical computation using real world quantum systems with naturally occurring environment-
induced decoherence and dissipation. As a specific example of soft quantum computing, we suggest a
quantum neural network, where the neurons connect pairwise via the “controlled Kraus operations”,
hoping to pave an easier and more realistic way to quantum artificial intelligence and even to better
understanding certain functioning of the human brain. Our quantum neuron model mimics as much
as possible the realistic neurons and meanwhile, uses quantum laws for processing information. The
quantum features of the noisy neural network are uncovered by the presence of quantum discord and
by non-commutability of quantum operations. We believe that our model puts quantum computing
into a wider context and inspires the hope to build a soft quantum computer much earlier than the
standard one.
PACS numbers: 03.67.Lx, 87.19.ll, 03.65.Yz
Conventional (hard) computing is characterized by
precision, certainty, and rigor. By contrast, “soft
computing” [1, 2] is an approach to computing, which
mimics the human thinking to learn and reason in
an environment of imprecision, uncertainty, and partial
truth, yet to achieve tractability, robustness, and low
solution cost. The applications of soft computing cover
various areas of fuzzy logic, neural networks, evolutionary
computing, rough sets, and other similar techniques to
address real world complexities. Another paradigm shift
in computing is the exploitation of quantum computing,
first introduced by Feynman in 1982. In its circuit-based
model, quantum computing [3] consists of initializing
input qubits, manipulating those qubits with a fixed
sequence of quantum logic gates programmed by a
specific quantum algorithm, and finally measuring all
the output qubits. While recent years have witnessed
remarkable progresses on physical implementations of
quantum computing, there still exist a number of
significant challenges in building a large-scale quantum
computer. The main technical challenges include the
high-precision initialization and readout of qubits well
isolated from environment, high-precision quantum logic
gates, and scalability of the physical qubits to a large-
scale quantum computing device. Quantum error
correction can correct errors occurred during computing,
thereby allowing to overcome the decoherence effects
caused by the noisy environment or faulty quantum logic
gates. However, the required error rate for each gate is
extremely low, typically 10−4, which is very hard to fulfill
for current quantum computing systems; for a topological
approach to quantum computing with much better fault
tolerance, see Refs. [4, 5].
A realistic quantum system is always characterized
by non-unitary, faulty evolutions and coupled with
the noisy and dissipative environment. The real
system complexities in quantum domain call for a
new paradigm of quantum computing, namely, soft (or
natural) quantum computing, aiming at nonclassical
computation using real world quantum systems with
naturally occurring environment-induced decoherence
and dissipation. Thus, by its very definition, soft
quantum computing deals with nontrivial (i.e., classically
intractable) quantum computing under the conditions of
noisy and faulty quantum evolutions and measurements,
while being tolerant to those effects that are detrimental
for current quantum computing paradigm. Thus, unlike
conventional (hard) quantum computing, soft quantum
computing does not aim at universal computation, but
certain specific computational tasks in an open quantum
system.
The most important question that soft quantum
computing attempts to address is whether or not this
new paradigm shift in computing could help in a better
understanding of certain functioning of the human brain
(“quantum artificial intelligence”). Thus, in this work
we propose a quantum neural network model as an
illustration of soft quantum computing. The belief
behind the proposal stems from the recent exciting
discoveries on possible quantum mechanical effects in
biological systems (for a review, see Ref. [6]). If
photosynthesis [7] and avian navigation [8] can make
use of quantum effects in certain manner, why the
human brain—the most marvellous biological device—
cannot utilize quantum laws to enhance its computing
and reasoning power? Along this line, models of
quantum cognition based on, e.g., neuronal microtubules
[9] and nuclear spins [10, 11] were envisioned. Here,
rather than focusing on physical implementations of
quantum functioning of the brain, we are interested in the
mathematical model of quantum neural network which
works as a soft quantum computer. For a summary of
existing quantum neural network models, see Ref. [12].
Mathematically, soft quantum computing starts with
2n two-level quantum systems (qubits) coupled with their
surrounding environment, and as such the initial state of
the n qubits is a mixed state ρ12...n in the computational
basis |0〉 and |1〉. The evolution for such a soft quantum
computer during computing is described by a completely
positive Kraus map (denoted by a superoperator O)
O(ρ12...n) =
∑
k
Eˆk(t)ρ12...nEˆ
†
k(t). (1)
Here the quantum operations Eˆk, which might be
time-dependent, satisfy
∑
k Eˆk(t)Eˆ
†
k(t) ≤ I, where the
equality holds for a trace-preserving map. Important ex-
amples of the trace-preserving operations are projective
measurements, unitary evolutions and partial tracing.
After the noisy evolution, quantum measurement in
the computational basis completes the soft quantum
computing process. Below, we model neurons as noisy
qubits; the network of such noisy qubits under noisy
evolution and measurement is a particular model of soft
quantum computing.
The human brain can be regarded as a neural network
[2, 13] organized in a formidably sophisticated structure
and has a huge number (∼ 1011) of neurons. A drastically
simplified drawing of a neuron is shown in Fig. 1a. A real
neuron, as we now understand it, integrates hundreds
or thousands of impinging signals through its dendrites.
These signals result in a change of the internal cell
potential in a complex pattern that depends on the
excitatory or inhibitory nature of the synapses where the
signals impinge on the cell body. The neuron outputs a
signal through its axon to another neuron for processing
in the form of an action potential only when its internal
potential exceeds certain threshold. Note that a neuron
has only a single axon, but a set of dendrites forming a
tree-like structure.
Instead of modeling the neurons as in the conventional
neural network models, or using the concepts borrowed
from hard quantum computing [12], we model the jth
neuron within the neural network as a basic unit of
a soft quantum computer; the network can have any
network architecture, which we do not specify below.
As shown in Fig. 1b, in our quantum neural model
each neuron has nj inputs si (i = 1, 2, ..., nj) from
possibly nj other neurons, each of which “interacts” with
the jth neuron. The interaction is characterized by a
connection superoperator Wij(t) instead of a connection
matrix (or weighted pathways) wij in the conventional
neural networks [2, 13]. Here we have shown the
time-dependence of Wij(t) explicitly. Then we assume
that the jth neuron is a logic qubit, consisting of nj
physical qubits. The candidate of these physical qubits
could be neuron’s ion channels whose two conducting
states (open and closed states) qualify them as the two-
state systems. The detailed microscopic justification
of physical qubits, which will be considered in future,
is of course meaningful, but irrelevant here for our
Axon
Dendrite
Soma
.
.
.
(a)
(b)
FIG. 1: A drastically simplified drawing of a neuron (a)
and the soft quantum neuron model (b). In (a), the neuron
integrates hundreds or thousands of impinging signals through
its dendrites. After processing by the cell body, the neuron
outputs a signal through its axon to another neuron for
processing in the form of an action potential when its internal
potential exceeds certain threshold.
mathematical formulation of the quantum neuron model.
These nj physical qubits are operated by nj inputs
via the connection superoperator Wij(t). As in a real
neuron integrating impinging signals and outputing a
signal when the internal potential of the neuron exceeds
certain threshold, here the resulting collective state of the
nj physical qubits represents the integration of impinging
signals and determines the output state of the logic qubit.
Thus, we model the quantum neuron at each network node
simultaneously as nj physical qubits and as a logic qubit
such that it can interact with nj impinging signals and
output a single qubit state. In this way, the neuron
model proposed above mimics as much as possible the
realistic neurons and meanwhile, uses quantum laws for
processing information.
The logic qubit is initially described by a density
matrix ρinj . By modeling each neuron as a logic qubit,
we only consider binary signals, namely, si = 0 or 1.
Whenever si = 1, corresponding to the case of a signal
input, a quantum operation (here, a superoperator) Wij
will be acted upon ρinj , while for si = 0 (zero input
signal), nothing will happen to ρinj . Obviously, such
a conditional operation, called the “controlled Kraus
operation” hereafter, is the generalization of the two-
qubit controlled unitary operations in hard quantum
computing. Meanwhile, each input neuron itself with
input si is also a logic qubit in a mixed state ρ
in
i . As a
3result, the evolution of the whole system from the initial
state
⊗nj
i=1 ρ
in
i ⊗ ρinj reads
ρout{i}j = T
⊗nj
i=1
Oij(ρini ⊗ ρinj )
≡ T
⊗nj
i=1
[(P|0〉
i
⊗ Iˆj + P|1〉
i
⊗Wij(t)](ρini ⊗ ρinj ).
(2)
Here the “superprojectors” P|s〉 are defined by P|s〉ρ =
|s〉 〈s| ρ |s〉 〈s|, Iˆ is the identity operator, and T represents
the time-ordering. Generally speaking, all Wij(t) are
acted upon the target neuron with specific temporal
patterns and as such, the time-ordering of these actions is
important as different Wij(t) might be noncommutative.
Note that, in addition to the conditional dynamical
evolution in Eq. (2), each quantum neuron can also be
subject to local noisy operations.
Here some remarks are in order. A neuron of the hu-
man brain normally has about 104 synapses on average.
It is this large number of input neurons that activate the
target neuron. According to modern neuroscience, the
connection matrix wij is the mathematical abstraction
of the synaptic efficacies of the inter-neuron synapses,
while impinging signals mathematically represent action
potentials. In classical neuron model, the activation of a
real neuron is then determined by the internal integrated
cell potential, or mathematically by the signal function
and the internal firing threshold. For real neurons, as
action potentials and cell potentials change much faster
than changes in synaptic efficacies, neuron activations
are a fast process, while the changes of synaptic efficacies
are a slow one. In classical neural networks, the change
of synaptic efficacies is implemented by a “learning
algorithm” [2, 13] during a learning process in response
to stable patterns of activity.
However, in the context of our current quantum neuron
model, the above remarks should be looked from a
different angle. Here a learning process is realized by
a “quantum learning algorithm” (see, e.g., Ref. [14] for
a review), i.e., a specific temporal pattern of quantum
operations Wij(t) depending on the states of input
neurons. By using various quantum learning algorithms,
the quantum neuron model opens a door to quantum
manipulations of real neurons, artificial intelligence, and
ultimately, the human brain. By sharp contrast, the
existing quantum neural networks [12] model neurons
as qubits in pure states and connection weights as
usual quantum logic gates. However, the human brain
is a highly open and decohering system. It is very
unlikely to model the human brain as a well isolated
quantum system. In our model, the human brain is
neither a classical computer (soft or hard) nor a standard
quantum computer, but something in between, namely,
a soft quantum computer. By modeling neuron nodes
as qubits in mixed states and their connections as
connection superoperators, we are left to see to what
extend our model could simulate and understand the real
functioning of the human brain.
We used the superprojectors P|s〉 in Eq. (2) to
select the computational basis as the input to the jth
neuron. In doing so, we have actually implicitly assumed
certain environment-induced decoherence [15] naturally
occurring in the cell body to choose the preferred basis,
namely, the computational basis. To be consistent for our
quantum neuron model, we have to determine the output
sj of the jth neuron in the same way. The final state of
the jth neuron can be obtained by tracing out all the
input states, namely, ρoutj = tr{i}ρ
out
{i}j = T
∏nj
i=1[piIˆj +
(1 − pi)Wij(t)]ρinj , where pi ≡ pi(0) = tr(|0〉i 〈0| ρini ) is
the probability of |0〉i within ρini . The output state is
then
ρj = (P|0〉j + P|1〉j )ρoutj . (3)
In other words, the output signal sj of the jth neuron is
sj =
{
0 with probability pj(0)
1 with probability 1− pj(0) (4)
This completes the specification of our quantum neural
network model as a soft quantum computer. In-
terestingly, the above prescriptions on the input and
output states in the preferred computational basis tacitly
assumed each neuron in our model as a quantum self-
measuring meter. This eliminates the ambiguity of
designating signal functions of various forms in classical
neural networks [13].
Physically, one could regard each input dendrite as
a quantum channel [3], which carries out a quantum
manipulation Wij if and only if si = 1. The depolarizing
channel can be represented by Wdp(ρ) =
∑
µMµρM
†
µ
with M0 =
√
1− pIˆ and Mk =
√
p
3
σk (k = 1, 2, 3;
0 ≤ p ≤ 1), where σk are the Pauli operators. For a
phase-damping channel Wpd(ρ) =
∑
µMµρM
†
µ, where
M0 =
√
1− pIˆ, M1 =
√
p
2
(1 + σ3), and M2 =
√
p
2
(1 −
σ3), while for an amplitude-damping channel Wad(ρ) =∑
µ MµρM
†
µ one has two Kraus operators M0 = |0〉 〈0|+√
1− p |1〉 〈1| and M1 = √p |0〉 〈1|.
Now it is ready to discuss some key features of
the current quantum neural network or soft quantum
computing. First we consider the simplest two-neuron
case. For the two neurons in the initial states ρin1 =
p1 |0〉1 〈0|+(1−p1) |1〉1 〈1| (p1 6= 0, 1) and ρin2 , the action
of a controlled Kraus operation O12 results in the final
state
ρout12 = (P|0〉1 ⊗ Iˆ2 + P|1〉1 ⊗W12)(ρin1 ⊗ ρin2 )
= p1 |0〉1 〈0| ⊗ ρin2 + (1 − p1) |1〉1 〈1| ⊗W12(ρin2 ),
(5)
where W12 represents a specific quantum channel. Is
ρout
12
4correlations, if any, of ρout
12
can be quantified by the
quantum discord [16]. Any bipartite state is called fully
classically correlated if it is of the form [17]
ρ12 =
∑
i,j
pij |i〉1 〈i| ⊗ |j〉2 〈j| ; (6)
otherwise, it is quantum correlated. Here |i〉
1
and
|j〉
2
are the orthonormal bases of the two parties, with
nonnegative probabilities pij .
Obviously, for the two-neuron state ρout
12
in Eq. (5)
the first neuron becomes correlated with nonorthogonal
states of the second neuron as far as W12(ρin2 ) and ρin2
are nonorthogonal [18–20], namely, ρout12 has quantum
correlations. In particular, Refs. [19, 20] show the
creation of discord, from classically correlated two-
qubit states, by applying an amplitude-damping process
only on one of the qubits; for the phase-damping
process, see Ref. [17]. Actually, ρout
12
in Eq. (5) is
the classical-quantum state, as dubbed in Ref. [19]—
While for measurements on neuron-1 the discord is zero,
measurements on neuron-2 in general lead to non-zero
discord.
Thus, we reveal the first important feature of our
neural network (a soft quantum computer). Namely,
the neural network can develop quantum correlations
although only mixed initial states and very noisy
operations are available. Consequently, if soft quantum
computing does mimic the working mechanism of the
human brain, the brain is certainly quantum as there
are quantum correlations among the neurons therein.
Now let us consider the three-neuron case. We
are interested in two particular examples, where two
controlled Kraus operations O13 and O23 are performed
in different orders, namely, ρout
123
= O13O23(ρin1 ⊗ρin2 ⊗ρin3 )
and ρ′out123 = O23O13(ρin1 ⊗ ρin2 ⊗ ρin3 ). Assuming ρin1 =
p1 |0〉1 〈0| + (1 − p1) |1〉1 〈1| and ρin2 = p2 |0〉2 〈0| + (1 −
p2) |1〉2 〈1| yields
ρout
123
= p1(1− p2) |0〉1 〈0| ⊗ |1〉2 〈1| ⊗W23(ρin3 )
+ p2(1− p1) |1〉1 〈1| ⊗ |0〉2 〈0| ⊗W13(ρin3 )
+ p1p2 |0〉1 〈0| ⊗ |0〉1 〈0| ⊗ ρin3 + (1− p1)
× (1− p2) |1〉1 〈1| ⊗ |1〉2 〈1| ⊗W13W23(ρin3 ). (7)
Meanwhile, it is easy to check that ρ′out123 can be obtained
from ρout
123
only by reversing the orders ofW13 andW23 in
the last term of Eq. (7). If (1− p1)(1− p2) 6= 0, then for
noncommutative W13 and W23 the resulting states ρout123
and ρout
123
are different from each other. The importance
of the quantum operation orders is a quantum feature,
which remains in our quantum neural network model.
Using the national representative surveys (Gallup polls)
and laboratory experiments, a recent result [21] reported
an evidence supporting a quantum model of question
order effects for human judgments. Whether or not our
quantum neural network model is a quantum mechanical
foundation for such a result is certainly an interesting
future problem.
Open quantum systems have been considered for
various applications in quantum information processing
by engineering environment [22, 23] and in particular, for
mixed-state quantum computing [24–27] or dissipative
quantum computing [28, 29]. While soft quantum
computing is no more powerful than the unitary circuit
model as implied by the “dissipative quantum Church-
Turing theorem” [29], there does exist a mixed-state
quantum computing model (with a collection of qubits
in the completely mixed state coupled to a single control
qubit with nonzero purity), proposed by Knill and
Laflamme [24] and known as deterministic quantum
computation with one qubit (DQC1), which provides
exponential speedup (for estimating the normalized-
trace of a unitary matrix) over the best known classical
algorithms. The possible role of quantum discord was
considered, e.g., in Refs. [18, 30, 31], as a figure of
merit for characterizing the nonclassical resources present
in the DQC1, which itself is a special soft quantum
computer. Thus, it is reasonable to expect that soft
quantum computing has computational power between
classical computation and usual quantum computation.
Finally, we give a brief remark on the physical
implementation of soft quantum computing. Above
discussions focus mainly on a special form of the
conditional dynamical evolution as in Eq. (2); more
general forms can of course be envisioned. A physical
realization of Oij is simple: The superprojectors P|s〉
i
correspond to a von Neumann measurement on neuron-
i along the computational basis; conditionally on the
measurement results, an identity operation Iˆ or Wij(t)
is acted upon neuron-j. Such a conditional dynamical
evolution is experimentally friendly to implementation
based on any quantum computing systems under current
investigation, such as linear optics, superconducting
qubits, atoms/ions, and quantum dots.
To summarize, we have proposed soft quantum
computing as nonclassical computation using real world
quantum systems with naturally occurring decoherence
and dissipation induced by environment. A mathe-
matical model of quantum neural network is suggested
to illustrate soft quantum computing. Even using
very simple and noisy operations [the controlled Kraus
operations in Eq. (2)], the quantum features, such as
the presence of quantum discord and non-commutability
of quantum operations, remain in our model. As an
experimentally friendly model, the neural network as
proposed mimics as much as possible the realistic human
brain and thus, paves the way to quantum artificial
intelligence and to better understanding the working
mechanism of the human brain. If the human brain
does be a soft quantum computer, it utilizes quantum
laws in such a fundamental way that it forms certainly
5a quantum correlated entity. This might be the reason
why the human brain is much more powerful for certain
tasks than classical computers, although we have to know
more consequences and applications of the model to
arrive at a conclusive result. While the soft quantum
computer is much easier to build than the standard one,
we need to do more works to understand what kinds
of computational tasks it can execute and to find the
corresponding efficient algorithms.
The author gratefully acknowledges warm hospitality
of the colleagues in School of Physics, Nanjing University,
where the present work was finished.
[1] L.A. Zadeh, Fuzzy Logic, Neural Networks, and Soft
Computing, Communication of the ACM 37, 77-84
(1994).
[2] A. Konar, Artificial Intelligence and Soft Computing:
Behavioral and Cognitive Modeling of the Human Brain
(CRC Press, Boca Raton, FL, 2000).
[3] J. Preskill, Quantum Information and Computation
(Lecture Notes for ph219/cs219, CIT, California, 2001).
[4] C. Nayak, S.H. Simon, A. Stern, M. Freedman, S. Das
Sarma, Non-Abelian Anyons and Topological Quantum
Computation, Rev. Mod. Phys. 80, 1083-1159 (2008).
[5] X.-C. Yao, T.-X. Wang, H.-Z Chen, W.-B. Gao, A.G.
Fowler, R. Raussendorf, Z.-B. Chen, N.-L. Liu, C.-Y. Lu,
Y.-J. Deng, Y.-A. Chen, and J.-W. Pan, Experimental
demonstration of topological error correction, Nature
482, 489-494 (2012).
[6] N. Lambert, Y.-N. Chen, Y.-C. Cheng, C.-M. Li, G.-Y.
Chen, and F. Nori, Quantum biology, Nature Phys. 9,
10-18 (2013).
[7] G.S. Engel, T.R. Calhoun, E.L. Read, T.-K. Ahn,
T. Mancˇal, Y.-C. Cheng, R.E. Blankenship, and G.R.
Fleming, Evidence for wavelike energy transfer through
quantum coherence in photosynthetic systems, Nature
446, 782-786 (2007); H. Lee, Y.-C. Cheng, and G.R.
Fleming, Coherence dynamics in photosynthesis: Protein
protection of excitonic coherence, Science 316, 1462-1465
(2007).
[8] E.M. Gauger, E. Rieper, J.J.L. Morton, S.C. Benjamin,
and V. Vedral, Sustained quantum coherence and en-
tanglement in the avian compass, Phys. Rev. Lett. 106,
040503 (2011); H.G. Hiscock, S. Worster, D.R. Kattnig,
C. Steers, Y. Jin, D.E. Manolopoulos, H. Mouritsen, and
P.J. Hore, The quantum needle of the avian magnetic
compass, Proc. Nat. Acad. Sci. (U.S.A.) 113, 4634-4639
(2016).
[9] S. Hameroff and R. Penrose, Consciousness in the
universe: A review of the ‘Orch OR’ theory, Phys. Life
Rev. 11, 39-78 (2014).
[10] H. Hu and M. Wu, Spin-mediated consciousness theory:
possible roles of neural membrane nuclear spin ensembles
and paramagnetic oxygen, Med. Hypotheses 63, 633-646
(2004).
[11] M.P.A. Fisher, Quantum Cognition: The possibility of
processing with nuclear spins in the brain, Ann. Phys.
362, 593-602 (2015); C.P. Weingarten, P.M. Doraiswamy,
and M.P.A. Fisher, A New Spin on Neural Processing:
Quantum Cognition, Front. Hum. Neurosci. 10, 541
(2016).
[12] M. Schuld, I. Sinayskiy, and F. Petruccione, The quest
for a Quantum Neural Network, Quantum Inf. Process.
13, 2567-2586 (2014).
[13] S. Kumar, Neural Networks: A Classroom Approach
(Tata McGraw-Hill Publishing Company, New Delhi,
2004).
[14] J. Biamonte, P. Wittek, N. Pancotti, P. Rebentrost, N.
Wiebe, and S. Lloyd, Quantum Machine Learning, arXiv:
1611.09347.
[15] W.H. Zurek, Decoherence, einselection, and the quantum
origins of the classical, Rev. Mod. Phys. 75, 715-775
(2003).
[16] H. Ollivier and W.H. Zurek, Quantum Discord: A
Measure of the Quantumness of Correlations, Phys. Rev.
Lett. 88, 017901 (2001).
[17] A. Streltsov, H. Kampermann, and D. Bruß, Behavior
of Quantum Correlations under Local Noise, Phys. Rev.
Lett. 107, 170502 (2011).
[18] B. Dakic´, V. Vedral, and Cˇ. Brukner, Necessary and
Sufficient Condition for Nonzero Quantum Discord,
Phys. Rev. Lett. 105, 190502 (2010).
[19] F. Ciccarello and V. Giovannetti, Creating quantum cor-
relations through local non-unitary memoryless channels,
Phys. Rev. A 85, 010102 (2012).
[20] B.P. Lanyon, P. Jurcevic, C. Hempel, M. Gessner,
V. Vedral, R. Blatt, and C. F. Roos, Experimental
Generation of Quantum Discord via Noisy Processes,
Phys. Rev. Lett. 111, 100504 (2013).
[21] Z. Wang, T. Solloway, R.M. Shiffrin, and J.R. Busemeyer,
Context effects produced by question orders reveal quan-
tum nature of human judgments, Proc. Nat. Acad. Sci.
(U.S.A.) 111, 9431-9436 (2014).
[22] S. Diehl, A. Micheli, A. Kantian, B. Kraus, H.P. Bu¨chler,
and P. Zoller, Quantum states and phases in driven open
quantum systems with cold atoms, Nature Phys. 4, 878-
883 (2008).
[23] J.T. Barreiro, M. Mu¨ller, P. Schindler, D. Nigg, T. Monz,
M. Chwalla, M. Hennrich, C.F. Roos, P. Zoller, and R.
Blatt, An open-system quantum simulator with trapped
ions, Nature 470, 486-491 (2011).
[24] E. Knill and R. Laflamme, Power of One Bit of Quantum
Information, Phys. Rev. Lett. 81, 5672-5675 (1998).
[25] D. Aharonov, A. Kitaev, and N. Nisan, Quantum Circuits
with Mixed States, arXiv: quant-ph/9806029.
[26] V.E. Tarasov, Quantum computer with mixed states and
four-valued logic, J. Phys. A 35 5207-5235 (2002).
[27] M. Siomau and S. Fritzsche, Quantum computing with
mixed states, Eur. Phys. J. D 62, 449-456 (2011).
[28] F. Verstraete, M.M. Wolf, and J.I. Cirac, Quantum
computation and quantum-state engineering driven by
dissipation, Nature Phys. 5, 633-636 (2009).
[29] M. Kliesch, T. Barthel, C. Gogolin, M. Kastoryano, and
J. Eisert, Dissipative Quantum Church-Turing Theorem,
Phys. Rev. Lett. 107, 120501 (2011).
[30] A. Datta, A. Shaji, and C.M. Caves, Quantum Discord
and the Power of One Qubit, Phys. Rev. Lett. 100,
050502 (2008).
[31] B.P. Lanyon, M. Barbieri, M.P. Almeida, and A.G.
White, Experimental Quantum Computing without En-
tanglement, Phys. Rev. Lett. 101, 200501 (2008).
",186276408,"{'doi': None, 'oai': 'oai:arXiv.org:1810.05025'}",Quantum Neural Network and Soft Quantum Computing,"{'code': 'en', 'name': 'English'}",2018-10-10T00:00:00+00:00,,[],['http://arxiv.org/abs/1810.05025'],,2018,"[{'type': 'download', 'url': 'http://arxiv.org/abs/1810.05025'}, {'type': 'display', 'url': 'https://core.ac.uk/outputs/186276408'}, {'type': 'similar', 'url': 'https://core.ac.uk/display/186276408?source=1&algorithmId=15&similarToDoc=&similarToDocKey=URL&recSetID=5b01a362-7b77-4901-9634-1318425f138a&position=3&recommendation_type=same_repo&otherRecs=186268113,162257170,186276408,229121698,343940970,154981140,158378844,157740116,189597082,153379796'}]","A new paradigm of quantum computing, namely, soft quantum computing, is
proposed for nonclassical computation using real world quantum systems with
naturally occurring environment-induced decoherence and dissipation. As a
specific example of soft quantum computing, we suggest a quantum neural
network, where the neurons connect pairwise via the ""controlled Kraus
operations"", hoping to pave an easier and more realistic way to quantum
artificial intelligence and even to better understanding certain functioning of
the human brain. Our quantum neuron model mimics as much as possible the
realistic neurons and meanwhile, uses quantum laws for processing information.
The quantum features of the noisy neural network are uncovered by the presence
of quantum discord and by non-commutability of quantum operations. We believe
that our model puts quantum computing into a wider context and inspires the
hope to build a soft quantum computer much earlier than the standard one.Comment: 5 pages, 1 figure; comments are welcom","['text', 'Quantum Physics', 'Computer Science - Artificial Intelligence']",disabled
,"[{'name': 'Hwang, Yongsoo'}, {'name': 'Kim, Taewan'}, {'name': 'Baek, Chungheon'}, {'name': 'Choi, Byung-Soo'}]",[],2019-02-06T06:42:45+00:00,"{'name': 'arXiv.org e-Print Archive', 'url': 'https://api.core.ac.uk/v3/data-providers/144'}",,research,10.1103/PhysRevApplied.13.054033,http://arxiv.org/abs/1809.07901,"ar
X
iv
:1
80
9.
07
90
1v
1 
 [q
ua
nt-
ph
]  
21
 Se
p 2
01
8
Integrated Analysis of Performance and Resource of
Large-Scale Quantum Computing
Yongsoo Hwang,1 Taewan Kim,1 Chungheon Baek,1 and Byung-Soo Choi1
1Electronics and Telecommunications Research Institute
To see the feasibility of a large-scale quantum computing, it is required to accurately analyze
the performance and the quantum resource. However, most of the analysis reported so far have
focused on the statistical examination, i.e., simply calculating the performance and resource based
on individual data, and even worse usually only a few components have been considered. In this
work, to achieve more exact analysis, we propose an integrated analysis method for a practical
quantum computing model with three components (algorithm, error correction and device) under
a realistic quantum computer system architecture. To implement the above method, we develop a
quantum computing framework composed of three functional layers: compile, system and building
block. This framework can support, for the first time, the mapping of quantum algorithm from
physical qubit level to system architecture level with a given fault-tolerant scheme. Therefore,
the proposed method can measure the effect of dynamic situation when the quantum computer
practically runs. By using our method, we found that Shor algorithm to factorize 512-bit integer
requires 8.78×105 hours. We also show how the proposed method can be used for analyzing optimal
concatenation level and code distance of fault-tolerant quantum computing.
I. INTRODUCTION
Over the last decades, diverse quantum computing
components from application to physical device have
been actively researched and developed. Some of them
already have theoretically optimal performance [3, 4, 20,
29, 30, 35]. Gigantic IT corporations have announced
that they succeeded in the development of dozens of qubit
system [1, 15, 22]. Even they expect to see a thousand
qubit system within ten years. Besides, several startups
also started to develop a quantum computing hardware
and software [32]. It seems that the era of a quantum
computing is gradually coming close to us.
So far, to see the feasibility of a practical large-scale
quantum computing, some efforts have been dedicated
to investigation into the quantity of the required quan-
tum resource [10, 19, 34, 37, 40–42] and the expected
performance [8, 21, 41, 45]. Based on such analysis, the
security of conventional cryptography against a theoret-
ically super-fast quantum computing also has been ana-
lyzed [11]. However, we think that the analysis reported
so far are not fully satisfactory because they usually have
considered only a few components of a quantum comput-
ing and/or focused on statistical examination. In par-
ticular, the analysis results with the statistical examina-
tion are nothing more than simple calculation based on
individual data of several quantum computing compo-
nents [41, 42].
To achieve more exact analysis, we believe the practical
operation of a quantum computing needs to be consid-
ered. For that, one first has to consider quantum comput-
ing components in terms of the practical operation. For
example, we have to prepare a quantum algorithm de-
composed into individual gates instead of only the dom-
inant part of a quantum algorithm. Second, the above
components have to be properly integrated with a target
quantum computer system architecture. For example, we
have to find a path for qubit movements (or braiding) on
the target system architecture without raising any con-
flicts with other paths. By doing so, the quantity of qubit
movements which cannot be considered in the statistical
analysis can be exactly measured, and therefore we can
say that the analysis results are realistic.
In this work, to perform the integrated analysis more
efficiently, we propose and develop a quantum computing
framework composed of three functional layers (compile,
system and building block), where each layer has a well-
defined role for a quantum computing as follows.
• Compile: Decomposition of a quantum algorithm
into a sequence of quantum gates called a quantum
assembly code
• System: Integration of a quantum algorithm and
building blocks under a quantum computer system
architecture
• Building Block: Implementation of logical qubits
and gates according to a quantum error-correcting
code and a fault-tolerant scheme
With the proposed framework, we can conduct the anal-
ysis in the most fine-grained manner. For example,
we even count a qubit movement one by one, and the
quantity of physical qubits based on the provided quan-
tum computer architecture and the ancilla qubits re-
quired for error correction and magic state. Further-
more, the framework examines the performance and the
resource with the criterion, 100% fidelity quantum com-
puting [49]. By doing so, we can provide full quantum
resource and compare various quantum computing con-
figurations fairly.
The objective of this work is to estimate the most ac-
curate quantum computing performance and quantum
resource by the help of the framework we developed. For
that, we first need to configure a quantum computing
2by choosing specific protocols and device properties. By
doing so, as mentioned above, we can see the quantum
resource and the performance of a quantum computing
based on most of quantum computing components from
algorithm to hardware. Besides, it is also possible to see
which component affects a quantum computing most se-
riously by applying realistic technology from the top layer
to the bottom layer gradually. In this regards, we can see
that a theoretically optimal protocol really leads to opti-
mal quantum computing or instead works suboptimally
in composition with other components.
By exploiting the accurate analysis function, we can
show numerical data for some theoretical conjectures in
the fault-tolerant quantum computing. In Steane code
based quantum computing, increasing a concatenation
level makes it possible to achieve more reliable quantum
computing, but we guess that the more does not lead to
the better all the time because a higher concatenation
level requires more quantum resource and longer execu-
tion time. Therefore, it is reasonable to guess that there
may exist a trade-off between the reliability and the per-
formance (resource). In this work, we show there exists
such trade-off, and in surface code based quantum com-
puting too.
The remainder of this paper is organized as follows.
Section II reviews some related works. Section III
overviews the proposed quantum computing framework
and describes how to configure and analyze a quantum
computing with the proposed framework. Section IV de-
scribes each layer of the proposed framework in detail.
Section V describes the performance metric we evaluated
in this work, and the analysis results will be shown in sec-
tion VI. Section VII discusses, by exploiting the proposed
framework, what happens in a quantum computing if an
individual component is improved. This paper concludes
with discussions in section VIII.
II. RELATED WORKS
We review several quantum computing frameworks dis-
cussing the performance and the quantum resource of a
quantum computing. Table I briefly summarizes the re-
lated works.
Quipper [12–14, 37] and ScaffCC [16, 18, 19] are frame-
works for quantum compile and resource estimation of
a quantum algorithm. They basically compile a pro-
grammed quantum algorithm into a sequence of quantum
instructions of a quantum gate and target qubit(s). From
the compile results, they statistically analyze the quan-
tum resource such as the quantities of gates and qubits.
All the data come from a quantum algorithm only. We
believe, without considering physical implementation of
the algorithm, the analysis results cannot be used for the
reference to the feasibility of a quantum computing.
Fowler et al. [8] approximated the quantum computer
size and the execution time of Shor algorithm (N = 2000)
with a surface code quantum computing. However, their
analysis is based on the dominant part of the algorithm
such as the modular exponentiation circuit only. There-
fore, the execution time completely depends on the quan-
tity of Toffoli gates in the circuit, the decomposition of
Toffoli gates and measurement gate execution time. The
size of a quantum computer was also calculated based on
the quantity of magic states to implement logical T gates
and the quantity of logical (algorithm) qubits. Jones et
al. [21] also estimated the performance and resource of a
quantum algorithm within their layered architecture for
a quantum computing. But, their analysis methods are
almost the same with Fowler et al. [8].
On the other hand, Reiher et al. [34] applied a quan-
tum compile and surface code error correction to estimate
the performance and the resource for quantum simulation
of complex chemical system. Since the authors did not
consider any quantum computer system architecture and
the system integration on the architecture, their analy-
sis corresponds to the statistical calculation based on the
data from compiled algorithm and fault-tolerant scheme.
Note that in the literature, the authors claimed that de-
spite overhead of quantum error correction and compile,
quantum computations can be performed within reason-
able time.
The toolbox for estimating quantum resource
QuRE [41, 42] considers most of quantum comput-
ing components such as quantum compile, quantum
error correction, physical qubit layout and quantum
computing device. By taking quantum compile, they
prepared all quantum gates of a quantum algorithm.
Furthermore, they covered both of block-type quantum
codes (Steane code and Bacon-Shor code) and surface
code and employed 2-dimensional qubit layout for their
logical qubits. In this regards, this toolbox performs the
analysis based on more quantum computing components
than before. However, their analysis method is still
statistical investigation. For example, their estimation
on the execution time of a quantum computing simply
depends on the quantity of quantum gates and its
running time,
∑
1/gparallel × #g × gT . Note that
gparallel denotes the quantity of gates g executed in
maximally parallel and gT is the execution time of the
gate. As mentioned before, it is difficult to say their
analysis results coincide with the practical situation.
III. CONFIGURATION OF QUANTUM
COMPUTING
We describe how to configure a quantum computing
with the proposed quantum computing framework. We
first overview the structure and functionality of our quan-
tum computing framework, and second describe how to
configure a quantum computing. We also describe which
schemes and protocols are currently supported by the
framework.
3TABLE I. Summary of the related works. Note that “△” indicates the corresponding component is partially applied. Namely,
as mentioned before, Refs. [8] and [21] perform the performance analysis based on only the dominant part of a quantum
algorithm, not covering all quantum gates. Besides, surface code basically requires that physical qubits are arranged on the
2-dimensional nearest neighbor layout. Therefore, the related works applying surface code error correction implicitly consider
a 2D layout of physical qubits in spite of explicitly no mentioning about the qubit layout.
Compile FTQC
Micro-Architecture System Analysis
(Qubit Layout) Synthesis Criterion
Quipper [13, 14, 37]
© X X X
One Time
ScaffCC [16, 18, 19] Computing
Fowler et al. [8]
△ Surface △ X
One Time
Jones et al. [21] Computing
Reiher et al. [34] © Surface △ X
One Time
Computing
QuRE [41, 42] ©
Steane,
Layout of Physical Qubits X
One Time
Computing
Bacon-Shor,
Surface
Present Work ©
Steane, Layouts of Physical and Logical Qubits,
© Fidelity 100%
Surface Communication Bus, Computing Regions
A. Overview of Framework
We describe the structure and functionality of the pro-
posed quantum computing framework. It deals with
quantum computing programming, quantum compile,
quantum computer architecture, fault-tolerant quantum
computing scheme and quantum computing device. To
this end the proposed framework is composed of three
functional layers: compile, system and building block.
Each layer has a well-defined role and provides several
options to conduct their functions. All layers are closely
related to each other. FIG. 1 shows the data flow on the
framework for performance analysis and quantum com-
puting.
The compile layer covers programming and compiling
a quantum algorithm. A quantum algorithm is written
in a high-level programming language, and then com-
piled into a sequence of quantum gates, called a quantum
assembly code. To compile a programmed quantum algo-
rithm, target quantum gates and compile algorithm have
to be determined beforehand. FIG. 2 shows the input
and output of the compile layer. In the present work, we
hire an open-source quantum computing compiler Scaf-
fCC [16, 18, 19] that supports programming language
Scaffold [17]. The details about quantum compile, quan-
tum gates and a quantum assembly code are described in
section IVA. Why we exploit ScaffCC (Scaffold) in this
work is also discussed there.
The system layer synthesizes a quantum computing by
integrating quantum algorithm, quantum computer ar-
chitecture and building block (qubit/gate and quantum
computing device). It deals with everything required to
run a quantum algorithm on a quantum computer sys-
tem architecture. For example, it recasts a quantum al-
gorithm for a target quantum computer architecture via
system synthesis (also called system mapping). For the
system synthesis, this layer first takes a quantum com-
puting system architecture. A qubit connectivity must
Compile System
Building
Block
Quantum
Algorithm
Physical
Device
Performance
Result
(a)
Device 
Signal
Compile System
Building
Block
Quantum
Algorithm
Physical
Device
(b)
FIG. 1. Data flow over the layers. (a) For the performance
analysis, the compile layer and the building block layer pro-
vide a quantum assembly code and the performance of logical
operations to the system layer. The system layer then per-
forms the performance analysis during the system mapping.
(b) The platform can be utilized to perform a practical quan-
tum computing. For that, all data is flowing sequentially from
the most top layer to the bottom layer. In the bottom layer
control signal for physical device has to be generated for the
practical computing.
be definitely defined there, and a communication bus
may be included for an efficient interaction over distant
qubits. Issues related to a quantum computer architec-
ture depend on a chosen quantum error-correcting code
and a fault-tolerant quantum computing scheme. FIG. 3
describes the input and output in the system layer. In
terms of the performance analysis, the output of the sys-
tem layer is the performance analysis result, but to run a
quantum algorithm this layer generates an architecture-
specific description of a quantum algorithm as shown in
FIG. 1.
The building block layer is associated with qubits and
gates of quantum algorithm. This work basically assumes
4Compile 
Layer
(Programmed)
Quantum
Algorithm
Target
Gates
Compile
Algorithm
Quantum
Assembly
Code
FIG. 2. The input and output in the compile layer. By
a compile, a programmed quantum algorithm is decomposed
into a quantum assembly code. For the compile, a compile
algorithm and target gates have to be determined beforehand.
Target gates can be varied according to a quantum computing
type such as a fault-tolerant quantum computing or a non-
fault-tolerant (physical) computing. The selection of target
gates can also be influenced by a qubit technology.
System 
Layer
Quantum
Assembly
Code Performance
Result
Logical
Gates
System
Mapping
Algorithm
Quantum
Computer
Architecture
FIG. 3. The input and output in the system layer. Quan-
tum assembly code and logical gates are passed from the com-
pile layer and the building block layer respectively. Quantum
computer architecture describes the layout of logical/physical
qubits and a communication bus over qubits. System map-
ping algorithm describes how to integrate a quantum algo-
rithm (quantum assembly code) and a quantum computer ar-
chitecture. It includes the qubit placement, the gate schedul-
ing and so on.
a fault-tolerant quantum computing, and therefore such
qubits and gates are related to logical qubits and gates
encoded in a quantum error-correcting code. In this re-
gards, the main functionality of this layer is to assemble
physical qubits and gates to implement a logical qubit
and gate. For that, a quantum error-correcting code
should be determined first, and then logical qubit and
gate will be implemented according to a fault-tolerant
quantum computing scheme of the chosen quantum code.
During the implementation, it is able to generate the per-
formance of logical qubit and gate based on the properties
of physical operations, time and fidelity (or error rate).
FIG. 4 shows the input and output at the building block
layer. In terms of the performance analysis, the output
of the building block layer is the performance of logical
quantum operations, time and fidelity. Note that the
proposed platform supports [[7, 1, 3]] Steane code and a
surface code.
Building
Block 
Layer
Device 
Properties
Quantum
Code
Logical Gates
FTQC
Scheme
FIG. 4. The input and output in the building block layer. To
make logical qubits/gates, a quantum error-correcting code
should be determined first. Besides, to derive the performance
of logical operations, the properties of physical device, time
and fidelity, have to be considered. Then, based on the physi-
cal device property and the fault-tolerant quantum computing
scheme, logical operations with a specific performance will be
generated.
B. Configuration of Quantum Computing
We describe how to configure a quantum computing
with the proposed framework. As mentioned above, it is
possible to configure a quantum computing by selectively
choosing specific protocols or the properties of physical
device. For example, you can configure a Steane code
based fault-tolerant quantum computing to run Shor al-
gorithm. For that, through compile you generate a quan-
tum assembly code. Logical building blocks are built
up based on the chosen quantum error-correcting code,
quantum device and the size of the quantum algorithm.
The next task is to determine a quantum computer archi-
tecture of a certain physical and/or logical qubit layout.
The architecture depends on the chosen fault-tolerant
quantum computing scheme. Note that it is also possible
to choose a physical non-fault-tolerant quantum comput-
ing by assuming high-fidelity quantum computing device
(see Section VIIB).
In Table II, we show some options our framework cur-
rently supports. In the table, the compile type and the
mapping type (with qubit layout) completely depend on
the type of a quantum assembly code, a structured code
and a non-structured code. A structured quantum as-
sembly code is processed by a structured system mapping
for a structured quantum computer architecture. Simi-
larly, a non-structured quantum assembly code is taken
by a non-structured system mapping based on a simple
qubit layout such as a regular 1- or 2-dimensional lattice.
The details of the structured and non-structured quan-
tum assembly codes will be described in Section IVA. In
Sections VI and VII, we configure quantum computings
with such options and analyze the performance and the
quantum resource.
With the proposed framework, a quantum comput-
ing can be configured as follows. The first step is
to determine the type of a quantum computing, a
fault-tolerant quantum computing or a non-fault-tolerant
physical quantum computing. In general, such deter-
5TABLE II. List of protocols and layouts currently supported by the framework. In the compile layer, we choose a compile
type and a target gate set. The compile type is the format of a quantum assembly code. The compile type is closely related
to the mapping type and qubit layout. A specific qubit layout can be chosen within a selection. In the building block layer,
the scheme for a fault-tolerant quantum computing is determined. According to the scheme, the protocol of logical operations
are fixed.
Layer Options Values
Compile
Compile Type Structured code, Non-Structured code
Target Gate Set
{X,Z,H,S(S†), T (T †), RZ(θ), CNOT},
{X,Z,H,S(S†), T (T †), CNOT}
System
Mapping Type Structured, Non-structured
Qubit Layout
(Non-structured) All-to-All, 1D, 2D, Arbitrary
(Structured) All-to-All, (1D, 1D), (1D, 2D), (2D, 2D)
Building FTQC Scheme Steane code, Surface code
Block Device Time, Fidelity
mination depends on the size of a quantum algorithm
and the assumption on the reliability of physical device.
The larger quantum algorithm requires the more reliable
qubits and gates. If you decided a fault-tolerant quan-
tum computing, you need to choose a quantum error-
correcting code. Our platform supports [[7, 1, 3]] Steane
code and a surface code now. According to a quantum
algorithm and the reliability (error rate) of physical de-
vice, the concatenation level for Steane code or the code
distance for a surface code will be determined.
The choice of the quantum computing type affects a
succeeding quantum compile step. Exactly, target quan-
tum gates for a compile completely depends on the cho-
sen quantum computing type. For example, RZ(θ) gate
for a rotational angle θ is very exploited in a quantum
algorithm, but its logical version is not generally imple-
mented in a fault-tolerant manner. Therefore, to realize
a fault-tolerant quantum computing, you have to decom-
pose such RZ(θ) gate into a sequence of H , S and T
gates those are fault-tolerantly implementable. On the
other hand, since the physical RZ(θ) gate can be easily
performed on physical qubits, there is no problem with
quantum gates including the rotational gate for a non-
fault-tolerant physical quantum computing.
The second step is to make a quantum computing pro-
gram and compile it into a quantum assembly code. As
mentioned above, for the compile, you have to exploit
target quantum gates determined in the previous step.
The proposed framework exploits open-source program-
ming language Scaffold and compiler ScaffCC. You can
see how to make a Scaffold program in Ref. [17] and how
to use ScaffCC compiler in Ref. [16, 19]. In section IVA,
we show a simple example of a Scaffold program and the
associated quantum assembly code. Note that ScaffCC
decomposes an arbitrary one-qubit gate into a sequence
of H , S and T by exploiting gridsynth [35] or sqct [24].
The third step is to choose a quantum computing archi-
tecture, in particular a qubit array. The proposed plat-
form takes not only a simple regular 1- or 2-dimensional
lattice, but also a hierarchically structured qubit array. A
communication bus also should be considered to make an
efficient interaction over distant qubits. FIG. 11 shows an
example of a hierarchically structured quantum comput-
ing architectures. In case of Steane code quantum com-
puting, the structure of a qubit array seriously affects a
quantum computing due to the limited local qubit inter-
action. We will show such limitation raises highly non-
trivial temporal overhead in section VIC. On the other
hand, surface code quantum computing scheme is fun-
damentally established based on local qubit interaction
on the 2-dimensional lattice. FIG. 14 shows a quantum
computing architecture for a surface code quantum com-
puting.
If the configuration is completed, we can perform the
system synthesis. During the system synthesis, the quan-
tum algorithm is reformulated for the target quantum
computer architecture. As will be discussed later, from
the system synthesis, the expected performance (circuit
depth, execution time, fidelity, KQ, and so on) and the
required quantum resource (qubits and gates) of a quan-
tum computing are evaluated.
C. Analysis of Quantum Computing
We briefly mention what performance are evaluated by
the framework, but the detailed analysis method will be
described in section V. The framework first inspects the
quantities of qubits and gates. Those figures are usually
analyzed by a quantum compile without considering a
quantum computer architecture [19, 37]. But, our frame-
work examines such quantities with the consideration for
a quantum computer system architecture. In the system
synthesis, a fault-tolerant quantum computing scheme in
particular a magic state factory is taken into considera-
tion. Therefore, it is possible to estimate the temporal
and spatial overhead caused by factors those are veiled
in a quantum algorithm, and therefore we believe our es-
timation nearly coincides with the resource to perform a
real quantum computing.
The framework examines the expected quantum com-
puting execution time (circuit depth, fidelity, KQ and
so on) of a quantum algorithm based on quantum com-
puter architecture, fault-tolerant protocol and physical
6device. By applying the properties of physical device
and fault-tolerant protocol, we deduce the performance
of logical gates and quantum error correction. Besides,
by conducting a system integration, we are able to obtain
the single-round execution time of a quantum algorithm
by applying the performance of logical gates and error
correction above. Our framework goes further for more
detailed analysis. During the system integration, as men-
tioned above, the fidelity of a quantum computing can
be calculated. By reflecting the fidelity, it is possible to
estimate the execution time for a quantum computing
achieving a fidelity 100%. In doing so, we fairly compare
fault-tolerant quantum computing and non-fault-tolerant
quantum computing. The quantity of qubits is also based
on this performance criterion.
Besides the above-mentioned, the framework can gen-
erate various performance data. Based on the data, we
can estimate the temporal and spatial overhead of a
quantum computing. For example, as mentioned above
limited local interaction between nearest neighbor qubits
sometimes requires additional qubit movements to per-
form 2-qubit CNOT gate. The quantity of such qubit
movements corresponds to the temporal overhead. The
platform evaluates such temporal overhead as a ration of
SWAP gates to total quantum gates. As will be shown
in section VIC, a quantum computing requires highly
nontrivial temporal overhead.
IV. PROPOSED QUANTUM COMPUTING
FRAMEWORK
A. Compile Layer
A quantum compile is a process that decomposes a
quantum algorithm into a sequence of quantum gates.
Here a quantum algorithm is in entirely programmed
form by using a high-level abstract programming lan-
guage. Recently, several research groups have developed
programming environments for a quantum computing by
modifying conventional classical programming languages
such as python and C/C++ [12, 14, 17, 28, 40, 50].
It is well known that an arbitrary quantum algorithm
can be decomposed into a combination of 1-qubit rota-
tional gates and 2-qubit CNOT gate [31]. The target
quantum gates for a compile can be varied according to
situation. For example, the set of H , T , and CNOT
is de facto standard for a universal fault-tolerant quan-
tum computing. But, to reduce the complexity in com-
pile or to provide a flexibility to a programmer, one
usually add more quantum gates to target gates. Fur-
thermore, according to specific quantum mechanical sys-
tem, physically implementable quantum gates slightly
differ [27, 31]. In this work, we utilize two sets of quan-
tum gates {X,Z,H, S(S†), T (T †), RZ(θ), CNOT } and
{X,Z,H, S(S†), T (T †), CNOT }. The difference between
both is RZ(θ) gate. As mentioned before, since the rota-
tional gate for an arbitrary rotational angle θ can not be
implemented in the fault-tolerant manner, the first set
is exploited for a physical quantum computing and the
second is used for a fault-tolerant quantum computing.
The output of the quantum compile, the sequence of
quantum gates, is called a quantum assembly code. A
quantum assembly code is a list of quantum instructions
that is a combination of a quantum gate and its tar-
get qubit(s). It is an intermediate representation of a
quantum algorithm between a mathematical description
and a physical machine instruction description [5, 19, 43].
There is not any standard for a quantum assembly code,
and therefore a specific representation and a structure of
which slightly differ according to literature. For exam-
ple, a quantum instruction to apply a Hadamard gate
to a qubit q is represented as “hadamard q” or “H(q)”.
Besides, a certain quantum assembly code has its own
special structure. For example, Open QASM by IBM [5]
provides a conditional statement “if... then... else” usu-
ally supported by conventional programming languages.
In the present work, we hire open-source quantum
compiler ScaffCC [16, 19]. It compiles a quantum com-
puting program written in quantum computing program-
ing language Scaffold [17]. A Scaffold program consists of
one main module and multiple sub-modules (see FIG. 7).
A module generally seems like a function or a procedure
of conventional programming languages such as C/C++,
Python and so on. The module is composed of instruc-
tions calling quantum gates and/or other modules. The
execution of a Scaffold program begins with the first in-
struction of the main module, and terminates by conduct-
ing the last instruction of the same module. During the
execution of the main module, other sub-modules may
be called.
Previously, we mentioned that some quantum assem-
bly codes have unique feature in their structure. So does
the output of ScaffCC. The compiler generates a hier-
archically structured quantum assembly code, in which
a quantum algorithm is composed of multiple modules.
A module consists of performing quantum gates and/or
other modules. In the previous paragraph, we also men-
tioned that a Scaffold program consists of modules. To
avoid any ambiguity, we need to distinguish both. A
module in a Scaffold program is completely defined and
written by a programmer, and through a compile it is
converted to a module in a quantum assembly code.
Therefore, both are technically identical. FIG. 5 shows
an example of a module in a quantum assembly code.
We need to say why we exploit ScaffCC in this work.
As mentioned above, a quantum assembly code is a list
of quantum instructions. As the size of a quantum algo-
rithm increases, the size of a quantum assembly code non-
trivially increases. It completely follows the complexity
of a quantum algorithm. Obviously, the size of meaning-
ful quantum algorithm in reality is beyond the capability
of conventional super-computing. In other words, the size
of a quantum assembly code for our interested algorithm
will be very huge, and such scalability will cause a prac-
tical problem in classical control of a quantum comput-
7// module name: module_name 
// parameter qubits: a, b, .. 
module module_name ( qbit a , qbit* b, …)       
{ 
    // local qubits 
    qbit scratch[n]; 
                            
    // classical bit 
    cbit answer[m];                             
    // initializing a local qubit as |0> 
    PrepZ ( scratch[0] , 0 );                   
    …     
    // one-qubit gate 
    H ( scratch[0] ); 
                           
    // two-qubit gate 
    CNOT ( scratch[2] , scratch[1] );           
    // sub-module 
    moduleA ( scratch[1] , scratch[2] , a[2] ); 
    // measure 
    answer[0] = MeasZ ( a[0] );                 
}
FIG. 5. An example of a module. Parameter qubits passed
from external modules are clearly specified at the beginning.
A module is defined by the preparation of local qubits and
classical bits, calling quantum gates and other sub-modules,
and measurement of local qubits.
ing. For example, the size of a quantum assembly code
of Shor algorithm to factorize 512 bit integer is around
39 TB (see FIG. 6). Therefore, we have had trouble in
generating and managing such a huge code with a clas-
sical computing system. We could not even attempt to
generate more larger-sized quantum algorithm than the
algorithm above due to the lack of classical storage and
memory.
On the other hand, it is believed that the hierar-
chy provided by ScaffCC can suppress the scalability.
For example, to perform a composite quantum opera-
tion of N gates as much as M times, a normal (non-
structured) quantum assembly code requires MN quan-
tum instructions (#gates × #iteration). However, the
hierarchical assembly code requires only M +N instruc-
tions (#gates + #iteration) by defining the operation
as a module. By doing this, the hierarchical quantum
assembly code is much smaller than the non-structured
code as shown in FIG. 6. To the best of our knowl-
edge, only ScaffCC supports such hierarchically struc-
tured quantum assembly code. This is the main reason
whey we exploit ScaffCC in the proposed platform.
To conclude this section, we show a simple exam-
ple of a Scaffold program to make a 5-qubit CAT state
1√
2
(|0〉⊗5 + |1〉⊗5) and a corresponding quantum assem-
bly code. Readers can see how to make a Scaffold pro-
gram in Ref. [17] and how to use ScaffCC compiler in
Ref. [16]. FIG. 7 shows a quantum circuit to implement
a 5-qubit CAT state and a corresponding Scaffold pro-
gram. A structured and a non-structured quantum as-
sembly code are respectively shown in FIG. 8.
1.7TB
14.2TB
39.0TB
23.5MB
88.1MB
338.6MB
Non-Modular QASM
Modular QASM
Q
A
S
M
 S
iz
e 
(B
y
te
s)
108
1010
1012
1014
Shor Algorithm Inputs
N 128 N 256 N 512
QASM Size: Non-Modular QASM and Modular QASM
FIG. 6. The size of the quantum assembly codes for Shor
algorithm n = 128, 256, and 512. Both codes are generated by
ScaffCC. As the input increases, the size of quantum assembly
code in the non-structured format increases over dozens TB.
|0〉 H •
|0〉 •
|0〉 •
|0〉 •
|0〉
(a)
#define size 5 
module MakeCAT(qbit* data) 
{ 
    H(data[0]); 
    for(int i=0; i<size-1; i++) 
    { 
        CNOT(data[i], data[i+1]); 
    } 
} 
int main() 
{ 
    qbit data[size]; 
    for(int i=0;i<size; i++) 
    { 
        PrepZ(data[i], 0); 
    } 
    MakeCAT(data); 
    return 0; 
}
module MakeCAT ( qbit* data )  
{ 
    H ( data[0] ); 
    CNOT ( data[0] , data[1] ); 
    CNOT ( data[1] , data[2] ); 
    CNOT ( data[2] , data[3] ); 
    CNOT ( data[3] , data[4] ); 
} 
module main (  )  
{ 
    qbit data[5]; 
    PrepZ ( data[0] , 0 ); 
    PrepZ ( data[1] , 0 ); 
    PrepZ ( data[2] , 0 ); 
    PrepZ ( data[3] , 0 ); 
    PrepZ ( data[4] , 0 ); 
    MakeCAT ( data ); 
qubit data0 
qubit data1 
qubit data2 
qubit data3 
qubit data4 
PrepZ data0 
PrepZ data1 
PrepZ data2 
PrepZ data3 
PrepZ data4 
H data0 
CNOT data0,data1 
CNOT data1,data2 
CNOT data2,data3 
CNOT data3,data4
(b)
FIG. 7. An example of a Scaffold program to implement a
5-qubit CAT state. (a) A quantum circuit and (b) its Scaffold
program. The module MakeCAT makes the CAT state.
B. System Layer
A quantum algorithm (quantum assembly code) is a
logic of how to solve a given problem. It is based on ideal
physical situation where noiseless physical gates and arbi-
trary long qubit interaction are allowed. In other words,
a quantum algorithm is developed without considering
any physical implementation.
On the other hand, a quantum computer where a quan-
tum algorithm is executed has a certain logical and phys-
ical architecture such as a qubit layout. Therefore, to
run a quantum algorithm on such quantum computer,
we need to reformulate the algorithm to be compatible
with the given quantum computer architecture. For ex-
ample, real quantum computing devices in IBM Quan-
tum Experience [15] have very limited qubit layout and
allow only one-directional CNOT. Therefore, the quan-
tum assembly codes shown in FIG. 8 can not be directly
executed on the IBM QX4 device (see FIG. 9 (a)) because
the codes include unallowable CNOT gates. Therefore,
8#define size 5 
module MakeCAT(qbit* data) 
{ 
    H(data[0]); 
    for(int i=0; i<size-1; i++) 
    { 
        CNOT(data[i], data[i+1]); 
    } 
} 
int main() 
{ 
    qbit data[size]; 
    for(int i=0;i<size; i++) 
    { 
        PrepZ(data[i], 0); 
    } 
    MakeCAT(data); 
    return 0; 
module MakeCAT ( qbit* data )  
{ 
    H ( data[0] ); 
    CNOT ( data[0] , data[1] ); 
    CNOT ( data[1] , data[2] ); 
    CNOT ( data[2] , data[3] ); 
    CNOT ( data[3] , data[4] ); 
} 
module main (  )  
{ 
    qbit data[5]; 
    PrepZ ( data[0] , 0 ); 
    PrepZ ( data[1] , 0 ); 
    PrepZ ( data[2] , 0 ); 
    PrepZ ( data[3] , 0 ); 
    PrepZ ( data[4] , 0 ); 
    MakeCAT ( data ); 
}
qubit data0 
qubit data1 
qubit data2 
qubit data3 
qubit data4 
PrepZ data0 
PrepZ data1 
PrepZ data2 
PrepZ data3
PrepZ data4
H data0 
CNOT data0,data1 
CNOT data1,data2 
CNOT data2,data3 
CNOT data3,data4
(a)
#define size 5 
module MakeCAT(qbit* data) 
{ 
    H(data[0]); 
    for(int i=0; i<size-1; i++) 
    { 
        CNOT(data[i], data[i+1]); 
    } 
} 
int main() 
{ 
    qbit data[size]; 
    for(int i=0;i<size; i++) 
    { 
        PrepZ(data[i], 0); 
    } 
    MakeCAT(data); 
    return 0; 
module MakeCAT ( qbit* data ) 
{ 
    H ( data[0] ); 
    CNOT ( data[0] , data[1] ); 
    CNOT ( data[1] , data[2] ); 
    CNOT ( data[2] , data[3] ); 
    CNOT ( data[3] , data[4] ); 
} 
module main (  ) 
{ 
    qbit data[5]; 
    PrepZ ( data[0] , 0 ); 
    PrepZ ( data[1] , 0 ); 
    PrepZ ( data[2] , 0 ); 
    PrepZ ( data[3] , 0 );
    PrepZ ( data[4] , 0 ); 
    MakeCAT ( data ); 
qubit data0 
qubit data1 
qubit data2 
qubit data3 
qubit data4 
PrepZ data0 
PrepZ data1 
PrepZ data2 
PrepZ data3 
PrepZ data4 
H data0 
CNOT data0,data1 
CNOT data1,data2 
CNOT data2,data3 
CNOT data3,data4
(b)
FIG. 8. Quantum assembly codes to generate a 5-qubit CAT
state. (a) A structured code and (b) a non-structured code.
0 1
3 4
2
(a)
qubit data0 
qubit data1 
qubit data2 
qubit data3 
qubit data4
PrepZ data0 
PrepZ data1 
PrepZ data2 
PrepZ data3
PrepZ data4 
H data1
CNOT data1,data0
H data0
H data2
CNOT data2,data1
H data1
H data3
CNOT data3,data2
H data2
H data3
CNOT data3,data4
qubit data0 
qubit data1 
qubit data2 
qubit data3 
qubit data4 
PrepZ data0 
PrepZ data1 
PrepZ data2 
PrepZ data3 
PrepZ data4 
H data0 
H data0 
H data1 
CNOT data1,data0
H data0 
H data1 
H data1 
H data2 
CNOT data2,data1 
H data1 
H data2 
H data2 
H data3 
CNOT data3,data2 
H data2 
H data3 
CNOT data3,data4
(b)
FIG. 9. (a) The qubit layout of IBM QX4 device [15]. A node
indicates a qubit, and an edge with a direction implies that
the application of a controlled-CNOT gate is possible, where
the control qubit and the target qubit are the root and end
of the arrow. Therefore, as you see no bi-directional CNOT
is allowed on the IBM QX4. (b) The recasted assembly code
from FIG. 7 (b). Since the instruction “CNOT data0,data1“
is not allowed directly on the IBM QX4, Hadamard gates, “H
data1” and “H data2”, have to add before and after of the
instruction. Note that the node index k indicates the qubit
datak. We have not cancel out repetitive Hadamard gates. By
cancelling out those gates, the circuit depth can be reduced
from 12 to 9.
for the execution, we have to recast a quantum assembly
code for IBM QX4. In FIG. 9 (b), we show the recasted
(non-structured) quantum assembly code for the device.
This is the motivation of a quantum computing system
mapping.
The principle of a quantum computing system map-
ping is very simple, 1) set up a quantum computer archi-
tecture and 2) recast a quantum assembly code for the
architecture. In what follows, we first describe a quantum
computer architecture, and then show how to actualize a
quantum algorithm on the target architecture.
1. Quantum Computer Architecture
We discuss a hierarchically structured quantum com-
puter architecture for the proposed framework. In gen-
module PARSENODEEVEN ( qbit* a , qbit* even )  
{ 
    qbit scratch[3]; 
    PrepZ ( scratch[0] , 0 ); 
    PrepZ ( scratch[1] , 0 ); 
    PrepZ ( scratch[2] , 0 ); 
    X ( scratch[2] ); 
    ToffoliImpl ( scratch[1] , scratch[2] , a[2] ); 
    ToffoliImpl ( even[0] , scratch[2] , a[2] ); 
    X ( scratch[2] ); 
    CNOT ( scratch[2] , scratch[1] ); 
    CNOT ( scratch[2] , scratch[0] ); 
    X ( scratch[2] ); 
    ToffoliImpl ( scratch[0] , scratch[2] , a[1] ); 
    X ( scratch[2] ); 
    CNOT ( scratch[2] , scratch[1] ); 
    X ( scratch[2] ); 
    ToffoliImpl ( scratch[1] , scratch[2] , a[2] ); 
    X ( scratch[2] ); 
}
a[0] a[1] a[2]
a[3]
even 
[0]
scratch 
[0]
scratch 
[1]
scratch 
[2]
NULL
(a)
module PARSENODEEVEN ( qbit* a , qbit* even ) 
{ 
    qbit scratch[3];
    PrepZ ( scratch[0] , 0 ); 
    PrepZ ( scratch[1] , 0 ); 
    PrepZ ( scratch[2] , 0 ); 
    X ( scratch[2] ); 
    ToffoliImpl ( scratch[1] , scratch[2] , a[2] ); 
    ToffoliImpl ( even[0] , scratch[2] , a[2] ); 
    X ( scratch[2] ); 
    CNOT ( scratch[2] , scratch[1] ); 
    CNOT ( scratch[2] , scratch[0] ); 
    X ( scratch[2] ); 
    ToffoliImpl ( scratch[0] , scratch[2] , a[1] ); 
    X ( scratch[2] ); 
    CNOT ( scratch[2] , scratch[1] ); 
    X ( scratch[2] ); 
    ToffoliImpl ( scratch[1] , scratch[2] , a[2] ); 
    X ( scratch[2] ); 
a[0] a[1] a[2]
a[3]
even 
[0]
scratch 
[0]
scratch 
[1]
scratch 
[2]
NULL
(b)
FIG. 10. (a) An example of a module in a quantum assembly
code and (b) the associated computing region on a quantum
computer architecture. In (a), the qubits a and even are
parameter qubits passed from other modules, and the qubit
scratch is a local qubit locally used within the module. In (b),
the dark grey cells are for the parameter qubits, the white cells
are for the local qubits and the light grey cells are just empty
space or null qubits not working anything. While the size
of the parameter qubits a and even are not specified in the
module definition, it can be determined by tracing all modules
that calls the module.
eral, there is no restriction to the architecture. In other
literature, a regular 1- or 2-dimensional lattice is usually
exploited. But, in this work we assume that it is hier-
archically structured. A quantum computer is composed
of several computing regions called a module and a com-
munication bus connecting to the modules. By assuming
such structured architecture, the system mapping with a
hierarchically structured quantum assembly code can be
done efficiently.
A computing region is completely associated with a
module in a quantum assembly code. It consists of mul-
tiple cells for logical (or physical) qubits described in the
module. Some cells are allocated for parameter qubits
passed from other modules, and others are allocated for
local qubits which are temporarily used within a module.
Additional space may be sometimes required to form the
rectangular shape of a module. FIG. 10 shows an ex-
ample of a module in a quantum assembly code and its
associated computing region.
FIG. 11 shows examples of the above-mentioned quan-
tum computer architecture. The box labelled Mi,j (Mi)
indicates a module (computing region). We call the ar-
rangement of modules a global layout and the arrange-
ment of qubits within a module a local layout. All mod-
ules communicate with each other via a communication
bus. In the figure, the bus is depicted as a white space
outside of modules. We will discuss the bandwidth of the
communication bus in Section V.
Qubit that resides inside a module supports universal
quantum operation. The logical qubit is composed of
data qubits for holding data and ancilla qubits for error
correction and logical operations. On the other hand,
qubits for a communication bus only perform error cor-
rection and logical Clifford operations. Therefore, the
9M1,1 M1,2 … M1,n
M2,1 M2,2 … M2,n
… … … …
Mn,1 Mn,2 … Main
BUS
bandwidth
b
a
n
d
w
id
th
(a)
BUS
…
b
a
n
d
w
id
th
MainM1 M2 M3 M4 M5 M6
(b)
FIG. 11. An example of a proposed quantum computer
architecture. (a) 2D global layout and 2D local layout. (b) 1D
global layout and 2D local layout. tLogical qubits of different
color play different role in a module; parameter qubits (dark
grey), local qubits (white) and dummy qubits (light grey).
composition of logical qubits for a communication bus
can be differ from that for modules according to a quan-
tum error-correcting code and a fault-tolerant quantum
computing scheme.
2. System Mapping
FIG. 1 shows that all data are collected in the sys-
tem layer and the performance of a quantum computing
is evaluated there. In this section, we will describe the
system mapping in terms of the gate reformulation for
the target quantum computer structure and the perfor-
mance evaluation. A specific mapping process definitely
depends on the type of quantum instructions. Quantum
instructions in the hierarchically structured quantum as-
sembly code are classified into three types: 1-, 2-qubit
gate and module.
The set of 1-qubit gates includes X , Z, H , S (S†), T
(T †), RZ(θ) and a preparation and a measurement in the
Z basis. The mapping process for such gates is straight-
forward and can be done independently. Suppose that a
Hadamard gate is applied to a qubit q. If the application
of a certain quantum operation to the qubit was sched-
uled previously, the application of Hadamard gate will be
performed after the previous operation. If the previous
operation was over at time t(q), then Hadamard opera-
tion will start at t(q) and finish at t(q) +Ht, where Ht
is the execution time of the gate. This is everything for
the mapping of an 1-qubit gate. Note that the execution
time and fidelity of a quantum gate is provided from the
building block layer.
The present work deals with a CNOT gate only for a
2-qubit gate. Even though there is a case when a SWAP
gate is required, it is possible to implement a SWAP gate
with three CNOT gates. We deal with a CNOT gate as a
local gate acting on two qubits located in nearest neigh-
bor. Suppose that a CNOT gate is applied to qubits qa
and qb. Then, to execute the gate, both qubits have to
be in temporary and spatially ready status. If the are
apart, we have to move both qubits to be in neighbor
via SWAP operations. If one qubit is being manipu-
lated by other operation, we have to delay the CNOT
operation until both qubits are in idle status. Then, the
CNOT operation definitely begins at max{t(qa), t(qb)},
and finishes at time max{t(qa), t(qb)} + CNOTt. Note
that max{t(qa), t(qb} is the time both qubits become idle
status, and CNOTt is the execution time of a CNOT
gate.
The third type quantum instruction, a module, seems
like a multi-qubit composite quantum operation. There-
fore, on the surface, it seems that the mapping of a mod-
ule is very similar with the mapping of a 2-qubit CNOT
gate. For the mapping of a module, argument qubits for
a module should be temporally and spatially ready. The
critical difference from the case of a CNOT gate is that
a distinguished physical space1 is allocated for a module.
Therefore, to perform the mapping of a module, we have
to consider qubit movements between a present module
and a target module.
Suppose that a module A is being mapped now, and
we have to treat a quantum instruction “M (qa, qb, qc)”
that calls a module M with argument qubits qa, qb and
qc. Then, we have to move the argument qubits to the
designated area of the module M . The qubit movements
are achieved by SWAP operations through a communica-
tion bus. We call this movement a forward qubit passing.
After the forward qubit passing, the qubits will be placed
at the parameter qubit section of the module M . Please
see FIG. 10 (b). Quantum instructions of the module
M will then be executed. If it is faced with a quantum
instruction calling other module, then some qubits in the
module M will be passed to the designated space of the
newly called module and manipulated there by following
the quantum instructions of the module. After executing
all quantum instructions of the module M , the passed
qubits have to be back to the original module A. We
call this returning movement a backward qubit passing.
FIG. 12 shows the module operation including the for-
ward and backward qubit passings.
1 The physical space for a module is the computing region we de-
scribed before.
10
Module A
Module B
②
③ ①
④
⑤ ⑥
⑦
FIG. 12. An example of the module operation that consists
of seven steps: 1. (forward) move qubits to the bus, 2. (for-
ward) move to the target module, 3. (forward) move to the
parameter qubit cells (dark grey cells), 4. module operations,
5. (backward) move qubits to the bus, 6. (backward) move to
the original module, and 7. (backward) move to the original
qubit positions.
We perform the mapping for all modules sequentially
as they appear in a quantum assembly code. For that,
we have to keep two lookup tables, a global lookup ta-
ble and a local lookup table. For each module, we first
initialize a local lookup table for all qubits, and update
the manipulation time of each qubit as we process each
quantum instruction. After processing all instruction of
a module, we determine the execution time of the mod-
ule by picking up the maximum time among all qubits.
The performance of a module is recorded in the global
lookup table. During the mapping of a module, if a mod-
ule which was already mapped is called then we can refer
the performance information of the called module from
the global lookup table.
After mapping all modules, we can determine the ex-
ecution time of a quantum algorithm as the maximum
time among the qubits in the main module. For exam-
ple, in FIG. 8 (a), the execution time of the algorithm
is PrepZt + FPmain→MakeCAT + BPmain←MakeCAT +
MakeCATt, where MakeCATt = Ht + 4CNOTt. Note
that FPmain→MakeCAT (BPmain←MakeCAT ) is the time
for the forward (backward) qubit passing. The execu-
tion time of the qubit passing depends on the distance
between modules.
So far, we have described a system mapping algorithm
for a hierarchically structured quantum assembly code.
By the way, the presented algorithm can be applied to
a non-structured quantum assembly code. In such code,
there are two types of quantum instructions: 1- and 2-
qubit gate. Regardless of the type of a quantum assembly
code, as mentioned before the heart of the system map-
ping is 1) set up a quantum computer architecture and
2) recast quantum algorithm for the architecture. To be
compatible with the quantum assembly code, a simple
qubit array such as a regular 2-dimensional lattice may
be enough. The proposed framework supports a system
mapping on an arbitrary qubit layout as shown in FIG. 9
(a).
C. Building Block Layer
We apply fault-tolerant quantum computing protocols
based on [[7, 1, 3]] Steane code [38] and surface code [8, 9].
Both codes have well-studied logical gate protocols. The
concatenation level for Steane code and the code distance
for a surface code are completely determined by a given
quantum algorithm [21, 41]. In this work, we set both
figures by using KQ formalism [39].
1. Steane code
[[7, 1, 3]] Steane code encodes logical quantum informa-
tion in a qubit into seven physical qubits, and protects
it from an arbitrary 1-qubit quantum noise. Since the
transversal implementations for a logical Hadamard and
a logical CNOT gate are supported, many studies on the
fault-tolerant quantum computing based on the Steane
code have been conducted. In Ref. [44], an optimal design
of a logical qubit for Steane code under the 2-dimensional
nearest neighbor qubit interaction was proposed. They
achieved the threshold O(10−5) with 48 physical qubits
and modified quantum error correction.
In this work, we have redesigned a logical qubit with
30 physical qubits. Seven among them are used for hold-
ing data, and the others are temporarily used for log-
ical operations and error correction. In particular, we
applied the Shor quantum error correction [36] that ex-
ploits 4-qubit Shor state for the syndrome measurement.
For that, we prepare and verify the Shor state [48]. We
implemented the preparation of a logical state by follow-
ing Ref. [10]. Most of logical gates are implemented as
transversal gates, and the non-Clifford T gate is imple-
mented by exploiting a magic state. We generate magic
states by employing a 7-qubit Shor state without magic
state distillation [47].
Accuracy threshold theorem [2, 25] says that if we have
a quantum device of physical error rate below a code
threshold, it is possible to achieve an arbitrarily reliable
quantum computing. But, for a very large-sized quan-
tum algorithm, encoding only once may not be enough.
Fortunately, by encoding a qubit recursively [26], we can
lower the effective error rate to the degree where a reli-
able quantum computing is possible.
Given a quantum algorithm, we can calculate KQ and
determine the maximum tolerable error rate Pmax as
1/KQ. We then determine the concatenation level l by
the following inequalities satisfies
Pmax ≥
(copp
2)
2
l
cop
, (1)
where op is quantum error correction and logical opera-
tions, and cop is the constant factor of a specific logical
operation op. We obtained the constant values of each
logical operation from KQ of a quantum circuit for the
operation. For example, cQEC corresponds to KQ of the
11
TABLE III. The arrangement of qubits to implement a
logical qubit in the concatenation level l. The component
qubits are in the concatenation level l−1. The qubit denoted
by D[i] indicates a i-th data qubit. The qubits 4Sh[i] and
7Sh[j] are for 4- and 7-qubit Shor states for syndrome
measurement and a logical T gate, and V4Sh and V7Sh are
used to verify the 4- and 7-qubit Shor states respectively.
The qubit M [i] is also used to implement a logical T gate.
V4Sh[1] V4Sh[2] D[1] D[2] D[3]
4Sh[1] 4Sh[2] D[4] D[5] D[6]
4Sh[4] 4Sh[3] D[7] V7Sh[1] V7Sh[2]
M [1] M [2] M [3] M [4] M [5]
M [6] M [7] V7Sh[3] 7Sh[1] 7Sh[2]
7Sh[3] 7Sh[4] 7Sh[5] 7Sh[6] 7Sh[7]
QEC quantum circuit. In this work, we have not op-
timized the arrange of qubits (see Table III), and there-
fore the quantum error correction and a logical operation
work sub-optimally, and therefore the threshold is lower
than the optimal value2.
Suppose that a concatenation level for a quantum com-
puting is determined as l. The implementation of a log-
ical T gate in the level l consists of only Clifford oper-
ations in a lower level k < l. Then, in the level k, the
implementation of a logical T gate is not necessary and
therefore the qubits to implement a magic state, the 7-
qubit Shor state, are not strongly required. Therefore
only 23 qubits are required to implement a logical qubit
in the lower level k. But, to form a rectangular shape of
a logical qubit, we require 25 qubits (5 × 5 layout) for a
lower level qubit in the level k. In Table III, the qubits
denoted by 7Sh[i] is not required in the lower level qubit
k. On the other hand, the qubits V7Sh[i], the main role
of which is to verify the 7-qubit Shor state, are used for
the other purpose, logical measurement.
2. Surface code
2D surface code based fault-tolerant quantum comput-
ing is recognized as the most promising fault-tolerant
quantum computing scheme due to physically less chal-
lenging requirements. The code has a high threshold
aroundO(10−3) [9, 33, 46], and its structure is well suited
to nearest neighbor interacted qubits arranged on the 2-
dimensional lattice. In this work, we have implemented
double defect based logical qubits and logical gates de-
scribed in Refs. [8, 9, 41]. The detailed protocols are be-
yond the scope of the present work, and we will describe
performance parameters only.
We use the KQ formalism to determine a code dis-
tance d [21, 41]. The objective error rate of a quantum
2 Please note that the objective of our work is not to increase
a code threshold, but to configure a quantum computing and
analyze its performance accurately.
computing is determined by Pfail ≈ KQǫL, where ǫL is
a logical error rate. The code distance d is determined
as
d ≈
2
(
log ǫL − logC1
)
logC2 + log
ǫp
ǫth
− 1, (2)
where ǫp and ǫth are physical error rate and the threshold
of the surface code respectively. C1 and C2 are code
parameters, and we use the specific figures, C1 ≈ 0.13,
C2 ≈ 0.61, from Ref. [21]. We apply the code threshold
ǫth = 0.009.
Now it is possible to determine the execution time of
surface code logical gates. Above all, we need to stress
that the surface code error correction has to iterate d
rounds of a syndrome measurement. We assume that
logical Pauli operators are performed in classical control
software by updating logical Pauli frame [8]. A logical
CNOT gate between the same type (X-cut or Z-cut)
logical qubits consists of three CNOT gates between dif-
ferent type logical qubits. For that, we have to prepare a
pair of different type logical ancilla qubits [8]. A logical
Hadamard gate protocol consists of cutting and recon-
necting a target logical qubit from/to a whole qubit ar-
ray and performing transversal physical Hadamard and
SWAP gates [6, 8]. The Hadamard gate makes the role of
syndrome qubits interchanged, and the syndrome qubit
reverts to the original position (role) via the SWAP op-
eration.
We now turn the attention to the non-transversal gates
S and T . A logical S gate is deterministically imple-
mented by using a high fidelity magic state |YL〉 =
1√
2
(
|0L〉 + i|1L〉
)
[8, 21]. Since the magic state is not
destroyed during the gate protocol, it is possible to reuse
it if plenty of high fidelity magic states are prepared at
the beginning. Therefore before running a quantum al-
gorithm, we prepare a number of |YL〉 states. We include
the duration of preparing the states in the execution time
of a quantum computing. How many |YL〉 states should
be prepared will be discussed later.
A logical T gate is implemented by consuming a high
fidelity magic state |AL〉 =
1√
2
(
|0L〉 + exp
iπ/4 |1L〉
)
[8].
A magic state has to be prepared for every T gate. We
assumed that a magic state is prepared and supplied in
offline. In other words, the preparation of a high fidelity
|AL〉 is not included in the quantum computing time.
On the other hand, the logical T gate operation is prob-
abilistically achieved up to the logical S gate correction.
Therefore to implement a logical T gate, a |YL〉 state is
probabilistically required.
We now discuss the quantity of the required |YL〉
states. It depends on the quantity of the states maxi-
mally required at one time. Since a logical T gate prob-
ably requires a |YL〉, we have to prepare |YL〉 as much as
max{parallelT, parallelS} where parallelT (parallelS)
is the number of T (S) gates executed in parallel. Note
that the quantities of parallelT and parallelS can be
found from the system mapping process.
12
The preparation of a high fidelity magic state takes
two steps, state injection and state distillation [7, 8].
The state injection in the surface code quantum com-
puting injects an arbitrary logical state into the distance
1 logical qubit called a short qubit and makes the log-
ical qubit larger [8]. Enlarging a double defect logical
qubit consists of multi-cell qubit movements and mea-
surement on data qubits. The state distillation protocol
takes m noisy states and generates k less noisy states,
where m > k. By performing multiple rounds of the dis-
tillation, the magic spreaded over many states are con-
centrated on only a few states and therefore we can ob-
tain high fidelity magic states. In this work, we deal
with the magic state distillation protocols described in
Refs [8, 9]. The required iteration of the protocol is com-
pletely determined by the objective fidelity and a phys-
ical error rate [41]. We set the objective error rate of
the magic states as 10−12 to achieve high fidelity for the
configured quantum computing3, and empirically the 2-
round distillation achieved the objective error rate in the
physical error rate 10−3 ∼ 10−5.
We determine the capacity of a magic state factory that
prepares and supplies |AL〉 states. The capacity depends
on a quantum algorithm and the durations of a state dis-
tillation and a logical T gate. Suppose that a logical T
gate is applied consecutively to a qubit. Then, a magic
state factory has to supply high fidelity magic states con-
tinuously. If a magic state factory generates only one
magic state at a time, there may happen a latency for the
supply of the magic states if the magic state distillation
takes more time than the duration of a logical T gate.
Therefore, the magic state factory has the capacity to
prepare at least max{parallelT }× time(MSD)/time(T )
states at a time where time(MSD) and time(T ) are the
durations of the magic state distillation and the logical
T gate protocol. Empirically, the time(MSD)/time(T )
is approximately 20 in our estimation.
To conclude, the required physical qubits for |AL〉 and
|YL〉 are respectively
max{parallelT } ·
time(MSD)
time(T )
·
(
15 ·QL)
r−1 · (16 ·QL),
(3)
and
max{parallelT, parallelS} ·
(
7 ·QL
)r−1
· (8 ·QL), (4)
where QL is the number of physical qubits to implement
a logical qubit and r is the required iterations. The last
distillation round requires one more logical qubit from
the Bell state [8]. Above this, the ancilla qubits to per-
form CNOT gates during the distillation protocol also
should be included.
3 1/#T gates
V. PERFORMANCE METRIC
We describe how to evaluate the quantum comput-
ing metrics, execution time, fidelity and the quantity of
qubits.
A. Execution Time
We examine the quantum computing time in two steps.
In the system mapping, we obtain the single round exe-
cution time Tone of a quantum algorithm. At the same
time, the fidelity Falg of a quantum computing can be
determined. Note that how to calculate the fidelity of a
quantum computing is described in the following section.
Since Tone is the time for running a quantum algorithm
once, and there is no guarantee about a reliable quan-
tum computing. Noisy components may make a quan-
tum computing broken. To overcome the problem, we
calculate the average execution time Tavg by reflecting
the number of the required iterations to achieve the fi-
delity 1 as
Tavg = Tone/Falg. (5)
We believe this averaged time shows the time required for
getting a reliable answer from a quantum computing4.
B. Fidelity
The fidelity of a quantum computing can be calcu-
lated based on the fidelity of logical quantum gates as
follows [41],
Falg =
∏
g
Fg
Ng , (6)
where g is a quantum gate utilized in the algorithm. Fg is
the fidelity of the gate g, and Ng is the total count of the
gate in the algorithm. The value Ng can be found from
the system mapping and Fg is determined in the building
block layer. By the way, this fidelity calculation is only
applicable to Steane code based quantum computing. As
shown in Section IVC2, the final fidelity of a surface code
based quantum computing is given by Falg = 1−KQ ·ǫL.
C. The Number of Physical Qubit
We examine the quantity of physical qubits required
to run a quantum algorithm. Since the quantity of the
4 This does not indicate that the output from a quantum comput-
ing is an exact solution. We do not consider the probabilistic
nature of a quantum algorithm.
13
required qubits differs according to a fault-tolerant quan-
tum computing scheme, we first identify the common fac-
tor, the qubits in a quantum algorithm, and then go in-
side specific cases later.
The proposed hierarchical quantum computer struc-
ture consists of multiple modules and a communication
bus connecting all modules. In the quantum assembly
code, we can find the quantity of logical (or physical)
qubits for a module.
Qcomp =
∑
M
(
QMlocal +Q
M
param
)
, (7)
where QMlocal (Q
M
param) is the number of local (parameter)
qubits of a (computing) module M .
1. Steane Code Quantum Computing
We consider the Steane code quantum computing. The
structure of a communication bus depends on the chosen
global layout over all modules. On the 1D global layout,
the number of the qubits can be simply calculated as
Qcomm = bandwidth× length, where length is obtained
as
length =
∑
M
Mwidth, (8)
whereMwidth is the width of a module, which is 1 for 1D
local layout in common and ⌊
√
QM⌋ for 2D local layout.
Note that QM = QMlocal +Q
M
param.
On the other hand, on the 2D global layout, the
number of qubits can be calculated as follows. Let us
suppose that the number of modules is |M |. Then,
⌊
√
|M |⌋× ⌊
√
|M |⌋-sized 2D layout is necessary. To keep
the shape of a module on the 2D layout, all modules
have the same size cells n×n, where n = ⌊
√
max{QM}⌋.
Then, the required logical qubits for the communication
bus is
Qcomm = 2 · bandwidth · n · A ·B +
(
n · A
)2
(9)
where A = ⌊
√
|M |⌋ − 1 and B = ⌊
√
|M |⌋. In this
work, we determine the bandwidth of a bus as the
maximum number of parameter qubits, bandwidth =
maxM{Q
M
param}.
So far, we have identified the number of logical qubits
required for a quantum computing. As we mentioned in
Section IVC1, a logical qubit in the concatenation levels
k = 1 ∼ l−1 is composed of 25 qubits and the qubit in the
level l consists of 30 qubits. According to a physical error
rate, we need to apply recursive encoding. Therefore,
the number of total physical qubit in the Steane code
quantum computing is
Qsteane = 25
r−1 · 30 ·Qcomp + 25r ·Qcomm (10)
where r is the determined concatenation level.
p
a
th
 f
o
r 
F
T
 b
ra
id
in
g
 t
ra
n
s
fo
rm
a
ti
o
n
FIG. 13. A double Z-cut qubit of a code distance 3. The blue
dots indicate data qubits. One of the green chains indicates
a logical Z operator, and the red chain indicates a logical X
operator. Through the yellow line, it is possible to perform
a fault-tolerant braiding operation from other X-cut qubit to
this Z- cut qubit. Each defect has to be away from bound-
ary as much as 3 data qubits, and both defects have to be
separated 6 data qubits. 126 data qubits and 125 syndrome
qubits are required to implement a distance-3 logical qubit.
2. Surface Code Quantum Computing
We implement double defect based logical qubits. For
a double defect logical qubit with code distance d, each
defect has to be apart from a boundary as much as d
data qubits, and double defects also should be separated
as much as d data qubits. On the other hand, to perform
a braiding operation in a fault tolerant manner, the space
between double defects has to be at least 2d+⌊d/4⌋ rather
than only d. Therefore, to implement a double defect
logical qubit of code distance d, (2A+1)(2B+1) physical
qubits are required where A =
(
2d − 2 + ⌊d/4⌋
)
and
B =
(
4d − 4 + 3⌊d/4⌋
)
. FIG. 13 shows a double defect
logical qubit of code distance 3. A total of 253 physical
qubits, 126 data qubits and 125 syndrome qubits, are
required.
Two neighboring logical qubits also have to be sep-
arated as much as ⌊d/4⌋ data qubits to keep the code
distance between both during the braid transformation.
In this regards, if N logical qubits are arranged on the
2-dimensional layout of nh × nw, we need
(
2
(
nwA+(nw−1)⌊d/4⌋
)
+1
)(
2
(
nhB+(nh−1)⌊d/4⌋
)
+1
)
(11)
qubits are necessary, where A and B are what we men-
tioned above.
We have to consider ancilla qubits required for a
CNOT gate. As mentioned before, the CNOT gate
between the same type logical qubits consists of three
CNOT gates between different logical qubits. For that
two ancilla qubits, X-cut qubit |gL〉 and Z-cut qubit |+L〉
are required. We allocate a pair of both ancilla qubits to
every module where a CNOT gate is performed. In that
case, the number of logical qubits for a module is the
sum over parameter qubits, local qubits and two ancilla
qubits.
In case of a surface code quantum computing, the com-
14
· · ·
· · ·
· · ·
d d
d
d
d
boundary
b
o
u
n
d
a
ryb
o
u
n
d
a
ry
boundary
module i module j module k
FIG. 14. A quantum computer structure based on the surface
code quantum computing. Dark green dots indicate defects
and yellow cells are used as a path for the braiding trans-
formations. Blue cells can be used for the forward/backward
qubit passings over distance modules. An enclosed section by
dotted red line is a computing region, a module. A defect has
to be away from the boundary of a logical qubit or a braiding
path as much as d data qubits, and two logical qubits are
mutually separated as much as ⌊d/4⌋ data qubits.
munication bus may be also necessary to efficiently per-
form forward/backward qubit passings5. By the way, un-
like the Steane code quantum computing that performs a
sequence of SWAP operations as much as the passing dis-
tance, the qubit movement in the surface code quantum
computing is much efficient. It can be achieved by only
performing multi-cell qubit movements [8, 41]. There-
fore, we assumed that the surface code quantum com-
puting performs the qubit passing in sequentially on the
bus of the narrow bandwidth. We set the bandwidth of
the bus as ⌊d/4⌋, and additionally the movement path
should be away from a boundary as much as d data
qubits. FIG. 14 shows the quantum computer architec-
ture based on a surface code and a structured quantum
assembly code, where all the modules are arranged on
the 1-dimensional layout by keeping the space as much
as ⌊d/4⌋ data qubits between both modules.
We conclude this section by repeating the physical
qubits for the magic state factory. The required phys-
ical qubits for |YL〉 are max{parallelT, parallelS} ×
(7QL)
r−1 × (8QL) and for |AL〉 are max{parallelT } ×
(15QL)
r−1 × (16QL)× time(MSD)/time(T ). Note that
5 It is possible to perform a fault-tolerant braiding between dis-
tant logical qubits in different modules. On considering that,
the qubit passings may not be required. By the way, a braiding
between distant logical qubits requires so many physical mea-
surements. Which makes a quantum computing unreliable. In
this regards, we believe that moving logical qubits to nearby loca-
tion (a target module) and performing a braiding between close
qubits is more reliable. In this regards, we also perform qubit
passing in the surface code quantum computing.
QL is the physical qubits to implement a logical double
defect qubit, and r is the iteration of the magic state
distillation.
VI. ANALYSIS OF PERFORMANCE AND
RESOURCE
We show the performance analysis of quantum com-
putings we configured. For that, we set the objective
fidelity of a quantum computing as 0.7. That is, a sin-
gle round quantum computing time Tone is the time of a
quantum computing that achieves a fidelity at least 0.7.
We set the error rate of physical operation for Steane code
quantum computing as 10−9, but for surface code quan-
tum computing we apply the physical error rate 10−3.
We also assume that the duration of a physical oper-
ation is 1 µs conservatively. This assumption may be
pessimistic than other literature assuming tens ∼ hun-
dreds nano seconds for a physical operation. The Shor
algorithm we test comes from the benchmark [16, 41].
A. Case of applying Compile
We show the performance changes by applying a quan-
tum compile, i.e., decomposition of a RZ(θ) gate for an
arbitrary angle θ. Even though such decomposition is
required to implement a fault-tolerant quantum comput-
ing, in this section we perform physical quantum com-
puting without error correction to see the effect of the
compile only. For that, the components of the other lay-
ers are completely fixed.
For the decomposition, we set the precision of the de-
composition as 10−2, which means that a decomposition
of RZ(θ) gate achieves the RZ(θ) operation with an er-
ror probability 10−2. Consequentially, both RZ(θ1) and
RZ(θ2) can be decomposed into the same sequence of H ,
S and T if |θ1−θ2| ≤ 0.01. Under such precision, a RZ(θ)
gate is usually decomposed into a sequence of 40 ∼ 50
H , S and T gates.6 Please note that the decomposition
algorithm in the compile works probabilistically.
FIG. 15 compares the performance. By decompos-
ing RZ(θ) gate, the quantum computing time increases
as much as 4 ∼ 5 times, but the number of physical
qubits stays equivalently. By the way, in general RZ(θ)
gate takes more than half of all quantum gates in Shor’s
factoring algorithm (see Table IV). On considering that
RZ(θ) gate is decomposed into a sequence of dozens of
6 If we set the precision degree with a smaller number, we will get
a longer sequence of H, S and T gates for a RZ(θ) gate. On the
one hand, such sequence can achieve the target RZ(θ) gate more
exactly. On the other hand, the quantum computing time will
be larger than the time shown in this work. Besides, practically
the duration to conduct the performance analysis also increase
nontrivially. In this regards, we have set 10−2 for the precision.
15
1.427×103
9.910×103
7.320×104
2.889×102
2.230×103
1.751×104
Decomposition of RZ(θ)
No Decomposition of RZ(θ)
T
im
e 
(s
ec
s)
103
104
105
Input Size
N 128 N 256 N 512
Quantum Computing with only Compile: Shor Algorithm
(a)
1.402×105
5.424×105
2.132×106
1.391×105
5.403×105
2.128×106
Decomposition of RZ(θ)
No Decomposition of RZ(θ)
Q
u
b
it
s
105
106
Input Size
N 128 N 256 N 512
Quantum Computing with only Compile: Shor Algorithm
(b)
FIG. 15. We show the quantum computing performance change by the compile effect. (a) Quantum computing time and (b)
Qubits.
TABLE IV. The proportion of RZ(θ) gate in Shor N = 128.
Input Size RZ(θ) Total Gates Proportion
128 2.036 × 109 3.399 × 109 59.90%
256 1.630 × 1010 2.719 × 1010 59.94%
512 1.304 × 1011 2.175 × 1011 59.95%
H , S and T gates as we mentioned above, readers may
guess that the performance difference between both cases
should be more larger than the shown in the figure.
As mentioned above, we have set the precision of the
decomposition as 10−2. Most θ in the Shor algorithm are
very small (< 0.01),7 and therefore the decomposition of
such rotation operation works as the identity operation.
We show the top dominant θ used in Shor N=128 al-
gorithm in Table V. All the angles are less than 0.01.
While we have not described all θ in the algorithm in
the table, empirically 75% of the angles applied in the
algorithm are less than 0.01. In this regards, the perfor-
mance degradation by decomposing RZ(θ) gates is not
so remarkable regardless of the quantity of RZ(θ) gates
in the algorithm.
B. Case of applying Compile and Error Correction
We show the performance of a fault-tolerant quantum
computing but without considering local qubit interac-
tion on a quantum computer architecture. We assume
that all qubits are directly interacted with an arbitrary
qubit regardless of its position, and therefore a commu-
nication bus is not required in the architecture. This
setting is to see the effect of quantum error correction.
For that, we only configured Steane code based quantum
7 θ = pi/2n−1 with n = 1 ∼ N for N-bit integer factoring.
TABLE V. List of top 10 dominant angles in Shor’s
factoring algorithm, N=128. The θ listed in this table is
less than 0.01 and therefore RZ(θ) works as an identity
operator. The rotational angle θ of the gate is from pi/2n−1
in Quantum Fourier Transform, and the exact represen-
tation of the angle is limited by a classical computer precision.
θ Count Proportion
0.000000 × 100 6.88× 108 0.3381
−0.000000 × 100 3.44× 108 0.1691
−5.000000 × 10−5 3.13× 107 0.0154
−1.000000 × 10−4 3.11× 107 0.0153
5.000000 × 10−5 3.10× 107 0.0152
−2.000000 × 10−4 3.09× 107 0.0152
1.000000 × 10−4 3.08× 107 0.0151
−4.000000 × 10−4 3.08× 107 0.0151
2.000000 × 10−4 3.07× 107 0.0151
−7.500000 × 10−4 3.06× 106 0.0150
computing because surface code computing inherently
takes 2-dimensional nearest neighbored qubit layout into
consideration. As mentioned above, for the fault-tolerant
quantum computing, we compile the quantum algorithm
by decomposing RZ(θ) gate into H , S and T gates.
FIG. 16 shows the quantum computing performance.
The increase of the execution time and the number of
qubits is very remarkable when the input size increases
from 128 to 256. This is because the required concate-
nation level increases from 1 to 2 there to satisfy the ob-
jective fidelity 0.7. But, as the concatenation level stays
when the input increases from 256 to 512, the increases
of a quantum computing time and the number of qubits
are rather modest.
Since in this section we assume a fault-tolerant quan-
tum computing but with non-local qubit interaction, the
performance change shown in the figure is only caused
by the fault-tolerant quantum computing protocol. For
example, in FIG. 16 (b), the numbers of qubits in the
Steane code quantum computing are bigger than physi-
16
2.541×105
2.334×108
1.725×109
3.093×105
2.336×108
1.732×109
1.427×103
9.910×103
7.320×104
Steane FTQC: Tone
Steane FTQC: Tavg
Physical: Tone
T
im
e 
(s
ec
s)
104
106
108
1010
Input Size
N 128 N 256 N 512
Non-Local Steane FTQC: Shor Algorithm
(a)
Steane FTQC
Physical
4.206×106
4.882×108
1.919×109
1.402×105
5.424×105
2.132×106Q
u
b
it
s
105
106
107
108
109
Input Size
N 128 N 256 N 512
Non-Local Steane FTQC: Shor Algorithm
(b)
FIG. 16. Quantum computing performance based on quantum error correction. For the fault-tolerant operation, we have
compiled a quantum algorithm by decomposing RZ(θ) gates into a sequence of H , S and T gates. In this evaluation, the
quantum computer architecture and local qubit interaction are not completely considered. (a) Quantum computing time and
(b) Qubits. The concatenation level for the input size 128 is 1, and 2 for the other cases.
cal computing as much as respectively 30, 900 and 900
times. Please recall that we have designed a logical qubit
by assembling 30 physical qubits.
C. Case of applying Compile, Error Correction and
System Architecture
In this section, we show the quantum computing per-
formance by considering all the realistic factors we have
described previously. We apply fault-tolerant quantum
computings based on certain quantum computer archi-
tectures where only local qubit interaction is permitted.
FIG. 17 shows the performance analysis of the Steane
code quantum computing. We have used the quantum
computer architectures of the layouts; (1D global, 1D lo-
cal), (1D global, 2D local) and (2D global, 2D local).
Please see FIG. 11 for the quantum computer architec-
tures. To see the influence of local qubit interaction, we
also compare the performance of the quantum comput-
ing based on non-local qubit interaction shown in the
previous section.
As shown in the figure, the performance degradation
by the local qubit interaction on a quantum computer
architecture is highly nontrivial. This is because many
modules are spreaded over the quantum computer, and
the communication (qubit passing) are performed fre-
quently. Table VI shows the proportion of SWAP gates
in the implementation of Shor algorithm. Surprisingly,
on the proposed quantum computer architecture with a
nearest neighbor qubit interaction, most of quantum op-
erations in the Steane code quantum computing are qubit
movements. We think the quantity of the qubit move-
ments is a temporal overhead to implement a quantum
algorithm on a quantum computer. Such large overhead
caused by the qubit movements can be reduced by im-
proving a quantum computer structure, a fault-tolerant
quantum computing scheme or a system mapping algo-
TABLE VI. The proportion of SWAP gate in Shor’s
factoring algorithm. The layout indicates a combination of
Global Layout and Local Layout.
Input Size Layout SWAP Total Gates Proportion
128
(1D, 1D) 7.371 × 1011 7.405 × 1011 99.54%
(1D, 2D) 1.262 × 1012 1.266 × 1012 99.73%
(2D, 2D) 1.527 × 1013 1.527 × 1013 99.97%
256
(1D, 1D) 1.116 × 1013 1.118 × 1013 99.76%
(1D, 2D) 1.856 × 1013 1.859 × 1013 99.85%
(2D, 2D) 2.719 × 1014 2.720 × 1014 99.99%
512
(1D, 1D) 1.068 × 1014 1.070 × 1014 99.80%
(1D, 2D) 1.811 × 1014 1.813 × 1014 99.88%
(2D, 2D) 5.789 × 1015 5.789 × 1015 99.99%
rithm.
The figure shows that a quantum computer architec-
ture of the 1D global layout provides the better perfor-
mance than a quantum computer of the 2D global layout.
However, it may not always be the case. It completely
depends on the number of modules in a quantum com-
puting program (see FIG. 7), and the arrangement of the
modules on the architecture. In general, the 2D global
layout is a better architecture in terms of a qubit com-
munication when the number of modules is very large.
On average, the arrangement of the modules on the 2D
global layout can reduce the distance between modules
than the 1D global layout. Therefore the communication
cost of the qubit passing is less than the 1D global layout.
As an example, FIG. 18 shows that a ground state esti-
mation algorithm [16, 19, 41] works better on a quantum
computer architecture with 2D global layout8.
8 In the benchmark program, the algorithm is composed of at least
tens of thousands modules, but the program of Shor algorithm
consists of thousands modules.
17
1.785×1013
2.785×1014
3.194×1015
1.761×1013
2.661×1014
2.709×1015
3.046×1014
4.035×1015
1.019×1017
3.093×105
2.336×108
1.732×109
1D Global & 1D Local
1D Global & 2D Local
2D Global & 2D Local
All-to-All
T
im
e 
(s
ec
s)
106
109
1012
1015
1018
Input Size
N 128 N 256 N 512
Local Steane FTQC: Shor Algorithm
(a)
5.643×1010
2.221×1011
7.602×1011
1.468×1011
7.190×1011
3.437×1012
1.471×1013
1.145×1014
7.495×1014
4.206×106
4.882×108
1.919×109
1D Global & 1D Local
1D Global & 2D Local
2D Global & 2D Local
All-to-All
Q
u
b
it
s
106
108
1010
1012
1014
1016
Input Size
N 128 N 256 N 512
Local Steane FTQC: Shor Algorithm
(b)
FIG. 17. Quantum computing performance of the Steane code based local fault-tolerant quantum computing. Too see the
influence by the architectural limitation, we also add the performance when the arbitrary long qubit interaction is allowed. (a)
Quantum computing time and (b) Qubits. All concatenation levels for the local qubit interaction cases (black, red and blue
lines) are 3 in common. But, in case of the non-local qubit interaction (green line), the concatenation level is 1 for the input
size 128 and 2 for the others. Please see FIG. 11 about the quantum computer architectures.
4.526×105
1.078×108
2.740×109
2.731×1010
1.233×106
3.833×108
1.102×1010
1.248×1011
1.425×105
1.803×107
3.138×108
2.434×109
1D Global & 1D Local
1D Global & 2D Local
2D Global & 2D Local
T
im
e 
(s
ec
s)
106
108
1010
Input Size
M 20 M 40 M 60 M 80
Noiseless and Local Gate: Ground State Estimation Algorithm
(a)
2.287×105
6.413×106
4.638×107
1.859×108
5.055×105
1.798×107
1.454×108
6.521×108
2.582×106
1.266×108
1.265×109
6.475×1091D Global & 1D Local Layout
1D Global & 2D Local Layout
2D Global & 2D Local Layout
Q
u
b
it
s
105
106
107
108
109
1010
Input Size
M 20 M 40 M 60 M 80
Noiseless and Local Gate: Ground State Estimation Algorithm
(b)
FIG. 18. The quantum computing performance of a ground state estimation algorithms over input size M = 20, 40, 60, 80.
Quantum gates are noiseless, and only nearest neighbor qubits are mutually interacted on the quantum computer architectures.
(a) Quantum computing time and (b) Qubits.
FIG. 19 shows the quantum computing performance
of the surface code quantum computing. The quantum
computer architecture for a surface code quantum com-
puting is shown in FIG. 14. In the error rate 10−3, as the
input size increases, the required code distance is raising
25, 27 and 30 to satisfy the objective fidelity. In the fig-
ure, we also show the quantity of physical qubits to run
a magic state factory that supplies |AL〉 states during
the quantum computing. As shown in the figure, in this
work, the capacity of a magic state factory stays almost
the same regardless of the input size of Shor algorithm.
It increases as much as the code distance.
In Ref. [8], the authors estimated the surface code
quantum computing execution time of Shor algorithm
for factoring a 2000-bit integer. They did the estima-
tion only by focusing on the quantity of the sequential
Toffoli gates in the modular exponentiation circuit. By
following their estimation method, the quantum comput-
ing time to factorize a 512-bit integer will be only 0.45
hours (40× 5123 × 3× 100 ns) regardless of physical er-
ror rate. However, as shown in the figure, our estimation
shows 8.78 × 105 hours are required for the same task
when the physical error rate is 10−3. The algorithm exe-
cution time, as shown in Section VII B, is reduced as the
physical error rate decreases.
We believe the reasons for such enormous gap between
both estimations are as follows. First, our analysis is
based on all quantum gates included in Shor algorithm
but their analysis focuses on the Toffoli gates only. In
our estimation, the proportion of transversal gates takes
about 60 % (# transversal gates/# total gates), in other
words, their estimation ignores the execution time by
such huge transversal gates and the involved error cor-
rection. Second, we have assumed that a physical gate
operates in 1 µs conservatively while their estimation is
18
5.602×107
4.428×108
3.163×109
Surface FTQC
Physical
1.427×103
9.910×103
7.320×104T
im
e 
(s
ec
s)
104
106
108
1010
Input Size
N 128 N 256 N 512
Surface FTQC: Shor Algorithm
(a)
4.743×109
1.990×1010
9.508×1010
2.429×108 2.781×10
8 3.481×108
1.402×105
5.424×105
2.132×106
Surface FTQC: Whole
Surface FTQC: MSF
Physical
Q
u
b
it
s
106
108
1010
Input Size
N 128 N 256 N 512
Surface FTQC: Shor Algorithm
(b)
FIG. 19. The quantum computing performance based on the surface code quantum computing. (a) Time and (b) Qubits.
The code distances are respectively 25, 27 and 30. In (b), we also show the required physical qubits for a magic state factory.
based on 100 ns measurement gates9. Third, while they
used an efficient decomposition of a Toffoli gate, we have
used the de facto standard decomposition [31]. Fourth,
they might assume that braiding operations for parallel
CNOT gates can be performed in parallel without any
path conflicts, but we applied a braiding operation at
a time to avoid conflicts between other braiding paths.
Please note that for Shor algorithm of N = m, m CNOT
gates can be performed in parallel in ideal case. Fifth, we
have considered architecture related issues such as qubit
passing over distant modules, but they do not. Lastly,
we have applied d round quantum error correction where
the code distance d is determined based on the physical
error rate, but they did not.
One of the reasons why a surface code has attracted
much attention is it requires relatively less overhead. In
what follows, we simply compare the Steane code and
surface code in light of quantum resource without con-
sidering their theoretical foundation. For the fair com-
parison, we assumed the error rate of physical device is
10−9 for both cases. FIG. 20 shows the quantum com-
puting time and qubits to run Shor algorithm. As we
mentioned before, the performance of the Steane code
quantum computing completely depends on a quantum
computer architecture. Therefore to focus on the differ-
ence in quantum resource only by a fault-tolerant quan-
tum computing, we also compare the situation where a
non-local qubit interaction is allowed. As shown in the
figure, in the small input size, the Steane code quantum
computing requires less time and qubits than the surface
code quantum computing. This is because of the non-
locality of multi-qubit operation. But, as the input size
increases, the surface code quantum computing shows
the better performance than the Steane code quantum
computing even non-local qubit interaction is allowed.
9 Their implementation of a Toffoli gate completes the operation
within three measurement operations.
VII. USABILITY OF THE PROPOSED
FRAMEWORK
The objective of the proposed framework is to help
to design and analyze a quantum computing. In this re-
gards, in this section, we show how to use it for analyzing
previously proposed high performance quantum comput-
ing methods with realistic quantum computer. The first
is an efficient compile (Section VII A), and the second is
an improved physical gate (Section VII B) and the last is
the strategy for the fault-tolerance (Section VII C).
A. Efficient Decomposition of Controlled-Rn
Authors proposed an efficient decomposition algorithm
for a controlled-Rn gate [23]. By hiring an ancilla qubit,
they achieved that the total number of quantum gates
{H,S, T } is reduced to from 35 (Ref. [24]) to 21. We
show how the proposed decomposition affects the execu-
tion time of Shor algorithm. Even though the proposed
compile algorithm itself requires more qubits, by reduc-
ing the algorithm execution time and increasing the fi-
delity of a quantum computing simultaneously, in total
less qubits are required.
FIG. 21 shows the performance improvement by the
efficient compile in the Steane code quantum computing.
At the input size N = 128, the improved decomposi-
tion lowers the quantum computing time as much as over
400-fold and the qubits as much as 30-fold. The degree
of the performance improvement depends on the input
size. As shown in the figure, at the input size where
the required concatenation level lowers by applying the
proposed decomposition, the performance improvement
is remarkable.
FIG. 22 shows the performance improvement by the ef-
ficient compile in the surface code quantum computing.
Unlike the Steane code quantum computing, the perfor-
mance improvement in the quantum computing time in-
19
4.712×106
3.152×107
2.611×108
1.785×1013
2.785×1014
3.194×1015
3.093×105
2.336×108
1.732×109
Surface FTQC
Steane FTQC (1D Global, 2D Local)
Steane FTQC (All-to-All)
T
im
e 
(s
ec
s)
104
106
108
1010
1012
1014
1016
Input Size
N 128 N 256 N 512
Resource Compare: Steane FTQC and Surface FTQC
(a)
7.574×107
2.901×108
1.112×109
5.643×1010
2.221×1011
7.602×1011
4.206×106
4.882×108
1.919×109
Surface FTQC
Steane FTQC (1D Global, 2D Local)
Steane FTQC (All-to-All)
Q
u
b
it
s
106
108
1010
1012
Input Size
N 128 N 256 N 512
Resource Compare: Steane FTQC and Surface FTQC
(b)
FIG. 20. We simply compare the quantum resource in the Steane code quantum computing and the surface code quantum
computing. The physical error rate is 10−9. The quantum computer architecture for the Steane code quantum computing is
the 1D global layout and the 2D local layout because as shown in FIG. 17 the architecture shows the best performance in this
work. We also compare the Steane code quantum computing with non-local qubit interaction because the performance of the
Steane code quantum computing significantly depends on the quantum computer architecture.
1.761×1013
2.661×1014
2.709×1015
3.972×1010
9.230×1013
9.621×1014
Naive Controlled-Rn
Efficient Controlled-Rn
T
im
e 
(s
ec
s)
1010
1011
1012
1013
1014
1015
1016
Input Size
N 128 N 256 N 512
Efficient Controlled-Rn: Steane FTQC
(a)
Naive Controlled-Rn
Efficient Controlled-Rn
1.468×1011
7.190×1011
3.437×1012
 4.868×109
 7.138×1011
 3.424×1012
Q
u
b
it
s
1010
1011
1012
Input Size
N 128 N 256 N 512
Efficient Controlled-Rn: Steane FTQC
(b)
FIG. 21. The performance comparison between a naive compile and the proposed compile under Steane code based quantum
computing. (a) The algorithm execution time. (b) The required qubits.
creases gradually as the input size increases. This is be-
cause there always exists the difference in the code dis-
tance. By the improved decomposition, the required code
distance lowers to 22, 24, 27 from 25, 27, 30 respectively.
B. Accurate Quantum Gates
Previously, we basically assumed that physical error
rate is 10−9 for Steane code quantum computing and
10−3 for surface code quantum computing. In this sec-
tion, we show what happens in a quantum computing if
we have more accurate quantum device. For that we show
the performance evaluations based on the physical error
rates 10−9 ∼ 10−15 for Steane code quantum computing
and based on the physical error rates over 10−3 ∼ 10−9.
FIG. 23 shows the Steane code quantum computing
performance over physical error rates 10−9 ∼ 10−15. We
also compare a physical quantum computing to those
fault-tolerant quantum computings at the physical er-
ror rate 10−15. The performance improvement by low-
ering the error rate from 10−9 to 10−12 is highly non-
trivial because the required concatenation level is re-
duced from 2 and 3 to 1 in both case respectively. But,
lowering the error rate more does not lead to the bet-
ter fault-tolerant quantum computing performance. In
other words, the fault-tolerant quantum computing in
the physical error rate 10−15 does not show any advan-
tage against the quantum computing in the physical er-
ror rate 10−12. This is because as the physical error
rate lowers the fault-tolerant quantum computings with
the same concatenation level achieves very high fidelity
(> 0.9). If both quantum computings are performed with
the same concatenation level, both have the same single
round quantum computing time. In that case, if there is
no big difference between fidelities, the average quantum
computing Tavg will be very similar.
In the same reason, in the physical error rate 10−15,
20
5.602×107
4.428×108
3.163×109
1.151×107
5.991×107
2.546×108
Naive Controlled-Rn
Efficient Controlled-Rn
T
im
e 
(s
ec
s)
107
108
109
Input Size
N 128 N 256 N 512
Efficient Controlled-Rn: Surface FTQC
(a)
4.743×109
1.990×1010
9.508×1010
3.624×109
1.543×1010
7.575×1010
Naive Controlled-Rn
Efficient Controlled-Rn
Q
u
b
it
s
1010
1011
Input Size
N 128 N 256 N 512
Efficient Controlled-Rn: Surface FTQC
(b)
FIG. 22. The performance comparison between a naive compile and the proposed compile under surface code based quantum
computing. (a) The algorithm execution time and (b) The required qubits.
physical quantum computing shows the better perfor-
mance than a fault-tolerant quantum computing because
the physical quantum computing already achieves high
fidelity. Empirically, Tone of the physical quantum com-
puting in the error rate 10−15 is 6.89 × 108 with the
fidelity 0.6433. On the other hand, Tone of the fault-
tolerant quantum computing is 7.78 × 1010 with the fi-
delity 0.9999. Obviously, physical quantum computing
shows the better performance in terms of Tavg,
6.89×108
0.6433 >
7.78×1010
0.9999 .
FIG. 24 shows the performance improvement in the
surface code quantum computing over physical error
rates 10−3 ∼ 10−9. In the figure, we also compare the
required code distance. As shown in the figure, as the
physical error rates lowers, the required code distance
decreases and therefore the performance increases. But,
since the code distance is already too low, 4 or 5, there
is not enough room for the performance improvement as
the gate is improved more.
C. Degree of Fault Tolerance
Accuracy threshold theorem [2, 25] says that if we have
quantum device of physical error rates below a threshold,
it is possible to achieve an arbitrary long quantum com-
putation is possible. By applying a recursive concate-
nated coding [26], we can lower the effective error rate to
where a reliable quantum computing is possible. As we
increase the concatenation level, the fidelity of a quan-
tum computing also definitely improves. But, the dura-
tion of a quantum computing is also increased by raising
a concatenation level. Therefore, the higher concatena-
tion level does not always make the better quantum com-
puting possible. FIG. 25 shows that there exists a rec-
ommendation for the concatenation level in the Steane
code quantum computing, in particular for a quantum
computing time. The number of qubits unconditionally
becomes larger as the concatenation level increases.
In case of a surface code quantum computing, the per-
formance completely depends on the code distance. The
code distance is determined to satisfy the objective fi-
delity of a quantum computing, but in most case the
accuracy of the quantum computing by the chosen code
distance exceeds than the target fidelity. In this regards,
on considering the averaged quantum computing time
Tavg, the chosen code distance may not bring the best
quantum computing performance as shown in the Steane
code case.
FIG. 26 shows that the surface code quantum comput-
ing has the best performance with a code distance 31,
but the code distance determined by the equation is 30.
Even though the code distance determined from the tar-
get fidelity 0.7 is 30, the goal of a quantum computing is
to find an exact answer, not a probable answer. By ap-
plying the code distance 31, we can reduce the quantum
computing time as much as 1400 days than the case of
the code distance 30 at the cost of qubits.
VIII. DISCUSSION
We have proposed an integrated method for analyzing
the performance and the resource of a quantum comput-
ing. In particular, by considering practically running a
quantum algorithm on a quantum computer hardware
of a specific system architecture, we have obtained the
most realistic performance and resource where the ef-
fects by all of fully decomposed algorithm, fault-tolerant
scheme and system architecture are involved. For that,
we have proposed and developed a quantum comput-
ing framework composed of three functional layers where
each layer plays a definite role of a quantum comput-
ing. By exploiting the framework, we can configure a
quantum computing model by selecting specific proto-
col and/or properties. By doing so, we can analyze not
only the performance and resource of a quantum com-
puting, but also the impact of specific components on
the entire quantum computing. For example, we have
21
1.761×1013
2.661×1014
2.709×1015
5.062×108
7.673×109
8.063×1010
5.061×108
7.646×109
7.780×1010
pe: 10
-9
pe: 10
-12
pe: 10
-15 (logical)
pe: 10
-15 (physical)
4.462×106
7.061×107
1.071×109
T
im
e 
(s
ec
s)
106
108
1010
1012
1014
1016
Input Size
N 128 N 256 N 512
Accurate Quantum Gates: Steane FTQC
(a)
1.468×1011
7.190×1011
3.437×1012
1.632×108
7.988×108
3.819×109
1.632×108
7.988×108
3.819×109
pe: 10
-9
pe: 10
-12
pe: 10
-15 (logical)
pe: 10
-15 (physical)
5.438×106
2.663×107
1.273×108
Q
u
b
it
s
106
108
1010
1012
Input Size
N 128 N 256 N 512
Accurate Quantum Gates: Steane FTQC
(b)
FIG. 23. The performance comparison over physical error rates 10−9 ∼ 10−15 under Steane code based quantum computing.
(a) The algorithm execution time and (b) The required qubits. At the error rate 10−15, as shown in this figure, a fault-tolerant
quantum computing is not required.
discussed optimal concatenation level and code distance
of fault-tolerant quantum computing. We believe such
discussion was possible due to the proposed framework.
The analysis results completely depend on the proto-
cols and properties of physical device we employed. As
shown in the figures, the quantity of the required qubits
is too enormous and the execution time is too long. The
feasibility of a quantum computing seems too bad from
our analysis results. However, we need to emphasize that
the very those figures are not so important now. Readers
need to see the tendency of the analysis results as the in-
put size of a quantum algorithm increases. As quantum
computing components are being improved, the analysis
results will be better than the shown in this work, but
the tendency may be stayed.
As mentioned above, the objective of the present work
is to provide the most realistic performance and resource
of a quantum computing. On the other hand, we believe
the proposed software framework can play a significant
role in practically running a quantum computing with a
real quantum computing hardware later if some compo-
nents are added (see FIG. 1). For example, components
to control a real quantum device have to be added in the
building block layer. The system layer also requires func-
tions that execute a quantum algorithm and a quantum
error correction efficiently. Besides, the existing compo-
nents have to be improved as much as possible.
ACKNOWLEDGMENTS
This work was supported by Electronics and Telecom-
munications Research Institute (ETRI) grant funded by
the Korean government [18ZH1400, Research and Devel-
opment of Quantum Computing Platform and its Cost-
Effectiveness Improvement].
[1] Quantum Computing — Intel Newsroom.
https://newsroom.intel.com/press-kits/quantum-computing.
[2] Dorit Aharonov and Michael Ben-Or. Fault-Tolerant
Quantum Computation with Constant Error Rate. SIAM
Journal on Computing, 38(4):1–241, July 2008.
[3] H Bomb´ın and M A Martin-Delgado. Optimal resources
for topological two-dimensional stabilizer codes: Com-
parative study. Physical Review A, 76(1):012305, July
2007.
[4] He´ctor Bomb´ın. Single-Shot Fault-Tolerant Quantum Er-
ror Correction. Physical Review X, 5(3):031043, Septem-
ber 2015.
[5] Andrew W Cross, Lev S Bishop, John A Smolin, and
Jay M Gambetta. Open Quantum Assembly Language.
https://arxiv.org/abs/1707.03429.
[6] Austin G Fowler. Low-overhead surface code logical
hadamard. Quantum Information and Computation,
12(11&12):970–982, August 2012.
[7] Austin G Fowler, Simon J Devitt, and Cody Jones. Sur-
face code implementation of block code state distillation.
Scientific Reports, 3(1):022316–6, June 2013.
[8] Austin G Fowler, Matteo Mariantoni, John M Martinis,
and Andrew N Cleland. Surface codes: Towards practical
large-scale quantum computation. Physical Review A,
86(3):032324, September 2012.
[9] Austin G Fowler, Ashley M Stephens, and Peter
Groszkowski. High-threshold universal quantum com-
putation on the surface code. Physical Review A,
80(5):052312, November 2009.
[10] Hayato Goto. Minimizing resource overheads for fault-
tolerant preparation of encoded states of the Steane code.
Scientific Reports, 5:1–7, January 2016.
[11] Markus Grassl, Brandon Langenberg, Martin Roet-
teler, and Rainer Steinwandt. Applying Grover’s
22
25
27
30
9
10
11
5
6 6
4 4 4
pe: 10
-3
pe: 10
-5
pe: 10
-7
pe: 10
-9
C
o
d
e 
D
is
ta
n
ce
10
20
30
Input Size
N 128 N 256 N 512
Accurate Quantum Gates: Surface FTQC
(a)
5.602×107
4.428×108
3.163×109
1.043×107
7.638×107
5.955×108
6.109×106
4.613×107
3.631×108
4.712×106
3.152×107
2.611×108
pe: 10
-3
pe: 10
-5
pe: 10
-7
pe: 10
-9
T
im
e 
(s
ec
s)
107
108
109
Input Size
N 128 N 256 N 512
Accurate Quantum Gates: Surface FTQC
(b)
4.743×109
1.990×1010
9.508×1010
5.676×108
2.596×109
1.170×1010
1.688×108
8.835×108
3.392×109
pe: 10
-3
pe: 10
-5
pe: 10
-7
pe: 10
-9
7.574×107
2.901×108
1.112×109
Q
u
b
it
s
108
109
1010
1011
Input Size
N 128 N 256 N 512
Accurate Quantum Gates: Surface FTQC
(c)
FIG. 24. The performance comparison over physical error
rates 10−3 ∼ 10−9 under surface code based quantum com-
puting. (a) The code distance, (b) The algorithm execution
time and (c) The required qubits.
algorithm to AES: quantum resource estimates.
https://arxiv.org/abs/1707.03429
[12] Alexander S Green, Peter LeFanu Lumsdaine, Neil J
Ross, Peter Selinger, and Benoit Valiron. An Introduc-
tion to Quantum Programming in Quipper. In Reversible
Computation, pages 1–15, May 2013.
[13] Alexander S Green, Peter LeFanu Lumsdaine, Neil J
Ross, Peter Selinger, and Benoit Valiron. Quipper. In
the 34th ACM SIGPLAN conference, pages 333–342, New
York, New York, USA, 2013. ACM Press.
[14] Alexander S Green, Peter LeFanu Lumsdaine, Neil J
3.616×1044
2.709×1015
5.082×1017
9.495×1019
7.780×107
1.450×1013
2.708×1015
5.082×1017
9.495×1019
Average Computing Time, Tavg
Single Round Computing Time, Tone
T
im
e 
(s
ec
s)
1010
1020
1030
1040
1050
Concatenation Level
1 2 3 4 5
Degree of Fault Tolerance: Steane FTQC
FIG. 25. The quantum computing time of Shor algorithm
with input size N = 512. We have evaluated the quantum
computing performance Tone and Tavg according to the con-
catenation levels 1 ∼ 5. After the concatenation level 3, the
fidelity of a quantum computing is almost 1 and therefore
the average computing time closely approaches to the single
round computing time. When, the concatenation level is 1,
the fidelity of a quantum computing is almost vanishing and
therefore the average computing goes to almost infinity.
4.277×109
3.163×109
3.042×109
3.084×109
3.165×109
3.256×109
3.350×109
2.780×109
2.875×109
2.970×109
3.065×109
3.160×109
3.255×109
3.350×109
Average Computing Time, Tavg
Single Round Computing Time, Tone
T
im
e 
(s
ec
s)
3.0×109
3.5×109
4.0×109
4.5×109
Code Distance
29 30 31 32 33 34 35
Degree of Fault Tolerance: Surface FTQC
FIG. 26. The quantum computing time of Shor algorithm
with input size N = 512. We have evaluated the quantum
computing performance Tone and Tavg by varying the code
distance from 29 to 35. The calculated code distance for
the objective fidelity is 30. As shown in the figure, the code
distance 31 introduces the best quantum computing perfor-
mance. By taking the code distance 31, we can reduce the
quantum computing time as much as 1400 days than the case
of the distance 30 at the cost of qubits.
Ross, Peter Selinger, and Benoit Valiron. Quipper: A
Scalable Quantum Programming Language. In the th
ACM SIGPLAN Conference on Programming Language
Design and Implementation, pages 333–342, April 2013.
[15] IBM Quantum Experience.
https://quantumexperience.ng.bluemix.net/qx
[16] ScaffCC. https://github.com/ScaffCC/ScaffCC
[17] Ali JavadiAbhari, Arvin Faruque, Mohammad Javad
Dousti, Lukas Svec, Oana Catu, Amlan Chakrabati,
Chen-Fu Chiang, Seth Vanderwilt, John Black, Fred
Chong, Margaret Martonosi, Martin Suchara, Ken
23
Brown, Massoud Pedram, and Todd Brun. Scaffold:
Quantum Programming Language. Technical Report
TR-934-12, June 2012.
[18] Ali JavadiAbhari, Shruti Patil, Daniel Kudrow, Jeff
Heckey, Alexey Lvov, Frederic T Chong, and Margaret
Martonosi. ScaffCC: a framework for compilation and
analysis of quantum computing programs. a framework
for compilation and analysis of quantum computing pro-
grams. ACM, New York, New York, USA, May 2014.
[19] Ali JavadiAbhari, Shruti Patil, Daniel Kudrow, Jeff
Heckey, Alexey Lvov, Frederic T Chong, and Margaret
Martonosi. ScaffCC: Scalable compilation and analysis
of quantum programs. Parallel Computing, 45(C):2–17,
June 2015.
[20] Cody Jones. Multilevel distillation of magic states for
quantum computing. Physical Review A, 87(4):042305,
April 2013.
[21] N Cody Jones, Rodney Van Meter, Austin G Fowler, Pe-
ter L McMahon, Jungsang Kim, Thaddeus D Ladd, and
Yoshihisa Yamamoto. Layered Architecture for Quantum
Computing. Physical Review X, 2(3):031007, July 2012.
[22] Julian Kelly. Google AI Blog.
https://ai.googleblog.com, March 2018.
[23] Taewan Kim and Byung-Soo Choi. Efficient decompo-
sition methods for controlled-Rn using a single ancillary
qubit. Scientific Reports, pages 1–7, March 2018.
[24] Vadym Kliuchnikov, Dmitri Maslov, and Michele Mosca.
Fast and efficient exact synthesis of single qubit unitaries
generated by Clifford and T gates. Quantum Information
and Computation, 13(7, 8):607–630, March 2013.
[25] E Knill, Raymond Laflamme, and W Zurek.
Threshold Accuracy for Quantum Computation.
https://arxiv.org/abs/quant-ph/9610011
[26] Emanuel Knill and Raymond Laflamme.
Concatenated Quantum Codes.
https://arxiv.org/abs/quant-ph/9610011
[27] Chia-Chun Lin, Amlan Chakrabarti, and Niraj K Jha.
FTQLS: Fault-Tolerant Quantum Logic Synthesis. IEEE
Transactions on Very Large Scale Integration (VLSI)
Systems, 22(6):1350–1363, April 2014.
[28] Microsoft. Quantum Development Kit.
https://www.microsoft.com/en-us/quantum/development-kit
[29] Sreraman Muralidharan, Linshu Li, Jungsang Kim, Nor-
bert Lu¨tkenhaus, Mikhail D Lukin, and Liang Jiang. Op-
timal architectures for long distance quantum communi-
cation. Scientific Reports, pages 1–10, January 2016.
[30] John Napp and John Preskill. Optimal Bacon-
Shor Codes. Quantum Information and Computation,
13(5&6):490–510, September 2012.
[31] Michael A Nielsen and Isaac L Chuang. Quantum Com-
putation and Quantum Information. Cambridge Univer-
sity Press, Cambridge, January 2000.
[32] Quantum Computing Report. Quan-
tum Computing Startup Companies.
https://quantumcomputingreport.com
[33] Robert Raussendorf and Jim Harrington. Fault-Tolerant
Quantum Computation with High Threshold in Two Di-
mensions. Physical Review Letters, 98(19):190504, May
2007.
[34] Markus Reiher, Nathan Wiebe, Krysta M Svore, Dave
Wecker, and Matthias Troyer. Elucidating reaction mech-
anisms on quantum computers. Proceedings of the Na-
tional Academy of Sciences, 114(29):201619152–6, July
2017.
[35] Neil J Ross and Peter Selinger. Optimal ancilla-free Clif-
ford+T approximation of z-rotations. Quantum Informa-
tion and Computation, 16(11&12):901–953, June 2016.
[36] Peter W Shor. Fault-Tolerant Quantum Computation. In
FOCS Proceedings of the th Annual Symposium on Foun-
dations of Computer Science, page 56. IOP Publishing,
July 1996.
[37] Jonathan M Smith, Neil J Ross, Peter Selinger,
and Benoit Valiron. Quipper: Concrete Re-
source Estimation in Quantum Algorithms.
https://arxiv.org/abs/1707.03429
[38] Andrew Steane. Multiple-particle interference and quan-
tum error correction. Proceedings of the Royal Soci-
ety A: Mathematical, Physical and Engineering Sciences,
452(1954):2551–2577, November 1996.
[39] Andrew M Steane. Overhead and noise threshold of fault-
tolerant quantum error correction. Physical Review A,
68(4):042322, October 2003.
[40] Damian S Steiger, Thomas Haner, and Matthias Troyer.
ProjectQ: An Open Source Software Framework for
Quantum Computing. Quantum, 2:49, January 2018.
[41] Martin Suchara, Arvin Faruque, Ching-Yi Lai, Gerardo
Paz, Frederic Chong, and John D Kubiatowicz. Esti-
mating the Resources for Quantum Computation with
the QuRE Toolbox. Technical Report UCB/EECS-2013-
119, EECS Department, University of California, Berke-
ley, May 2013.
[42] Martin Suchara, John Kubiatowicz, Arvin Faruque,
Frederic T Chong, Ching-Yi Lai, and Gerardo Paz.
QuRE: The Quantum Resource Estimator toolbox. In
2013 IEEE 31st International Conference on Computer
Design (ICCD), pages 419–426. IEEE, October 2013.
[43] K M Svore, A V Aho, A W Cross, I Chuang, and I L
Markov. A layered software architecture for quantum
computing design tools. Computer, 39(1):74–83, January
2006.
[44] Krysta M Svore, David P DiVincenzo, and Barbara M
Terhal. Noise Threshold for a Fault-Tolerant Two-
Dimensional Lattice Architecture. Quantum Information
and Computation, 7(4):297–318, April 2007.
[45] Rodney Van Meter, Thaddeus D Ladd, Austin G Fowler,
and Yoshihisa Yamamoto. Distributed Quantum Com-
putation Architecture using semiconductor nanophoton-
ics. International Journal of Quantum Chemistry, pages
1–29, September 2009.
[46] D S Wang, Austin G Fowler, A M Stephens, and Lloyd
C L Hollenberg. Threshold error rates for the toric and
planar codes. Quantum Information and Computation,
10(5&6):456–469, May 2010.
[47] Y S Weinstein. How often must we apply syndrome mea-
surements? In Eric Donkor, Andrew R Pirich, and
Michael Hayduk, editors, SPIE Sensing Technology +
Applications, pages 95000Q–7. SPIE, May 2015.
[48] Yaakov S Weinstein and Sidney D Buchbinder. Use of
Shor states for the [7,1,3] quantum error-correcting code.
Physical Review A, 86(5):052336, November 2012.
[49] Mark G Whitney, Nemanja Isailovic, Yatish Patel, and
John Kubiatowicz. A fault tolerant, area efficient archi-
tecture for Shor’s factoring algorithm. In the 36th annual
international symposium, pages 383–12, New York, New
York, USA, 2009. ACM Press.
[50] Mingsheng Ying, Shenggang Ying, and Xiaodi Wu. In-
variants of quantum programs: characterisations and
generation. In the 44th ACM SIGPLAN Symposium,
24
pages 818–832, New York, New York, USA, 2017. ACM Press.
",186268113,"{'doi': '10.1103/PhysRevApplied.13.054033', 'oai': 'oai:arXiv.org:1809.07901'}","Integrated Analysis of Performance and Resource of Large-Scale Quantum
  Computing","{'code': 'en', 'name': 'English'}",2018-09-20T00:00:00+00:00,'American Physical Society (APS)',[],['http://arxiv.org/abs/1809.07901'],,2018,"[{'type': 'download', 'url': 'http://arxiv.org/abs/1809.07901'}, {'type': 'display', 'url': 'https://core.ac.uk/outputs/186268113'}, {'type': 'similar', 'url': 'https://core.ac.uk/display/186268113?source=1&algorithmId=15&similarToDoc=&similarToDocKey=URL&recSetID=5b01a362-7b77-4901-9634-1318425f138a&position=1&recommendation_type=same_repo&otherRecs=186268113,162257170,186276408,229121698,343940970,154981140,158378844,157740116,189597082,153379796'}]","To see the feasibility of a large-scale quantum computing, it is required to
accurately analyze the performance and the quantum resource. However, most of
the analysis reported so far have focused on the statistical examination, i.e.,
simply calculating the performance and resource based on individual data, and
even worse usually only a few components have been considered. In this work, to
achieve more exact analysis, we propose an integrated analysis method for a
practical quantum computing model with three components (\textit{algorithm},
\textit{error correction} and \textit{device}) under a realistic quantum
computer system architecture. To implement the above method, we develop a
quantum computing framework composed of three functional layers: compile,
system and building block. This framework can support, for the first time, the
mapping of quantum algorithm from physical qubit level to system architecture
level with a given fault-tolerant scheme. Therefore, the proposed method can
measure the effect of dynamic situation when the quantum computer practically
runs. By using our method, we found that Shor algorithm to factorize 512-bit
integer requires $8.78\times 10^ 5$ hours. We also show how the proposed method
can be used for analyzing optimal concatenation level and code distance of
fault-tolerant quantum computing","['text', 'Quantum Physics']",disabled
,"[{'name': 'Sodhi, Balwinder'}]",[],2018-04-18T19:33:42+00:00,"{'name': 'arXiv.org e-Print Archive', 'url': 'https://api.core.ac.uk/v3/data-providers/144'}",,research,,http://arxiv.org/abs/1803.07407,"Quality Attributes on Quantum Computing
Platforms
Balwinder Sodhi1
Indian Institute of Technology Ropar, Nangal Rd. Ropar PB 140001 India
sodhi@iitrpr.ac.in,
WWW home page: http://www.iitrpr.ac.in/sodhi
Abstract. As the practical Quantum Computing Platforms (QCPs)
rapidly become a reality, it is desirable to harness their true potential
in software applications. Thus it becomes important to determine the
implications of QCPs for software architecture.
In this paper we present the in-depth examination of state-of-the-art
QCPs for identifying all such characteristics of a QCP that are relevant
from software architecture perspective. Lack of a native quantum op-
erating system, a hard dependency on quantum algorithms, the lower
level of programming abstractions are few, out of many, examples of
QCP characteristics which may affect architecture of quantum software
applications.
Key contributions of this paper include identifying: i) The general archi-
tecture of a QCP, ii) The programming model which is typically used
when developing software for a QCP, iii) Architecturally significant char-
acteristics of QCPs and iv) The impact of these characteristics on various
Quality Attributes (QAs).
We show that except performance and scalability, most of the other QAs
(e.g. maintainability, testability, reliability etc.) are adversely affected by
different characteristics of a QCP.
Keywords: Quantum Computing, Quantum Software Engineering, Qual-
ity Attributes, Software Architecture, Computing Platforms
1 Introduction
The idea of Quantum computers was proposed in the 1980s by Richard Feyn-
man and Yuri Manin. However, the origin of quantum information processing
can traced back to the early 1970’s work on quantum communication channels
by Holevo[1], and on quantum information theory by Ingarden[2]. It was not un-
til 1990s that usable algorithms which exploited quantum computing properties
appeared: first due to Peter Shor for quickly factoring large integers[3], and an-
other due to Lov Grover for fast database search[4]. It was only in 2011 that the
first commercially viable quantum computer was reported[5]. Few recent devel-
opments in QCP space include Intel’s delivery[6] of a 17-qubit superconducting
quantum chip, and that of IBMs[7] 50-qubit quantum computer. It is possible
ar
X
iv
:1
80
3.
07
40
7v
1 
 [c
s.S
E]
  1
5 M
ar 
20
18
today for a programmer to use a real quantum computer through cloud based
quantum programming platforms (e.g. IBM Q Experience[8]).
From the perspective of software development, quantum computing is one of
the most recent paradigm shifts which is underway. In this paper we use the term
Quantum Computing Platform (QCP) to refer to the entire apparatus (hardware
and software) which is necessary to develop and deploy quantum software appli-
cations. Considering the pace of development happening in the domain of QCPs
it is pertinent to investigate how will the large scale professional development
of quantum software be different (or similar) to building software for classical
computing platforms. Some of the important questions in this context could be:
1. What are the key characteristics of QCPs which are efficacious for software
development?
2. In what way does a QCP affect the quality attributes (and non-functional
requirements) of quantum software applications?
3. What type of software architectures are suitable for quantum software?
4. How to assess the suitability of a QCP for a given computing problem/task?
5. How do QCPs affect SDLC activities? For instance, do the classical ap-
proaches apply as-is for testing and verification of quantum software?
6. What type of software development processes and methods would be suited
for building quantum software?
In this paper we address the first two question via in-depth examination of
the QCPs available today.
1.1 Method of research
The central idea underlying our approach for finding answers for these ques-
tions is as follows: In order to build various QAs into a software application
a software architect (in)directly leverages (or mitigates) the characteristics of
the target computing platform for which the software application is being built.
Consider this example: building the performance QA into an application often
demands exploiting parallelism present in a problem/task. However, if the tar-
get computing platform does not offer multiprocessing (e.g. if it has only one
single-core CPU) then the application will not be able to truly realize the QA
of performance. A proficient software architect must know: i) which all charac-
teristics of a computing platform affect different QAs for an application, and ii)
how are the QAs affected.
Addressing the point-i (i.e. which characteristics) is relatively straight for-
ward – one mainly needs to examine in detail the available literature and software
artifacts of a computing platform for identifying its key characteristics. However,
the point-ii is not as straight forward to address. We take the following two-step
approach for addressing point-ii (i.e. determining how a QA is affected by plat-
form characteristics):
1. Examine the definition and general scenario[9, Part-II] for a QA to identify
the cause-and-effect relationships[10], if any, between platform characteris-
tics and the QA.
2. Examine[11,12] the design tactics prescribed[9, Part-II] for realizing a QA
to identify the above relationships.
Application of this approach is demonstrated in §4.2 where we determine the
impact of QCP characteristics on various QAs.
The structure of our paper broadly reflects how we carried out this study:
In §2 we present the quantum computing basics that are relevant from the per-
spective of developing quantum software, and bring out the general architecture
of a QCP. We discuss the techniques which are exploited by currently known
quantum algorithms, and present the quantum programming model in §3. Char-
acteristics of QCPs have been determined in §4.1 after which we discuss in §4.2
the effect of these characteristics on QAs.
2 Quantum computing platforms
Determining software architectural aspects of quantum software development re-
quires deeper comprehension of important differences between the classical and
the quantum computers. Though a detailed treatment of theoretical underpin-
ning of quantum phenomenon and computing is available in standard quantum
computing texts such as [13], we present quantum computing concepts that are
necessary for our discussion.
2.1 What makes quantum computing different
A classical computer stores and processes information in the form of binary
bits (1 and 0). At a physical level a bit is realized using suitable properties
(e.g. voltage or current etc.) of some physical device. An n bit memory cell in
a classical computer can potentially represent 2n different symbols, but at any
moment it can represent only one of these 2n possibilities. Information on a
quantum computer is represented/stored using quantum bits (or qubits). These
qubits are physically realized via suitable physical phenomena that obey the
laws of quantum mechanics. Examples of such phenomena can be: The spin of a
single electron or the configuration of an individual ion. A qubit can be observed
in one of the two basis states which are labeled as |1〉 or a |0〉. Normally, the
qubit state |1〉 corresponds to classical bit 1, and |0〉 to classical 0 bit. One of the
remarkable properties of qubits, which makes quantum computers much faster
than classical computers, is the number of possible states in which the qubit
can exist (different from its observable state, which can be only one of the basis
states). At any instant one qubit can be in a |1〉, a |0〉 state, or any quantum
superposition[13] of the two. In other words, the basis states |1〉 and |0〉 and their
linear combinations x |1〉+ y |0〉 describe the possible states of a single qubit. In
contrast, one classical bit at one time can be only in one of the two possible
states: a 0 or 1.
Another quantum property that is exploited by quantum computing is en-
tanglement of qubits. Two or more individually independent quantum objects
are said to be entangled when: a) their individual behavior is random, but at the
same time b) it is too strongly correlated despite each object being independent
from the other. A multi-qubit state that cannot be expressed as a list of the
individual constituent qubits is an entangled state. Consider the Bell State[14]
q1q2 := (|00〉+ |11〉)/
√
2. It is an example of an entangled two-qubit state. There
is no way of expressing it as a list of one-qubit states. Suppose you measure
(along some axis) one of the qubits, say q1, that comprise this entangled state.
It will behave randomly: in this case q1 can be |0〉 or |1〉 with equal probability.
Suppose you measured q1 to be |0〉 then value of q2 will certainly be |0〉. That is,
you can predict exactly how the other qubit, q2, would behave if measured along
the same axis. No unentangled state exhibits this type of perfect correlation with
perfect individual randomness.
The above two properties – quantum superposition and quantum entangle-
ment – are thus very useful resources in quantum computing.
2.2 General architecture
Physical quantum computing machinery of today (reminiscent of early classical
computers of 1940s) are big in size[15]. It requires special physical environment
and conditions for operating correctly. The general architecture of a QCP can
be depicted as shown in Fig. 1. It comprises of five layers three of which contain
purely quantum hardware and circuitry and two consist of classical hardware
and software:
1. Quantum layers[15,16,17] One can think of these layers as comprising the
Quantum Processing Unit (QPU).
(a) Physical building blocks – Includes quantum hardware which typically
makes use of superconducting loops for physical realization of qubits.
In addition, it also contains the physical qubit coupler/interconnect cir-
cuitry among other elements which are needed for qubit addressing and
control operations.
(b) Quantum logic gates – Physical circuitry[16, §5.5] that makes up quan-
tum logic gates[13].
(c) Quantum-classical interface – It includes the hardware and software
which provides interfacing between classical computers and a QPU.
2. Classical layers[18,19,8,20]
(a) Quantum programming environment – It provides items such as: i) quan-
tum assembly language necessary for instructing a QPU, ii) the program-
ming abstractions needed for writing quantum programs in a high-level
programming language and iii) simulator support as well as IDEs etc.
(b) Business applications – Quantum software applications written to cater
for business requirements.
Fig. 1. Architecture of quantum computing platform.
3 Developing quantum software applications
In preceding section we introduced the two fundamental properties – quantum
superposition and quantum entanglement – which make a quantum computer
much faster than classical computers at solving certain types of problems. Nature
of these two properties inherently make quantum computation to be mostly
probabilistic in nature. Thus, implying that quantum programs are likely to be
probabilistic or randomized in nature. As such, expressing the logic or algorithm
which is to be executed on a quantum computer requires special techniques and
programming model.
3.1 Quantum algorithms – The key to harnessing power of QCPs
Usefulness of quantum programs lies in their ability to exploit the fundamental
characteristics (superposition and entanglement of qubits) of a quantum com-
puter. Over the past few decades quantum computing researchers have developed
a handful of techniques[21] that exploit the characteristics of quantum computers
for quickly solving certain problems that take much longer to solve on a classical
computer. Some of these techniques and example algorithms that exploit them
are shown in Table-1.
There are several algorithms available today which exploit these techniques
to solve variety of computing problems much faster than a classical computer.
In order to derive benefit from the capabilities of quantum computer one must
map the problem at hand to one of the problems for which a quantum algorithm
is known.
Table 1. Techniques used by quantum algorithms
Technique Examples of target problem(s)
Amplitude amplification[22] Quantum counting/search (Grover’s
algorithm[4]).
Quantum Fourier transform[23] Discrete logarithm problem and the integer fac-
torization problem in polynomial time (Shor’s al-
gorithm), and so on.
Phase kick-back[21] Estimating Gauss sums[24]
Quantum phase estimation[21] Estimates the phase that a unitary transformation
adds to one of its eigenvectors.
Quantum walks[25,26] Element distinctness problem, Triangle-finding
problem, Formula evaluation, Group commutativ-
ity
Fig. 2. An example quantum circuit and corresponding Python code.
Quantum circuits[27] is one of the common models for representing quan-
tum computation. Similar to digital logic gates which are employed by classical
computers, quantum gates are used to compose a quantum circuit. In this model
the steps of a quantum algorithm can be expressed as a sequence of quantum
logic gates. Each quantum logic gate transforms the input qubits in a well de-
fined manner, typically expressed a operations on matrices and vectors. IBM
Q-Experience[8] takes this approach to expressing quantum computations. Fig.
2 shows the screen shot of a quantum circuit (and its corresponding Python
code) for implementing part of Grover’s[4] algorithm on IBM Q-Experience[8]
Fig. 3. A quantum programming model.
3.2 Programming model in quantum paradigm
We evaluated the programming abstractions, the high-level programming lan-
guage libraries that expose these abstractions and the typical steps involved in
composing quantum programs on different QCPs such as [8,19,20,28] etc.
We observe that a quantum program typically comprises of parts some of
which execute on a classical CPU and some on a Quantum Processing Unit
(QPU). Creating such quantum programs mainly involved the following tasks:
1. Mapping input/output from classical bits representation to qubits.
2. Initializing the qubits state.
3. Compose the quantum circuit using suitable quantum logic gates to express
steps of a quantum algorithm. The steps are repeated suitable number of
times to get a reliable measurement of the outcomes.
4. Measure the output qubits state (measuring a qubit forces it to collapse into
a classical bit) and transfer it to the classical bits.
A suitable high-level programming API or instructions[20,29,30] are typically
used for composing the quantum programs. Based on these observation a quan-
tum programming model as shown in Fig. 3 has been derived. We also checked
the adherence to this programming model by manually examining the sample
quantum programs that are supplied by different QCPs we considered.
4 Quantum software architecture
4.1 Characteristics of a quantum computing platform
In order to understand the effect of QCPs on software architecture it is necessary
to identify all those characteristics of a QCP which can affect the development,
deployment, operation and management of quantum software.
Some such characteristics of the QCPs of today are:
1. Platform heterogeneity – The published technical details of different
QCPs[19,8,17,28] that are available today show the heterogeneous nature of
the QCPs. Considering certain limitations such as various no-go theorems[31,32]
that quantum phenomenon obey, dependency on classical hardware/software
is inevitable. Thus, the QPUs are expected to be inherently heterogeneous
in nature. That is, both classical as well as quantum hardware and software
are involved.
2. Physical environment – The quantum hardware requires a completely dif-
ferent type of physical environment. Most of the existing implementations[15,19,8,17]
of quantum hardware circuitry make use of superconducting loops requiring
ultra-low temperatures. Achieving and maintaining such physical conditions
necessitates very specialized environment for reliable operation of a QCP.
3. Large form factor – Due to requirement of special physical environment,
quantum computers of today are very large in size. For instance, the main
box of D-WaveTM2000Q system measures[15] roughly 10’x10’x10’.
4. Energy efficiency – Energy consumption can be looked at from two main
aspects: energy consumed by the QPU itself, and secondly the energy re-
quirements for cooling and other ancillary circuitry which make up a quan-
tum computer. It has been observed that a quantum computer spends[33]
most of its energy on cooling. A QPU by itself, however, consumes much less
energy[34]. As the computation speeds grow to exascale (i.e. 1000 petaflops),
the energy consumption of a QPU is not expected to increase as fast as that
of a CPU/GPU. Experiments conducted with D-Wave’s 2000-qubit system
showed[35] overall energy efficiency improvements of the order of 100x in
comparison to state-of-the-art classical computing servers when considering
pure computation time for running specialized algorithms.
5. Lower level of the programming abstractions – The programming
abstractions offered by QCPs of today[8,19,20,29] are of a low level. That is,
a programmer has to work at the level of quantum logic gates (usually via
a high-level language representation of it) when expressing computational
steps that he/she wants to execute via a QPU.
6. Remote software development and deployment – Programming tools
such as IDEs, debuggers, simulators etc. that a software developer can use to
create quantum software are invariably cloud based[8,19]. Only a very limited
portion[20,29] of the quantum programming tools stack can be deployed
and used on a programmer’s local machine. For development and testing of
production-ready quantum software a programmer typically requires access
to a remote QCP environment.
7. Dependency on quantum algorithms – To exploit the real potential
of quantum computers a programmer has to express the logic of his/her
software using quantum algorithms. A computing task where one is looking
to gain speedup by running it on a QCP is typically mapped to or broken
into another task(s) for which a quantum algorithm(s) is known.
8. Limited portability of software – Quantum computing platforms are
themselves in their infancy, though under rapid growth. As such there is lack
of standards that are necessary for developing quantum programs which can
be executed transparently on different QPUs. Each of the major providers of
QCPs offer their proprietary programming APIs and tools[19,20,30,28,8,29].
9. Limited quantum networking – Though long distance distribution of
quantum entanglement is feasible[36], realizing practical quantum commu-
nication networks is still a work in progress[37,38]. As such practical quantum
software which depends on availability of a reliable quantum network would
be hard to achieve.
10. Lack of native quantum operating system – The quantum processors
are still controlled via classical computing operating systems[39]. We do not
yet have mature multitasking and multiprocessing capabilities available for
quantum processors. Most existing QCPs[8,19,20,17] expose the quantum
gates and qubits for direct manipulation by programmers. Mature protocols
and APIs that implement, for example, practical timesharing of a Quantum
Processing Unit (QPU) are not available yet[39]. Similarly, quantum algo-
rithms which may exploit multiple QPUs in parallel is yet to be explored.
11. Limited multitasking and multiprocessing – This follows from the lack
of native quantum operating systems. A programmer has to rely on classical
computer’s OS for achieving any type of multitasking and multiprocessing
on a given set of QPUs.
12. Fundamentally different programming model – As discussed in §3,
quantum programs are inherently probabilistic. A programmer looking to
harness power of a QCP must identify or design suitable quantum algorithms
which are can solve the problem at hand.
13. Dependency on classical storage – Though limited time storage of entan-
gled qubits is feasible[40,41], long term persistence of qubits in passive media
is still not possible. Besides, it is not feasible to store arbitrary non-entangled
qubits due to different no-go theorems such as no-teleportation[42, Page 128],
no-cloning[31] and no-deleting[32] theorems. Thus, permanent persistence of
critical data in quantum programs still requires classical storage devices.
4.2 Effect on quality attributes
Quality attributes (QA) may be described as the factors which have system-wide
impact on an application’s architecture, implementation as well as operation[9].
The QAs that are of concern for a majority of applications may be categorized
depending on whether they affect design-, runtime-, system- or user- qualities of
the application[43,44].
The overall design and quality of a large majority of software applications can
be considered good when the applications possess a reasonable level of at least
the following QAs[9,12,45]: Performance, Reliability, Scalability, Security and
Usability. However, based on our experience, we considered a slightly expanded
list of QAs when examining how they are affected on a QCP:
1. Availability
2. Interoperability
3. Maintainability
4. Manageability
5. Performance
6. Reliability
7. Scalability
8. Security
9. Testability
10. Usability
In subsequent paragraphs we discuss only those aspects of a QA that are rel-
evant for identifying how the QA is affected by various characteristics of QCPs1.
We take each of the QCP characteristics identified in §4.1 in turn and discuss how
it affects various QAs under consideration. A characteristic may be considered
favorable, unfavorable or neutral for building a QA into an application. Summary
of the QA impact of various characteristics of QCPs is shown in Table-2.
Discussion
1. Platform heterogeneity: Heterogeneity makes it difficult to implement
high cohesion in software. Therefore, QAs such as maintainability, reliabil-
ity, robustness, reusability, and understandability get adversely affected due
to low cohesion. Heterogeneous environment also means more number of dis-
parate elements (software and hardware) to managed thus adversely affecting
manageability and testability of the system.
2. Special physical environment: A highly specialized physical environment
needed by a QCP is difficult to create, maintain and operate. Effect of am-
bient noise/interference is more pronounced in case of QPUs than it is on
CPUs. Such properties have adversely affect on the QAs such as availability
1 A detailed description and properties of individual QAs is readily available in stan-
dard software architecture literature such as [9,44,45] etc.
Table 2. Impact∗ of QCP characteristics on QAs
Characteristics A
va
il
a
b
il
it
y
In
te
ro
p
er
a
b
il
it
y
M
a
in
ta
in
a
b
il
it
y
M
a
n
a
g
ea
b
il
it
y
P
er
fo
rm
a
n
ce
R
el
ia
b
il
it
y
S
ca
la
b
il
it
y
S
ec
u
ri
ty
T
es
ta
b
il
it
y
U
sa
b
il
it
y
Platform heterogeneity U – U U – U – – U –
Special physical environment U – – U – U U U U –
Large form factor – – – – – – U – – –
Higher energy efficiency – – – – F – F – – –
Lower level of the programming abstractions U – U – – U – – U –
Remote software development and deployment – – U – – – – – U –
Dependency on quantum algorithms – U U – F – F – U –
Limited portability of software U U U – – – U – – –
Limited quantum networking U – – – U U U – – –
Lack of native quantum operating system – – – U U U U U – –
Fundamentally different programming model – U U – – U – U U –
Dependency on classical storage – – – U U U U – – –
∗Cell value indicates impact on QA: (F)avorable, (U)nfavorable, “–” → Unknown/Neutral
(e.g. due to “brittle” nature of physical qubits), manageability, scalability
(e.g. due to difficulties in quickly launching additional QPU instances) and
testability of the system.
3. Large form factor: Most of the QAs, except scalability, remain unaffected
by this property of QCPs. Large form factor makes it difficult to augment
the capabilities of a QCP thus adversely affecting scalability.
4. Higher energy efficiency: Except improving performance and scalability,
this property does not have significant impact on most other QAs.
5. Lower level of the programming abstractions: Programming the QCPs
requires one to work at the level of quantum gates[19,8,20] to compose the
necessary quantum circuits for implementing steps of a quantum algorithm.
Working at such low levels of abstractions is not easy and increases complex-
ity of the code. Moreover, there are not many (as of today at least) expert
quantum programmers.
This in turn adversely affects QAs such as maintainability, testability, relia-
bility and availability.
6. Remote software development and deployment: A major implication
of QCPs on testing and debugging arises due to the non-local nature of
a real quantum computer. The development tools/environment used for a
QCP are sort of distributed. The decentralized (typically, offered via a cloud
based IDE) and heterogeneous nature of the development environment will
make programing, testing and debugging of quantum programs slower and
tedious[46]. This adversely affects maintainability and testability.
7. Dependency on quantum algorithms: Probabilistic nature of quan-
tum computations and the results they produce adversely affect testability
and interoperability (with classical software). Synthesizing realistic pairs of
〈input, expected output〉 for test case scenarios as well as reproducing the
defects that one wants to debug requires special approaches.
Moreover, there are very few[47] – only about a dozen – quantum algorithms
known for different types of problems. Software engineers have to map their
problems to one of the existing few quantum algorithms. This adversely
affects the ability to perform enhancement and corrective maintenance.
8. Limited portability of software: Quantum computing, though rapidly
evolving, is still in its infancy. It lacks standardization in several areas rang-
ing from high-level programming APIs to low-level hardware. For example,
a quantum program written using Rigetti’s quantum ISA[30] may not be ex-
ecutable on Open QASM[29] supported by IBM. As such the portability of
software is adversely affected on QCPs. Lack of portability in turn adversely
affects availability, interoperability, maintainability and scalability.
9. Limited quantum networking: A reliable quantum network is necessary
for building reliable and high-performance quantum software. Quantum net-
works not yet production ready [37,38]. Thus, the performance, scalability,
reliability and, in turn, availability will be adversely affected.
10. Lack of native quantum operating system: A native operating sys-
tem helps in harnessing full potential of a hardware in a secure and effective
manner. This is lacking[39] in case of QCPs. It prohibits, for instance, practi-
cal timesharing of a QPU. Thus, the performance, manageability, reliability,
scalability and security will be adversely affected.
11. Fundamentally different programming model: Quantum programs are
inherently probabilistic and requires a fundamentally different approach to
programming (please see §3.2 ). This affects the ease of use of the underly-
ing technology and in turn the code complexity both of which are important
factors that influence[48] development and maintenance of dependable soft-
ware.
As such a QCP adversely affects maintainability, interoperability, security
and testability QAs.
12. Dependency on classical storage: For durably persisting critical data
the quantum programs depend on classical storage devices due to different
no-go theorems such as no-teleportation[42, Page 128], no-cloning[31] and
no-deleting[32] theorems. On a QCP this adversely affects manageability,
performance and scalability.
4.3 Threats to validity
Quantum computing is a fast evolving area of technology. The characteristics of
QCPs that we have identified are based on the study of currently available state-
of-the-art quantum hardware and software. We expect advances in quantum
computing will invalidate at least few of these characteristics in coming years.
For example, the production-ready native quantum operating systems are likely
to be feasible in the years to come.
Further, the list of characteristics that we have given is not an exhaustive list.
It is quite likely that there are additional QCP characteristics which, taken to-
gether, may be of significance in specific software development scenarios. Another
point that we would like to highlight is that our findings are derived from: a) pub-
lished information about QCPs and b) experimental programming on the QCPs
accessible to us. It is likely that there are unpublished features/information about
those QCPs which can affect the software architecture of quantum software ap-
plications. Next, we have not covered every QA which is relevant for a wider
set of application types. There may be QAs such as auditability, distributability,
extensibility etc. which are relevant and may be affected by the QCPs. Lastly,
our own experience and know-how as software architects has influenced to some
extent what we identified as the effect of different QCPs on various QAs.
5 Conclusions
Programmers’ interest in applying quantum computing has surged in the recent
past. Leveraging this technology in solving general purpose business problems
requires deeper understanding of important characteristics of QCPs, particularly
those which are relevant for software development.
We have shown that the key characteristics of a QCP make it different from
a classical computing platform. For instance, availability and know-how of quan-
tum algorithm(s) for solving a task at hand are a hard requirement for devel-
oping quantum programs. Such characteristics of a QCP affect various Quality
Attributes (QAs) of the quantum application software. The QCP characteristics
such as limited portability of quantum programs, lack of native quantum oper-
ating system services, dependency on quantum algorithms and so on, adversely
affect the ability to realize various QAs such as scalability, portability, testability
and maintainability etc. of the quantum application software. The QAs that are
favorably impacted by QCP characteristics include performance and scalability.
Overall, the specialized nature of QCPs appears to have a significant impli-
cation: it limits the use of QCPs for very specialized application areas where
performance QA is of chief importance. However, because the quantum com-
puting is undergoing rapid development we expect that the evolution of this
technology will likely introduce additional concerns and factors which may af-
fect the architecture of quantum software applications.
References
1. Alexander Semenovich Holevo. Bounds for the quantity of information transmitted
by a quantum communication channel. Problemy Peredachi Informatsii, 9(3):3–11,
1973.
2. Roman S Ingarden. Quantum information theory. Reports on Mathematical
Physics, 10(1):43–72, 1976.
3. Peter W Shor. Algorithms for quantum computation: Discrete logarithms and
factoring. In Foundations of Computer Science, 1994 Proceedings., 35th Annual
Symposium on, pages 124–134. Ieee, 1994.
4. Lov K Grover. A fast quantum mechanical algorithm for database search. In
Proceedings of the twenty-eighth annual ACM symposium on Theory of computing,
pages 212–219. ACM, 1996.
5. Hamish Johnston. Quantum-computing firm opens the
box. http://physicsworld.com/cws/article/news/2011/may/12/
quantum-computing-firm-opens-the-box, 2011. Retrieved: Feb 2018.
6. Intel Inc. Intel delivers 17-qubit superconducting chip with ad-
vanced packaging to qutech. https://newsroom.intel.com/news/
intel-delivers-17-qubit-superconducting-chip-advanced-packaging-qutech/,
2017. Retrieved: Feb 2018.
7. Will Knight. Ibm raises the bar with a 50-qubit quan-
tum computer. https://www.technologyreview.com/s/609451/
ibm-raises-the-bar-with-a-50-qubit-quantum-computer/, 2017. Retrieved:
Feb 2018.
8. IBM. Ibm q experience. https://quantumexperience.ng.bluemix.net/qx/
experience, 2017. Retrieved: Feb 2018.
9. Len Bass. Software architecture in practice, 3rd edition. Pearson, 2012.
10. Felix Bachmann, Len Bass, and Mark Klein. Illuminating the fundamental con-
tributors to software architecture quality. Technical report, CARNEGIE-MELLON
UNIV PITTSBURGH PA SOFTWARE ENGINEERING INST, 2002.
11. Felix Bachmann, Len Bass, and Mark Klein. Deriving architectural tactics: A step
toward methodical architectural design. Technical report, CARNEGIE-MELLON
UNIV PITTSBURGH PA SOFTWARE ENGINEERING INST, 2003.
12. Len Bass, Mark Klein, and Felix Bachmann. Quality attribute design primitives.
Technical report, CARNEGIE-MELLON UNIV PITTSBURGH PA SOFTWARE
ENGINEERING INST, 2000.
13. Michael A Nielsen and Isaac Chuang. Quantum computation and quantum infor-
mation, 2002.
14. Paul G. Kwiat and Harald Weinfurter. Embedded bell-state analysis. Phys. Rev.
A, 58:R2623–R2626, 1998.
15. D-Wave Systems Inc. Introduction to the D-Wave Quantum Hard-
ware. https://www.dwavesys.com/tutorials/background-reading-series/
introduction-d-wave-quantum-hardware#h2-7, 2017. Retrieved: 2018-02-19.
16. Matthias F. Brandl. A Quantum von Neumann Architecture for Large-Scale Quan-
tum Computing. arXiv:1702.02583 [quant-ph], 2017. arXiv: 1702.02583.
17. Microsoft. With new microsoft breakthroughs, general purpose quantum
computing moves closer to reality. https://news.microsoft.com/features/
new-microsoft-breakthroughs-general-purpose-quantum-computing-moves-closer-reality/,
2017. Retrieved: 2018-02-19.
18. Rigetti Inc. The rigetti QPU – pyQuil 1.8.0 documentation.
http://pyquil.readthedocs.io/en/latest/qpu.html, 2017. Retrieved: 2018-03-
05.
19. D-Wave Systems Inc. The D-Wave 2000q Quantum Computer Technology
Overview. https://www.dwavesys.com/sites/default/files/D-Wave%202000Q%
20Tech%20Collateral_0117F2.pdf, 2017. Retrieved: 2018-02-19.
20. Microsoft. Microsoft quantum development kit. https://www.microsoft.com/
en-us/quantum/development-kit, 2017. Retrieved: 2018-02-19.
21. Richard Cleve, Artur Ekert, Chiara Macchiavello, and Michele Mosca. Quantum
algorithms revisited. In Proceedings of the Royal Society of London A: Mathemat-
ical, Physical and Engineering Sciences, volume 454, pages 339–354. The Royal
Society, 1998.
22. Michele Mosca Alain Tapp Gilles Brassard, Peter Hoyer. [quant-ph/0005055]
Quantum Amplitude Amplification and Estimation. https://arxiv.org/abs/
quant-ph/0005055, 2000. Retrieved: 2018-03-05.
23. Lisa Hales and Sean Hallgren. An improved quantum fourier transform algorithm
and applications. In Foundations of Computer Science, 2000. Proceedings. 41st
Annual Symposium on, pages 515–525. IEEE, 2000.
24. Wim Van Dam and Gadiel Seroussi. Efficient quantum algorithms for estimating
gauss sums. arXiv preprint quant-ph/0207131, 2002.
25. Salvador E Venegas-Andraca. Quantum walks: a comprehensive review. Quantum
Information Processing, 11(5):1015–1106, 2012.
26. Andris Ambainis. Quantum walks and their algorithmic applications. International
Journal of Quantum Information, 1(04):507–518, 2003.
27. Mikko Mo¨tto¨nen, Juha J. Vartiainen, Ville Bergholm, and Martti M. Salomaa.
Quantum circuits for general multiqubit gates. Phys. Rev. Lett., 93:130502, 2004.
28. Rigetti Inc. The rigetti QVM – pyQuil 1.8.0 documentation.
http://pyquil.readthedocs.io/en/latest/qvm.html, 2017. Retrieved: 2018-03-
05.
29. Andrew W Cross, Lev S Bishop, John A Smolin, and Jay M Gambetta. Open
quantum assembly language. arXiv preprint arXiv:1707.03429, 2017.
30. Robert S. Smith, Michael J. Curtis, and William J. Zeng. A practical quantum
instruction set architecture. arXiv:1608.03355 [quant-ph], 2016.
31. William K Wootters and Wojciech H Zurek. A single quantum cannot be cloned.
Nature, 299(5886):802–803, 1982.
32. Arun Kumar Pati and Samuel L Braunstein. Impossibility of deleting an unknown
quantum state. Nature, 404(6774):164, 2000.
33. Jeremy Hsu. How much power will quantum computing
need? https://spectrum.ieee.org/tech-talk/computing/hardware/
how-much-power-will-quantum-computing-need, 2017. Retrieved: 2018-03-
02.
34. Joni Ikonen, Juha Salmilehto, and Mikko Mttnen. Energy-efficient quantum com-
puting. npj Quantum Information, 3(1):17, 2017.
35. D-Wave Systems Inc. Computational power consumption and speedup. https:
//www.dwavesys.com/sites/default/files/14-1005A_D_wp_Computational_
Power_Consumption_and_Speedup.pdf, 2017. Retrieved: 2018-03-02.
36. Juan et al Yin. Satellite-based entanglement distribution over 1200 kilometers.
arXiv:1707.01339 [physics, physics:quant-ph], 2017.
37. Christoph Simon. Towards a global quantum network. Nature Photonics,
11(11):678–680, 2017.
38. H. J. Kimble. The quantum internet. Nature, 453:1023, 2008.
39. Henry Corrigan-Gibbs, David J. Wu, and Dan Boneh. Quantum operating systems.
In Proceedings of the 16th Workshop on Hot Topics in Operating Systems, HotOS
’17, pages 76–81. ACM, 2017.
40. Christoph Clausen, Imam Usmani, Fe´lix Bussieres, Nicolas Sangouard, Mikael
Afzelius, Hugues de Riedmatten, and Nicolas Gisin. Quantum storage of photonic
entanglement in a crystal. Nature, 469(7331):508, 2011.
41. Fe´lix Bussie`res, Christoph Clausen, Alexey Tiranov, Boris Korzh, Varun B Verma,
Sae Woo Nam, Francesco Marsili, Alban Ferrier, Philippe Goldner, Harald Her-
rmann, et al. Quantum teleportation from a telecom-wavelength photon to a solid-
state quantum memory. Nature Photonics, 8(10):775–778, 2014.
42. Anirban Pathak. Elements of quantum computation and quantum communication.
Taylor & Francis, 2013.
43. P. Bourque and eds. R.E. Fairley. Guide to the Software Engineering Body of
Knowledge, Version 3.0. IEEE Computer Society, 2014.
44. Microsoft Patterns and Practices Team. Microsoft Application Architecture Guide,
2nd Edition. Microsoft, 2009.
45. ISO/IEC. ISO/IEC25010:2011(en), systems and software engineering systems and
software quality requirements and evaluation (SQuaRE) system and software qual-
ity models. https://www.iso.org/obp/ui/#iso:std:iso-iec:25010:ed-1:v1:
en, 2011. Retrieved: 11-03-2018.
46. G. Fylaktopoulos, G. Goumas, M. Skolarikis, A. Sotiropoulos, and I. Maglogiannis.
An overview of platforms for cloud based development. SpringerPlus, 5, 2016.
47. Peter W. Shor. Progress in Quantum Algorithms. Quantum Information Process-
ing, 3(1-5), 2004.
48. Capers Jones. The economics of software maintenance in the twenty first cen-
tury. http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.88.7697&
rep=rep1&type=pdf, 2017. Retrieved: 2018-03-01.
",154981140,"{'doi': None, 'oai': 'oai:arXiv.org:1803.07407'}",Quality Attributes on Quantum Computing Platforms,"{'code': 'en', 'name': 'English'}",2018-03-15T00:00:00+00:00,,[],['http://arxiv.org/abs/1803.07407'],,2018,"[{'type': 'download', 'url': 'http://arxiv.org/abs/1803.07407'}, {'type': 'display', 'url': 'https://core.ac.uk/outputs/154981140'}, {'type': 'similar', 'url': 'https://core.ac.uk/display/154981140?source=1&algorithmId=15&similarToDoc=&similarToDocKey=URL&recSetID=5b01a362-7b77-4901-9634-1318425f138a&position=6&recommendation_type=same_repo&otherRecs=186268113,162257170,186276408,229121698,343940970,154981140,158378844,157740116,189597082,153379796'}]","As the practical Quantum Computing Platforms (QCPs) rapidly become a reality,
it is desirable to harness their true potential in software applications. Thus
it becomes important to determine the implications of QCPs for software
architecture. In this paper we present the in-depth examination of
state-of-the-art QCPs for identifying all such characteristics of a QCP that
are relevant from software architecture perspective. Lack of a native quantum
operating system, a hard dependency on quantum algorithms, the lower level of
programming abstractions are few, out of many, examples of QCP characteristics
which may affect architecture of quantum software applications. Key
contributions of this paper include identifying: i) The general architecture of
a QCP, ii) The programming model which is typically used when developing
software for a QCP, iii) Architecturally significant characteristics of QCPs
and iv) The impact of these characteristics on various Quality Attributes
(QAs). We show that except performance and scalability, most of the other QAs
(e.g. maintainability, testability, reliability etc.) are adversely affected by
different characteristics of a QCP.Comment: Software and its engineering~Designing softwar","['text', 'Computer Science - Software Engineering', 'Computer Science - Emerging Technologies', 'Quantum Physics']",disabled
,"[{'name': 'Morimae, Tomoyuki'}]",[],2018-03-21T05:51:54+00:00,"{'name': 'arXiv.org e-Print Archive', 'url': 'https://api.core.ac.uk/v3/data-providers/144'}",,slides,,http://arxiv.org/abs/1803.06624,"ar
X
iv
:1
80
3.
06
62
4v
1 
 [q
ua
nt-
ph
]  
18
 M
ar 
20
18
Blind quantum computing can always be made verifiable
Tomoyuki Morimae1, 2, ∗
1Yukawa Institute for Theoretical Physics, Kyoto University,
Kitashirakawa Oiwakecho, Sakyo-ku, Kyoto 606-8502, Japan
2JST, PRESTO, 4-1-8 Honcho, Kawaguchi, Saitama, 332-0012, Japan
Blind quantum computing enables a client, who does not have enough quantum technologies,
to delegate her quantum computing to a remote quantum server in such a way that her privacy
is protected against the server. Some blind quantum computing protocols can be made verifiable,
which means that the client can check the correctness of server’s quantum computing. Can any blind
protocol always be made verifiable? In this paper, we answer to the open problem affirmatively.
We propose a plug-in that makes any universal blind quantum computing protocol automatically
verifiable. The idea is that the client blindly generates Feynman-Kitaev history states corresponding
to the quantum circuit that solves client’s problem and its complement circuit. The client can learn
the solution of the problem and verify its correctness at the same time by measuring energies of
local Hamiltonians on these states. Measuring energies of local Hamiltonians can be done with only
single qubit measurements of Pauli operators.
Blind quantum computing [1–17] is a quantum crypto-
graphic protocol that enables a client (Alice), who does
not have enough quantum technologies, to delegate her
quantum computing to a remote quantum server, Bob,
in such a way that her privacy (the input, output, and
program) is protected against Bob. (For a review, see
Ref. [18]). The protocol proposed by Broadbent, Fitzsi-
mons, and Kashefi (BFK) [3] uses measurement-based
quantum computing [19], and Alice needs only the ability
of generating randomly-rotated single qubit states. The
BFK protocol was experimentally realized with photonic
qubits [20]. The protocol proposed by Morimae and Fujii
(MF) [4], which also uses measurement-based quantum
computing, on the other hand, requires Alice to do only
single-qubit measurements.
Several blind quantum computing protocols can be
made verifiable, which means that Alice can check the
correctness of Bob’s quantum computing in spite that
her quantum technologies are severely limited [2, 21–
32]. (For a review, see Ref. [33].) The verifiability is
important in realistic cloud quantum computing, since
Bob might give Alice a wrong result deliberately, or it
might be even the case that what Bob actually has is not
a real quantum computer but a fake one. Experimental
realizations of verifiable blind quantum computing were
also done [34, 35].
To make blind quantum computing protocols verifi-
able, mainly two different types of techniques have been
used. The first type is so called the trap technique [2, 21].
Alice hides some isolated qubits, which are called “trap
qubits”, in the register, and later checks that trap qubits
are not disturbed by Bob. Since Bob does not know the
place of each trap qubit, he will disturb a trap qubit
with high probability if he deviates from the correct pro-
cedure. If the quantum computation is encoded with
a quantum error correcting code, the probability that
Bob can change a logical state without changing any trap
qubit becomes exponentially small [21]. (If Bob wants to
change the state of a logical qubit, he has to change more
than d qubits, where d is the code distance. It increases
the probability of he touching a trap qubit.)
The second type of the technique is called the stabilizer
test [22, 31, 32, 36]. In the MF protocol, Bob generates
graph states and sends each qubit one by one to Alice. Al-
ice randomly choses some of graph states and checks the
correctness of them by measuring stabilizer operators of
the graph state. Such tests can be done with only single-
qubit measurements of Pauli operators [22, 31, 32, 36].
It was shown in Refs. [22, 31, 32, 36] that if Alice passes
the stabilizer test, a remaining state is close to the ideal
graph state on which she can do universal measurement-
based quantum computing.
In this way, delegated quantum computing has two
important properties, the blindness and the verifiability.
Relations between them are still not clear. For example,
the blindness was believed to be necessary to achieve the
verifiability, but recently the belief has turned out to be
wrong, since a protocol that is verifiable but not neces-
sarily blind has been found [37].
Another open problem is whether any blind protocol
can always be made verifiable or not. The BFK proto-
col [3] can be made verifiable (Fitzsimons-Kashefi (FK)
protocol [21]), and the MF protocol [4] can also be made
verifiable (Hayashi-Morimae (HM) protocol [22]). How-
ever, the ways of making these blind protocols verifiable
are protocol specific, i.e., structures of the blind proto-
cols are exploited to make them verifiable. If someone
finds a completely new blind protocol never seen before,
can we always make it verifiable?
In this paper, we solve the open problem affirma-
tively. We propose a “plug-in” that makes any universal
blind quantum computing protocol automatically verifi-
able. Our idea is based on the post hoc verification [37].
In the posthoc verification, the prover sends the verifier
the solution of a problem, and the Feynman-Kitaev his-
tory state [38] corresponding to the quantum circuit that
2solves the problem or its complement circuit [37]. The
verifier can verify the correctness of the solution by mea-
suring the energy of a local Hamiltonian on the history
state. Measuring energy of local Hamiltonians can be
done with only single qubit measurements of Pauli op-
erators [36]. Our idea is that Alice generates the two
history states corresponding to the solving circuit and
the complement circuit by using the given universal blind
quantum computing protocol, and asks Bob to send them
to Alice. She can learn the solution and verify its cor-
rectness at the same time by measuring their energies. A
more precise description of the procedure will be given
later. We will also see that our verification technique is
different from and simpler than the two existing tech-
niques (i.e., the trap technique and the stabilizer tech-
nique) explained above.
Energy test.— Before explaining our procedure, we re-
view the energy test [36], which is an essential ingredient
of our protocol. Let
H =
∑
S
dSS
be a Hamiltonian acting on m qubits, where dS is a real
number and S is a tensor product of m Pauli operators,
X , Y , Z, and I.
Let ρ be an m-qubit state. We call the following test
“the energy test for H on ρ”:
1. Alice randomly chooses S with probability
|dS|∑
S |dS|
[39].
2. Let
S =
m⊗
j=1
Pj ,
where Pj ∈ {X,Y, Z, I} for j = 1, 2, ...,m. If Pj 6=
I, Alice measures the jth qubit in the Pj -basis, and
obtains the result cj ∈ {±1}. If Pj = I, Alice does
nothing on the jth qubit, and sets cj = +1.
3. If
m∏
j=1
cj = −sign(dS),
Alice concludes that she passes the test.
The probability ppass that Alice passes the test is
ppass =
∑
S
|dS |∑
S |dS |
Tr
(I⊗m − sign(dS)S
2
ρ
)
=
1
2
− Tr(Hρ)∑
S 2|dS |
.
Construction of a verifiable protocol.— Now we explain
how to construct a verifiable blind protocol from a blind
protocol. Let L be a language in BQP. Assume that Alice
wants to know whether x ∈ L or x /∈ L for an instance
x. Let Vx be the n-qubit quantum circuit corresponding
to x, which means that if x ∈ L, then
∥∥(|0〉〈0| ⊗ I⊗n−1)Vx|0n〉
∥∥2 ≥ 1− 2−r,
and if x /∈ L, then
∥∥(|0〉〈0| ⊗ I⊗n−1)Vx|0n〉
∥∥2 ≤ 2−r,
where r is any polynomial. The circuit Vx is written as
Vx = UTUT−1...U1U0,
where Uj (j = 0, 1, 2, ..., T ) is a unitary gate acting on at
most a constant number of qubits, and U0 = I
⊗n. Each
Uj is taken from any standard universal gate set. Let
|ψ0〉 and |ψ1〉 be m-qubit Feynman-Kitaev history states
corresponding to Vx and (X ⊗ I⊗n−1)Vx, respectively.
More precisely,
|ψ0〉 ≡ 1√
T + 1
T∑
t=0
(Ut...U0|0n〉)⊗ |t〉
and
|ψ1〉 ≡ 1√
T + 1
[
(X ⊗ I⊗n−1)(UT ...U0|0n〉)⊗ |T 〉
+
T−1∑
t=0
(Ut...U0|0n〉)⊗ |t〉
]
.
It is known that there existm-qubit local Hamiltonians
H0 and H1 such that:
• If x ∈ L then
〈ψ0|H0|ψ0〉 ≤ a, and
Tr(σH1) ≥ b′ for any m-qubit state σ.
• If x /∈ L then
〈ψ1|H1|ψ1〉 ≤ a′, and
Tr(σH0) ≥ b for any m-qubit state σ.
Here, a, b, a′ and b′ are certain parameters such that
b − a ≥ 1poly(|x|) and b′ − a′ ≥ 1poly(|x|) . It is easily
shown by noticing the facts that BQP is in QMA, the
local Hamiltonian problem is QMA-hard [38], and BQP
is closed under complement. (For details, see Ref. [37].
In Appendix, we also provide a detailed explanation for
the convenience of readers.) Furthermore, it is known
that H0 and H1 can be two-local Hamiltonians with only
X and Z operators [40, 41].
Let us define
α ≡ 1
2
− a∑
S 2|dS|
, α′ ≡ 1
2
− a
′
∑
S 2|dS|
,
β ≡ 1
2
− b∑
S 2|dS|
, β′ ≡ 1
2
− b
′
∑
S 2|dS |
.
3Assume that a universal blind quantum computing
protocol is given. It can be the BFK protocol [3], the MF
protocol [4], or even a completely new protocol never seen
before. The following procedure makes the blind proto-
col verifiable. (We describe the procedure assuming that
Bob is honest. If Bob is malicious, the state of Eq. (1) is
replaced with any (mk0 +mk1)-qubit state.)
1. By running the universal blind quantum computing
protocol, Alice blindly generates
|ψ0〉⊗k0 ⊗ |ψ1〉⊗k1 (1)
in Bob’s place, where k0 and k1 are some polyno-
mials that will be specified later [42].
2. Bob sends each qubit of Eq. (1) one by one to Alice.
3. Alice does the energy test for H0 on each |ψ0〉. Let
η0 be the number of times that she passes the test.
If
η0
k0
≥ α+ β
2
,
she outputs ξ0 = 1. Otherwise, she outputs ξ0 = 0.
4. Alice does the energy test for H1 on each |ψ1〉. Let
η1 be the number of times that she passes the test.
If
η1
k1
≥ α
′ + β′
2
,
she outputs ξ1 = 1. Otherwise, she outputs ξ1 = 0.
5. If (ξ0, ξ1) = (1, 0), Alice concludes x ∈ L. If
(ξ0, ξ1) = (0, 1), she concludes x /∈ L. Otherwise,
she concludes that Bob is dishonest.
It is obvious that this procedure does not degrade the
blindness of the original protocol. Therefore thus con-
structed verifiable blind protocol is as secure as the orig-
inal blind protocol.
When Bob is honest.— First let us consider the case
when Bob is honest. What Alice receives is the state of
Eq. (1).
If x ∈ L, the probability that Alice outputs ξ0 = 1 is
Pr
[η0
k0
≥ α+ β
2
]
= 1− Pr
[η0
k0
<
α+ β
2
]
= 1− Pr
[
α− η0
k0
>
α− β
2
]
≥ 1− e−2k0 (α−β)
2
4 ,
and probability that Alice outputs ξ1 = 0 is
Pr
[η1
k1
<
α′ + β′
2
]
= 1− Pr
[η1
k1
≥ α
′ + β′
2
]
= 1− Pr
[η1
k1
− β′ ≥ α
′ − β′
2
]
≥ 1− e−2k1 (α
′
−β′)2
4 .
Therefore, the probability that Alice concludes x ∈ L is
larger than
(
1− e−2k0 (α−β)
2
4
)(
1− e−2k1 (α
′
−β′)2
4
)
≥ (1 − e−u)2
if we take k0 and k1 so that
k0 ≥ 2u
(α− β)2 ,
k1 ≥ 2u
(α′ − β′)2
for any polynomial u.
In a similar way, we can show that if x /∈ L, the proba-
bility that Alice concludes x /∈ L is larger than (1−e−u)2
for any polynomial u.
Bob is dishonest.— We next consider the case when
Bob is dishonest. What Alice receives is no longer the
state of Eq. (1) but any (mk0 +mk1)-qubit state ρ.
Assume that x ∈ L. For any state ρ, the probability
that Alice outputs ξ1 = 1 is
Pr
[η1
k1
≥ α
′ + β′
2
]
= Pr
[η1
k1
− β′ ≥ α
′ − β′
2
]
≤ e−2k1 (α
′
−β′)2
4 .
Therefore, the probability that Alice concludes x /∈ L is
less than e−u.
Assume that x /∈ L. For any state ρ, the probability
that Alice outputs ξ0 = 1 is
Pr
[η0
k0
≥ α+ β
2
]
= Pr
[η0
k0
− β ≥ α− β
2
]
≤ e−2k0 (α−β)
2
4 .
Therefore, the probability that Alice concludes x ∈ L
is less than e−u. Note that when Bob is dishonest, the
results of Alice’s energy tests are not necessarily inde-
pendent, since Bob might send Alice any entangled state
in stead of Eq. (1), but using the standard argument of
the error reduction for QMA [43], we can upperbound
the soundness probability by considering the case when
each energy test is an independent Bernoulli trial with a
success probability smaller than β (or β′).
Discussion.— In this paper, we have shown that any
universal blind quantum computing protocol can always
be made verifiable. To conclude this paper, let us dis-
cuss the robustness of our verifiable protocol. Even if
Bob is honest, what Alice receives might be slightly de-
viated from the state of Eq. (1) due to some imperfections
of Bob’s operations and noises in the quantum channel
from Bob to Alice. However, as long as the deviated
state is sufficiently close to the ideal state in terms of the
L1-norm, probabilities of passing energy tests are not so
much changed and therefore the 1/poly gap between the
completeness and the soundness should be maintained.
4Furthermore, since universal blind quantum computing
can be done in the fault-tolerant way [13, 28, 29], and
what Alice has to do in the energy test is only X and
Z measurements, which can be done transversally in, for
example, the CSS code, the full fault-tolerance should be
possible. The detailed analysis with specific error param-
eters is, however, beyond the scope of the present paper.
In this paper, we have considered only decision prob-
lems for simplicity, but our result can be generalized to
state generation tasks: by measuring the energy, Alice
can verify that Bob has honestly generated the correct
Feynman-Kitaev history state. From it, she can obtain
UT ...U0|0n〉 with 1/poly probability by measuring the
clock register.
We also finally mention that there are several veri-
fiable blind quantum computing protocols that assume
more than two servers who are entangling but not com-
municating with each other [44–47]. These protocols are
interesting because Alice can be completely classical, but
in this paper we have concentrated on the single-server
setup. It would be an interesting future research subject
to study relations between the blindness and the verifia-
bility in the multi-server setting.
TM thanks Yuki Takeuchi for his comments on the
draft. TM is supported by JST PRESTO and the JSPS
Grant-in-Aid for Young Scientists (B) No.17K12637.
Appendix.— Let L be a language in BQP. It means that
for any polynomial r there exists a uniformly-generated
family {Vx}x of polynomial-size quantum circuits such
that
• If x ∈ L then ∥∥(|0〉〈0| ⊗ I⊗n−1)Vx|0n〉
∥∥2 ≥ 1− 2−r.
• If x /∈ L then ∥∥(|0〉〈0| ⊗ I⊗n−1)Vx|0n〉
∥∥2 ≤ 2−r.
Then L is trivially in QMA with the verification circuit
Wx ≡ Vx⊗I⊗w, and the yes witness state |0w〉, where w is
any polynomial. Since the local Hamiltonian problem is
QMA-hard, there exists an local Hamiltonian H0 acting
on m qubits such that
• If x ∈ L then 〈ψ0|H0|ψ0〉 ≤ a
• If x /∈ L then for anym-qubit state σ, Tr(σH0) ≥ b.
Here a and b are certain parameters such that b − a ≥
1/poly(|x|).
Let us define V ′x ≡ (X ⊗ I⊗n−1)Vx. Then,
• If x ∈ L then
∥∥(|0〉〈0| ⊗ I⊗n−1)V ′x|0n〉
∥∥2 ≤ 2−r.
• If x /∈ L then
∥∥(|0〉〈0| ⊗ I⊗n−1)V ′x|0n〉
∥∥2 ≥ 1− 2−r.
Therefore, in a similar argument, we can show that there
exists an local Hamiltonian H1 acting on m qubits such
that
• If x /∈ L then 〈ψ1|H1|ψ1〉 ≤ a′
• If x ∈ L then for any m-qubit state σ, Tr(σH1) ≥
b′.
Here a′ and b′ are certain parameters such that b′− a′ ≥
1/poly(|x|).
∗ Electronic address: tomoyuki.morimae@yukawa.kyoto-u.ac.jp
[1] A. Childs, Secure assisted quantum computation. Quant.
Inf. Comput. 5, 456 (2005).
[2] D. Aharonov, M. Ben-Or, E. Eban, and U. Ma-
hadev, Interactive proofs for quantum computations.
arXiv:1704.04487
[3] A. Broadbent, J. F. Fitzsimons, and E. Kashefi, Univer-
sal blind quantum computation. Proc. of the 50th Annual
IEEE Sympo. on Found. of Comput. Sci. 517 (2009).
[4] T. Morimae and K. Fujii, Blind quantum computation
protocol in which Alice only makes measurements. Phys.
Rev. A 87, 050301(R) (2013).
[5] S. Aaronson, A. Cojocaru, A. Gheorghiu, and E. Kashefi,
On the implausibility of classical client blind quantum
computing. arXiv:1704.08482
[6] T. Sueki, T. Koshiba, and T. Morimae, Ancilla-driven
universal blind quantum computation. Phys. Rev. A 87,
060301(R) (2013).
[7] V. Giovannetti, L. Maccone, T. Morimae, and T. G.
Rudolph, Efficient universal blind computation. Phys.
Rev. Lett. 111, 230501 (2013).
[8] A. Mantri, C. Pe´rez-Delgado, and J. F. Fitzsimons, Op-
timal blind quantum computation. Phys. Rev. Lett. 111,
230502 (2013).
[9] T. Morimae and K. Fujii, Secure entanglement distilla-
tion for double-server blind quantum computation. Phys.
Rev. Lett. 111, 020502 (2013).
[10] V. Dunjko, J. F. Fitzsimons, C. Portmann, and R. Ren-
ner, Composable security of delegated quantum compu-
tation. ASIACRYPT 2014, LNCS Volume 8874, pp.406-
425 (2014).
[11] V. Dunjko, E. Kashefi, and A. Leverrier, Blind quantum
computing with weak coherent pulses. Phys. Rev. Lett.
108, 200502 (2012).
[12] T. Morimae, V. Dunjko, and E. Kashefi, Ground state
blind quantum computation on AKLT state. Quant. Inf.
Comput. 15, 0200 (2015).
[13] T. Morimae and K. Fujii, Blind topological measurement-
based quantum computation. Nature Communications 3,
1036 (2012).
[14] T. Morimae, Continuous-variable blind quantum compu-
tation. Phys. Rev. Lett. 109, 230502 (2012).
[15] V. Dunjko and E. Kashefi, Blind quantum computing
with two almost identical states. arXiv:1604.01586
[16] A. Mantri, T. F. Demarie, N. C. Menicucci, and J. F.
Fitzsimons, Flow ambiguity: a path towards classically
driven blind quantum computation. Phys. Rev. X 7,
031004 (2017).
[17] C. A. Pe´rez-Delgado and J. F. Fitzsimons, Overcom-
ing efficiency constraints on blind quantum computation.
Phys. Rev. Lett. 114, 220502 (2015).
[18] J. F. Fitzsimons, Private quantum computation: an in-
troduction to blind quantum computing. njp Quantum
Information 3, 23 (2017).
5[19] R. Raussendorf and H. J. Briegel, A one-way quantum
computer. Phys. Rev. Lett. 86, 5188 (2001).
[20] S. Barz, E. Kashefi, A. Broadbent, J. F. Fitzsimons, A.
Zeilinger, and P. Walther, Demonstration of blind quan-
tum computing. Science 335, 303 (2012).
[21] J. F. Fitzsimons and E. Kashefi, Unconditionally verifi-
able blind computation. Phys. Rev. A 96, 012303 (2017).
[22] M. Hayashi and T. Morimae, Verifiable measurement-
only blind quantum computing with stabilizer testing.
Phys. Rev. Lett. 115, 220502 (2015).
[23] M. Hajdusˇek, C. A. Pe´rez-Delgado, and J. F. Fitzsimons,
Device-independent verifiable blind quantum computa-
tion. arXiv:1502.02563
[24] A. Gheorghiu, E. Kashefi, and P. Wallden, Robustness
and device independence of verifiable blind quantum
computing. New J. Phys. 17, 083040 (2015).
[25] A. Gheorghiu, P. Wallden, and E. Kashefi, Rigidity of
quantum steering and one-sided device-independent ver-
ifiable quantum computation. New J. Phys. 19, 023043
(2017).
[26] T. Morimae, Measurement-only verifiable blind quantum
computing with quantum input verification. Phys. Rev.
A 94, 042301 (2016).
[27] T. Morimae, Verification for measurement-only blind
quantum computing. Phys. Rev. A 89, 060302(R) (2014).
[28] Y. Takeuchi, K. Fujii, T. Morimae, and N. Imoto, Fault-
tolerant verifiable blind quantum computing with logical
state remote preparation. arXiv:1607.01568
[29] K. Fujii and M. Hayashi, Verifiable fault tolerance in
measurement-based quantum computation. Phys. Rev. A
96, 030301(R) (2017).
[30] K. Honda, Publicly verifiable blind quantum computa-
tion. arXiv:1604.00116
[31] T. Morimae, Y. Takeuchi, and M. Hayashi, Verified
measurement-based quantum computing with hyper-
graph states. Phys. Rev. A 96, 062321 (2017).
[32] Y. Takeuchi and T. Morimae, Verification of many-qubit
states. arXiv:1709.07575
[33] A. Gheorghiu, T. Kapourniotis, and E. Kashefi, Verifi-
cation of quantum computation: An overview of existing
approaches. arXiv:1709.06984
[34] S. Barz, J. F. Fitzsimons, E. Kashefi, and P. Walther, Ex-
perimental verification of quantum computation. Nature
Phys. 9, 727 (2013).
[35] C. Greganti, M. Roehsner, S. Barz, T. Morimae, and
P. Walther, Demonstration of measurement-only blind
quantum computing. New J. Phys. 18, 013020 (2016).
[36] T. Morimae, D. Nagaj, and N. Schuch, Quantum proofs
can be verified using only single qubit measurements.
Phys. Rev. A 93, 022326 (2016).
[37] J. F. Fitzsimons, M. Hajdusˇek, and T. Morimae, Post hoc
verification of quantum computation. Phys. Rev. Lett.
120, 040501 (2018).
[38] A. Yu. Kitaev, A. H. Shen, and M. N. Vyalyi, Classical
and quantum computation. Vol. 47 of Graduate Studies
in Mathematics, AMS (2002).
[39] Note that we have assumed that the probability distribu-
tion {|dS |/
∑
S
|dS|}S can be sampled in classical polyno-
mial time. Local Hamiltonians that we will consider later
satisfy such a property.
[40] J. D. Biamonte and P. J. Love, Realizable Hamiltonians
for universal adiabatic quantum computers. Phys. Rev.
A 78, 012352 (2008).
[41] T. Cubitt and A. Montanaro, Complexity classification
of local hamiltonian problems. IEEE 55th Annual Sym-
posium on Foundations of Computer Science (FOCS),
pp.120-129 (2014).
[42] In blind quantum computing, what is actually generated
is not exactly the state of Eq. (1), but the one up to a
random Pauli one-time pad [3, 4]. We can, however, cor-
rect the effect of the Pauli one-time pad by appropriately
modifying the basis of measurements that are done later
on the state. Therefore, without loss of generality, we can
assume that the state of Eq. (1) is generated.
[43] D. Aharonov and T. Naveh, Quantum NP - A survey.
arXiv:0210077
[44] B. W. Reichardt, F. Unger, and U. Vazirani, Classical
command of quantum systems. Nature 496, 456 (2013).
[45] M. McKague, Interactive proofs for BQP via self-tested
graph states. Theory of Computing 12, 1 (2016).
[46] Z. Ji, Classical verification of quantum proofs. Proceed-
ings of the 48th annual ACM symposium on Theory of
Computing (STOC 16), pp.885-898 (2016).
[47] H. L. Huang et al. Experimental blind quantum com-
puting for classical client. Phys. Rev. Lett. 119, 050503
(2017).
",153379796,"{'doi': None, 'oai': 'oai:arXiv.org:1803.06624'}",Blind quantum computing can always be made verifiable,"{'code': 'en', 'name': 'English'}",2018-03-18T00:00:00+00:00,,[],['http://arxiv.org/abs/1803.06624'],,2018,"[{'type': 'download', 'url': 'http://arxiv.org/abs/1803.06624'}, {'type': 'display', 'url': 'https://core.ac.uk/outputs/153379796'}, {'type': 'similar', 'url': 'https://core.ac.uk/display/153379796?source=1&algorithmId=15&similarToDoc=&similarToDocKey=URL&recSetID=5b01a362-7b77-4901-9634-1318425f138a&position=10&recommendation_type=same_repo&otherRecs=186268113,162257170,186276408,229121698,343940970,154981140,158378844,157740116,189597082,153379796'}]","Blind quantum computing enables a client, who does not have enough quantum
technologies, to delegate her quantum computing to a remote quantum server in
such a way that her privacy is protected against the server. Some blind quantum
computing protocols can be made verifiable, which means that the client can
check the correctness of server's quantum computing. Can any blind protocol
always be made verifiable? In this paper, we answer to the open problem
affirmatively. We propose a plug-in that makes any universal blind quantum
computing protocol automatically verifiable. The idea is that the client
blindly generates Feynman-Kitaev history states corresponding to the quantum
circuit that solves client's problem and its complement circuit. The client can
learn the solution of the problem and verify its correctness at the same time
by measuring energies of local Hamiltonians on these states. Measuring energies
of local Hamiltonians can be done with only single qubit measurements of Pauli
operators.Comment: 5 pages, no figur","['text', 'Quantum Physics']",disabled
